/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.12.2023 06:55:47

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0025836217682808638, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 26308, -27059, -30676, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00017996803217101842, 0.000189204205526039, 0.00018950643425341696, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 91,83,122,-82,-61,6,-28,32,-8,51,40,-35,-40,-99,99,32,-67,73,95,118,-18,-16,42,-101,-118,127,-78,5,78,13,-23,-16, 
  /* [1][0][][] */ 51,-39,-70,17,-11,127,-22,-7,121,-62,-3,-89,-64,103,31,-52,92,-45,-19,-95,-113,17,114,65,17,8,3,-12,-82,-52,-3,-25, 
  /* [2][0][][] */ -41,79,-79,69,79,-39,-41,116,94,27,127,-16,-97,-86,79,118,-80,-67,-6,-112,72,106,-48,-100,84,-64,-16,-118,14,-77,86,-21, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0031213746406137943, 0.003281567245721817, 0.0032868089620023966, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 188, 251, -26, -435, -31, 172, 17, 227, 196, 697, 222, 898, -289, -13, -454, 231, 40, -261, 877, -230, -56, -609, 216, 202, -415, 846, -307, -313, 805, -166, -189, -229, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1199502447852865e-05, 4.1297214920632541e-05, 4.582381370710209e-05, 4.4266213080845773e-05, 4.0264993003802374e-05, 3.900016236002557e-05, 4.4650714698946103e-05, 4.3511343392310664e-05, 4.2246465454809368e-05, 4.4144988351035863e-05, 4.4467848056228831e-05, 4.5408731239149347e-05, 4.5762240915792063e-05, 4.1390248952666298e-05, 4.2827010474866256e-05, 4.0824983443599194e-05, 4.032971992273815e-05, 4.1865900129778311e-05, 4.5917757233837619e-05, 4.455413727555424e-05, 4.1083221731241792e-05, 4.5625689381267875e-05, 4.2215058783767745e-05, 4.0268780139740556e-05, 4.2619107261998579e-05, 4.4404805521480739e-05, 4.1383216739632189e-05, 4.0887411159928888e-05, 4.1699673602124676e-05, 4.3953699787380174e-05, 4.0891900425776839e-05, 4.1785646317293867e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -40,-48,114,13,105,-1,-90,-100,65,-97,-112,2,53,11,-35,58,-54,-33,-63,-64,-74,-105,8,117,-112,7,81,-44,118,4,-22,-90,101,-64,-91,70,-109,-83,-87,30,79,-90,-108,109,56,-116,110,-17,27,-57,-42,101,-73,-55,-98,111,37,66,127,-109,-83,92,-51,49,-4,16,77,98,54,92,91,-123,107,-105,55,92,-108,19,-61,37,56,22,98,-10,-61,-42,-89,105,30,122,-3,-123,16,71,27,12, 
  /* [1][0][][] */ -57,31,-71,5,-37,90,45,16,85,-103,-103,115,77,-21,31,73,117,-42,37,127,-45,0,43,35,38,15,-48,115,10,11,100,-63,62,115,-3,26,56,69,-6,-65,-60,12,-23,-96,-36,40,-27,-50,-23,-84,121,66,20,94,-77,-56,36,104,66,92,-56,122,-64,-90,-54,42,86,46,113,30,24,13,-113,96,-48,55,94,-43,-37,87,-80,92,-54,-121,32,127,-74,-64,87,90,102,30,92,92,36,-4, 
  /* [2][0][][] */ 38,38,-38,91,-21,-61,81,84,-87,77,-37,127,94,-15,76,-106,-56,-27,50,45,-95,-12,106,17,-25,69,101,27,-53,67,73,82,-65,-24,-90,-101,-75,83,93,-29,-115,-75,11,-9,-81,105,-30,-75,93,54,80,-90,-32,53,15,12,-70,84,-41,2,-21,74,-40,70,78,38,49,79,-96,61,8,-72,29,-72,34,46,-57,-21,4,27,31,-78,-14,-45,-2,-95,-19,-36,79,101,-5,-1,-46,-85,-51,-64, 
  /* [3][0][][] */ 73,-6,25,-31,-80,39,-116,31,46,7,61,-8,79,88,65,-5,90,94,-65,16,110,-95,-74,-121,-36,-115,-83,93,34,-103,79,9,-57,-36,-24,-19,-102,-24,28,47,-25,-94,-101,-9,69,27,-46,-88,62,-90,44,-1,82,29,87,-97,-115,-116,-124,-70,-94,23,-35,68,56,-34,-70,-30,-41,-78,-8,95,14,-103,41,-60,31,83,88,-65,-89,-127,32,91,23,41,-50,-114,-83,41,-11,-103,80,-103,-86,31, 
  /* [4][0][][] */ 61,94,-24,53,-26,-19,36,17,55,100,-4,33,13,-36,-11,-67,-26,-2,-86,22,117,-99,90,31,-19,-2,67,-85,-71,47,-73,-49,70,127,22,-120,-60,-1,-120,52,-48,-63,-75,-92,39,117,44,63,19,-64,-20,-73,-117,55,-86,13,44,-99,28,17,12,-101,-34,-88,-40,64,-2,-39,34,-103,-107,-87,-55,25,111,34,73,-26,-7,-81,9,-48,-113,-17,3,78,90,8,-123,-75,24,54,36,100,-97,-15, 
  /* [5][0][][] */ 112,-98,66,80,50,-126,33,61,111,-126,2,-96,8,110,42,44,72,72,-98,116,38,56,21,-26,-110,-65,-15,-120,49,40,20,-103,-39,7,-79,21,-127,-34,51,28,-92,-53,46,111,-32,31,44,-53,-115,102,26,41,24,23,45,-21,118,57,-55,-41,38,-96,48,-80,-28,116,-32,31,88,0,107,-73,-48,89,-29,-100,16,-52,15,75,122,46,30,123,-85,94,-4,47,78,-104,110,105,-17,32,85,-91, 
  /* [6][0][][] */ 14,-30,127,78,-81,-63,0,63,-5,-74,7,-66,102,58,114,-111,43,4,19,96,-74,-109,110,59,-58,-78,-3,-37,-20,-112,48,-77,-82,-115,-43,-92,3,37,-104,78,82,55,26,-13,-107,101,-86,-42,-75,35,-24,-65,76,-54,90,-24,7,-8,-64,111,-90,20,63,-64,-51,63,102,-45,74,-2,-99,-4,55,-60,-85,-20,-78,-91,-51,-5,33,-16,43,-27,-67,-83,-35,-92,82,91,110,14,-46,-64,71,-26, 
  /* [7][0][][] */ 123,50,-51,-38,-65,121,-13,7,112,8,-89,3,57,-80,52,78,56,22,-23,121,60,39,-2,92,-64,105,38,41,-79,114,-21,43,24,32,73,83,-106,94,-2,-21,101,-69,88,74,56,5,110,-104,54,-55,-107,-60,-27,94,24,32,123,-82,6,-51,15,-23,87,-127,-60,-47,71,28,-99,24,69,90,90,27,64,49,-55,57,-92,32,97,-34,-16,-66,92,40,-108,100,87,13,80,71,-46,-37,6,-61, 
  /* [8][0][][] */ 21,33,-67,-95,70,38,-70,-16,0,42,52,76,-7,-40,-81,-68,-65,103,-86,29,38,-23,85,119,-113,102,49,56,-74,31,-89,127,98,-26,57,-2,116,11,-13,78,90,111,-107,-114,-4,-22,-15,117,23,-104,-60,8,-81,0,-23,-105,58,115,-90,111,122,21,53,105,-23,-39,-21,106,-77,56,35,5,84,76,16,2,-39,110,89,57,43,85,-109,-80,32,49,78,-34,45,-31,-107,111,-74,-95,-39,67, 
  /* [9][0][][] */ 18,26,127,62,91,-105,-32,-95,57,62,7,70,-11,-61,-83,-10,22,15,-83,-62,20,114,-88,-86,126,5,2,42,2,-56,-69,113,64,17,34,0,-58,32,-14,-29,63,-49,73,-73,94,37,-86,67,57,0,-68,-38,87,-57,-56,117,95,-42,-11,11,-74,121,90,-64,-78,21,118,61,-33,119,123,-72,20,93,-91,-75,-68,-99,-23,121,48,37,115,45,-26,-76,53,-1,112,47,-18,117,121,14,72,-17, 
  /* [10][0][][] */ -53,59,73,-61,-10,109,110,34,34,33,29,-81,96,85,-28,16,-30,84,-118,-53,-12,32,58,-61,36,59,-114,-127,-50,85,-90,-72,82,104,122,51,-42,13,-25,40,-28,118,-104,-31,-88,-49,4,-51,0,0,37,18,55,29,-55,-32,-90,-9,31,-39,5,58,115,26,121,-67,-91,-16,29,-18,-88,-59,89,67,-76,93,-7,65,70,4,81,2,56,107,-92,73,98,-17,41,16,-13,-60,-43,-44,-36,-60, 
  /* [11][0][][] */ 123,33,8,120,122,49,70,50,127,108,-54,125,12,-60,47,-42,-36,-80,80,42,46,92,44,-87,-79,-78,-2,88,92,-7,46,-1,-68,-49,58,64,-38,88,-7,-37,-7,118,-49,26,-18,-35,-69,-64,91,115,120,56,-66,-68,29,45,-52,-33,-16,-65,-61,104,86,28,36,101,-32,48,90,76,-60,-53,55,118,-82,70,-57,53,-23,104,-82,-5,-46,-21,64,-57,35,-9,-74,12,33,-82,-68,-18,-54,-16, 
  /* [12][0][][] */ 4,62,-32,-3,74,-2,-41,25,-75,51,-22,33,-38,4,38,-81,-99,-39,-26,-85,17,-16,10,84,-70,-54,88,-74,85,3,-39,101,-86,-74,-52,11,-4,-78,-24,32,100,30,-111,-44,-28,-85,-45,102,-47,-103,-78,89,42,-8,-86,73,-27,-62,44,56,46,127,-14,54,96,23,-49,103,44,89,34,60,72,100,-23,10,-42,28,-117,-76,-62,92,37,6,-41,23,45,100,-96,-110,97,33,87,-21,18,66, 
  /* [13][0][][] */ 117,-60,93,90,101,114,83,65,72,-108,13,-43,81,76,69,-49,-121,-69,-85,36,73,-32,120,-50,-67,46,7,6,-94,-89,88,44,46,110,-30,41,-95,-27,24,73,-62,83,-55,15,-41,33,2,-30,42,97,-37,-106,-116,34,108,-80,-51,32,-28,-79,-25,108,-76,16,-53,-62,-101,90,-35,-14,94,1,-96,43,-84,-58,-106,65,84,-78,58,-103,101,26,-82,-103,98,127,-9,-51,-89,63,120,-49,73,-7, 
  /* [14][0][][] */ -62,-109,78,62,76,-36,-26,-120,-88,-42,60,80,-30,-91,-100,-98,-63,-73,0,14,-53,23,-13,52,-123,-81,-46,20,-124,-122,-89,31,91,-33,-41,-4,85,109,31,-124,-15,-122,29,81,59,-120,57,-94,102,35,77,47,84,-25,-26,2,-62,1,48,85,-20,-91,-36,64,-102,-21,67,-119,-101,-95,-100,89,-8,74,40,-84,44,-119,45,26,36,-30,-127,-46,-126,-99,-124,98,100,-2,77,-56,79,92,-27,60, 
  /* [15][0][][] */ 25,-31,-29,87,102,-82,74,-92,65,5,-65,15,125,12,-86,-111,100,13,-100,35,59,28,83,124,87,72,39,99,24,70,68,-97,7,18,-56,-7,-68,127,126,-66,26,125,-46,-17,29,-76,-36,-75,-4,-75,2,42,-92,-96,-44,-8,82,59,-47,124,-39,-70,10,104,-26,112,-66,10,-54,13,74,-70,27,-11,68,-108,9,65,120,93,-78,65,-109,-62,-120,-30,-96,49,98,83,-112,-34,66,119,-101,124, 
  /* [16][0][][] */ -68,5,98,-73,50,117,-58,42,50,49,-112,64,-24,-50,-53,-60,119,91,68,74,122,83,-39,54,-31,66,-65,57,-107,15,48,20,-108,86,56,68,-39,63,-54,-69,30,-44,80,100,73,115,115,-11,-58,-123,8,121,-55,127,74,55,24,101,78,16,126,105,40,71,59,20,-41,99,55,106,-39,-5,34,104,66,79,-11,105,-115,-27,21,-86,64,18,18,111,113,17,85,19,-23,127,78,-26,-84,28, 
  /* [17][0][][] */ 30,-116,50,99,-51,-121,-73,-104,46,-95,82,68,121,58,-124,46,29,50,126,111,-101,-17,10,-58,20,64,-85,44,107,-61,-37,73,-32,-29,34,2,-53,97,-93,-36,-104,-47,-20,-16,2,7,82,-119,85,124,-17,21,1,75,96,-82,-127,85,-89,-120,28,-83,70,100,-95,-82,42,-109,-119,-8,111,26,11,-127,-74,88,114,-53,39,-53,6,-20,-83,-100,-121,69,79,-41,16,73,-80,-126,-18,94,7,12, 
  /* [18][0][][] */ -87,114,124,-41,-9,-94,-76,27,11,85,-86,-20,-15,50,80,-45,41,-14,73,-28,108,-19,42,-51,32,-83,1,127,50,25,16,38,53,-19,-87,-85,-7,38,-14,68,-30,14,-32,12,-92,23,25,17,31,-4,76,28,-80,-9,18,101,-35,33,1,-93,89,126,10,42,-67,-101,-5,91,60,-64,-44,112,-74,-30,-60,-73,50,74,18,-48,-45,9,-4,-60,109,-17,80,63,-88,-57,-35,93,94,-45,54,-16, 
  /* [19][0][][] */ 17,26,94,43,56,-83,91,85,97,-60,26,13,-69,30,-55,57,69,-101,127,53,-23,76,-54,11,74,-78,29,-42,-87,-114,-63,42,77,-81,29,-3,8,-68,-56,-97,41,-112,-79,8,-84,27,71,-91,-27,53,-37,41,-9,12,4,-11,21,93,10,-27,51,-33,94,70,-69,-4,-25,1,-10,54,72,-49,-61,-114,-55,-55,-24,-109,13,119,54,-105,-30,73,-84,-9,7,-5,84,26,20,60,-33,108,65,-39, 
  /* [20][0][][] */ -8,71,88,109,-88,104,25,64,22,20,-88,21,9,93,44,-74,-52,-40,-55,-33,25,-41,-77,-69,83,-76,-107,65,28,17,-42,116,104,47,-5,57,49,-34,-14,-111,-88,-36,-89,-107,-29,-67,-73,112,65,-111,-102,41,66,115,55,-2,104,77,109,95,117,-41,-69,-30,-25,-69,-46,20,-88,-73,-61,82,-59,-86,39,38,115,85,117,127,88,14,90,-26,61,121,-15,76,22,100,43,66,25,24,-5,16, 
  /* [21][0][][] */ 87,54,50,-114,88,-89,53,3,-19,-74,-79,23,-14,18,-64,-97,-113,-42,7,-17,83,-63,51,-95,48,-88,-47,52,-4,-1,-20,-21,-12,9,-99,-124,87,87,-127,-43,-13,-5,14,-26,-101,-86,-77,75,-39,-82,-23,80,15,60,-95,9,-65,39,-48,98,33,-89,10,-29,74,19,-51,-82,-100,-18,40,60,18,-34,53,46,-120,-44,42,82,-1,79,13,-74,10,-100,46,-84,-117,62,84,-115,-61,-81,46,-41, 
  /* [22][0][][] */ 38,-53,-92,-109,96,-52,118,61,-99,93,-70,-127,105,-110,-111,-81,46,93,-127,-54,95,-71,37,39,97,2,-110,84,-58,-72,-63,-106,46,68,22,15,8,-9,-56,-112,8,-7,6,103,63,-114,100,-17,-61,-85,1,-10,-78,-88,-42,38,-8,-26,-18,-25,115,-95,-70,-122,-61,26,-112,-48,122,108,-20,3,-61,8,72,-109,52,-48,72,77,115,-98,-76,-115,86,93,105,-27,-53,40,-84,68,24,25,-25,101, 
  /* [23][0][][] */ 73,-101,-2,52,108,-110,9,-111,50,-85,96,68,8,-113,25,-39,100,-30,-122,119,103,-87,113,-32,-14,-10,86,14,73,57,76,-37,-38,50,31,30,104,-1,-127,12,-107,3,8,-114,-68,-94,126,36,85,-121,-95,-49,79,-60,-48,90,-80,-19,110,52,-115,-106,-49,-15,40,44,-126,-121,76,-21,120,-72,-2,-34,-30,-111,55,-21,102,112,-51,-49,16,-110,104,13,122,-18,-94,51,109,-5,117,-52,-30,90, 
  /* [24][0][][] */ -83,-59,-115,-75,-91,-118,-79,-103,60,108,75,36,108,53,-50,-127,-92,35,18,-55,89,-90,-66,-47,46,-35,64,49,98,55,-6,-69,-3,2,46,20,-64,-95,56,-28,-83,-110,95,-6,13,-46,37,64,-95,-56,-23,7,62,53,63,-83,-14,70,26,-9,83,-15,31,87,-102,89,-56,-95,-109,44,-67,-36,-47,35,87,93,58,-86,-115,-90,-89,-103,-72,-125,-8,54,-22,-108,18,-117,2,-82,-27,21,-100,24, 
  /* [25][0][][] */ -81,-33,-53,13,94,-54,-80,65,66,-97,-23,44,85,18,-84,-6,-52,73,53,-108,81,103,7,-38,25,-43,-79,61,97,-85,53,108,113,-98,64,84,115,-53,-13,0,-70,109,-100,19,112,47,64,56,-78,112,-62,10,61,-19,-43,29,-5,60,-84,88,127,65,53,62,2,86,5,10,-82,-12,-4,-95,50,-109,90,45,78,89,35,40,62,69,-31,82,-58,-30,-85,-82,-7,-23,121,14,-100,-1,-12,-91, 
  /* [26][0][][] */ 53,-127,-30,-19,-100,-7,-15,-20,-116,-127,107,82,-87,-53,7,-18,115,30,-85,-70,12,70,100,11,52,65,13,41,12,4,-98,-4,-30,-67,-105,-103,-71,85,-59,110,-105,103,54,30,-78,73,-45,102,-24,28,-8,101,5,-53,-7,-113,97,66,55,23,-1,-104,64,-14,115,-23,-63,55,-92,79,88,98,81,-101,-91,2,45,-115,-104,6,-32,76,83,-80,80,-3,-48,12,-88,114,6,18,-61,118,49,90, 
  /* [27][0][][] */ 7,6,-41,-109,-127,-78,-78,-21,41,103,34,-93,-21,54,81,-36,64,-23,73,-92,-102,7,-35,-29,-114,42,-119,21,66,25,-38,-15,63,67,-98,-94,-95,-73,-121,87,-104,13,24,13,98,20,66,103,90,86,61,-83,-81,-95,-11,-40,102,-30,-118,-87,-65,-42,-41,55,37,-54,-122,105,46,6,-125,3,60,-59,-12,-74,44,-73,87,114,83,-32,119,-64,-83,-92,-40,27,-55,-9,-12,-58,53,16,86,54, 
  /* [28][0][][] */ 106,19,114,68,-109,-70,-88,-56,-17,-89,76,92,-69,-73,22,121,108,127,-58,69,-18,43,-91,-66,-99,91,-76,-38,-61,-84,20,-5,-94,34,84,96,39,-98,-22,45,120,60,-74,74,-92,11,28,64,40,-53,-77,-32,-66,40,55,56,65,5,85,70,-4,-21,-96,19,65,90,-3,101,-83,49,-91,-32,84,52,2,-78,-117,-46,-74,68,-64,-82,125,-10,81,-101,89,-73,-100,-59,-14,-61,-35,61,-100,-53, 
  /* [29][0][][] */ 47,56,79,-45,-89,8,-116,5,106,-15,-90,-67,127,-102,-48,-46,-97,97,50,-68,-75,-32,54,3,-36,4,-40,-3,-91,-11,101,-7,51,-2,-81,-51,-6,96,-12,90,43,101,-45,78,-3,99,-56,-27,18,20,58,-96,94,-101,105,44,-95,53,-50,104,-116,118,-96,-41,-64,-65,53,86,88,-83,34,-72,106,72,57,47,108,-59,-30,53,-8,-78,-8,-78,60,110,43,73,-38,91,94,75,-102,14,-6,57, 
  /* [30][0][][] */ 25,-74,-70,34,-103,23,-73,-19,117,-18,-6,-45,-105,17,56,12,-9,33,97,-110,41,-110,-122,9,-119,20,-77,120,-14,-114,-100,3,-88,-78,-124,-60,14,-23,-9,21,88,-83,-18,99,103,-49,102,58,-77,78,18,-110,99,-57,-16,102,-85,-58,-85,-58,-111,-6,-79,-29,-113,-96,-104,91,-67,112,49,-37,-94,106,38,-93,-62,-78,-84,-65,26,28,-111,-24,-117,25,-114,110,-42,-127,77,56,-36,-8,4,-76, 
  /* [31][0][][] */ 81,-95,63,112,50,63,-63,-103,-9,-22,-83,-67,114,-127,-51,114,-64,-95,57,49,65,35,-33,108,45,-119,36,66,-72,-76,48,110,19,20,-96,-7,100,-34,-70,-116,60,-73,-33,32,3,-58,-42,24,73,45,98,-32,-95,-61,-85,23,-123,70,5,116,-42,22,87,-56,71,114,-48,-78,74,-122,-123,9,-101,-42,2,31,-62,-49,50,117,-79,-36,58,74,57,98,-98,16,18,-55,-67,-58,12,106,-5,-24, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017509788740426302, 0.0017551315249875188, 0.0019475120352581143, 0.0018813140923157334, 0.0017112621571868658, 0.0016575068002566695, 0.0018976553110405803, 0.0018492320086807013, 0.0017954746726900339, 0.0018761620158329606, 0.0018898835405707359, 0.0019298710394650698, 0.0019448952516540885, 0.0017590855713933706, 0.0018201478524133563, 0.0017350617563351989, 0.0017140130512416363, 0.0017793007427826524, 0.0019515046151354909, 0.0018935507396236062, 0.001746036927215755, 0.001939091831445694, 0.0017941399710252881, 0.0017114231595769525, 0.0018113120459020138, 0.0018872041255235672, 0.0017587866168469191, 0.0017377149779349566, 0.0017722360789775848, 0.0018680322682484984, 0.0017379057826474309, 0.001775889890268445, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2300, 3955, 10451, 3150, -4385, -4215, 23296, 1932, 3584, -2086, 13732, -295, -11616, 2524, 22460, 9320, 18563, 5697, -4367, -7294, 6106, 32252, 35408, 20693, 1636, 894, 5231, 3829, 2742, -5758, 8311, -3849, -282, 6333, 91, 1137, 14207, 6129, -1553, 6085, 11759, 7326, 5334, 12604, 5734, 4937, 2142, 9006, 4962, -6541, -8609, 627, -203, -1678, 3061, -43, 201, -1177, -4966, 14113, -1196, 2056, -1390, -1792, -5068, 8963, 23606, 2327, -3057, 913, 1998, 2512, 2225, -1634, 866, 13637, -625, 28780, 21386, -1127, 11747, 2302, -742, 1672, 18335, 8248, 4995, 1892, 7721, 5295, -265, -9923, 756, -2396, -2421, -2015, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0002674137067515403, 0.00039496604586020112, 0.00022828603687230498, 0.00028133988962508738, 0.00023918379156384617, 0.00034766201861202717, 0.00014291633851826191, 0.00036225278745405376, 0.00017013802425935864, 0.00030654825968667865, 0.00014391398872248828, 0.00020433444296941161, 0.00021830292826052755, 0.0011158791603520513, 0.00013726546603720635, 0.00012353841157164425, 0.00010138487414224073, 0.00025607738643884659, 0.00043806066969409585, 0.00023085169959813356, 0.00010273495718138292, 8.3742073911707848e-05, 8.694358984939754e-05, 8.1524893175810575e-05, 0.00011743979848688468, 0.00055585225345566869, 0.00056878826580941677, 0.00027412013150751591, 0.00018921853916253895, 0.00034022043109871447, 0.00017653350369073451, 0.00020107328600715846, 0.00019674378563649952, 0.00018390247714705765, 0.00032388800173066556, 0.00021836638916283846, 0.00013421410403680056, 0.00017808060511015356, 0.00039222481427714229, 0.00029154328512959182, 0.00010791163367684931, 0.0003557767195161432, 0.00028397716232575476, 0.0001839956094045192, 0.00033470173366367817, 0.0002030091272899881, 0.00022781213920097798, 0.00023892965691629797, 0.00027231441345065832, 0.00019689789041876793, 0.00018384409486316144, 0.00014064872812014073, 0.00052167422836646438, 0.00017768066027201712, 0.00025224967976100743, 0.00025822478346526623, 0.00054300890769809484, 0.00022392734535969794, 0.0003116133448202163, 0.00013113742170389742, 0.00061490712687373161, 0.0003333462227601558, 0.00018920432194136083, 0.00043953533167950809, 0.00037166787660680711, 0.00021624597138725221, 9.1991663794033229e-05, 0.00016993861936498433, 0.00038303853943943977, 0.00036367497523315251, 0.00019328405323904008, 0.00019894637807738036, 0.00060610962100327015, 0.00025074614677578211, 0.00021569109230767936, 0.00015953657566569746, 0.00022163458925206214, 6.5497966716066003e-05, 8.5750689322594553e-05, 0.00015940646699164063, 0.00012559676542878151, 0.00014307284436654299, 0.0001222918217536062, 0.00013847333320882171, 0.00010028549149865285, 0.00028944810037501156, 0.00047129674931056798, 0.00014803292287979275, 9.3274931714404374e-05, 0.0003890485386364162, 0.00019714237714651972, 0.00019778462592512369, 0.00026787107344716787, 0.00043549924157559872, 0.00026470713783055544, 0.00020309491083025932, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -29,95,-7,-127,-46,-30,-27,-68,-26,15,-1,71,15,-60,-3,45, 
  /* [1][0][][] */ -33,20,-58,1,-26,-31,23,-82,66,50,-53,24,4,8,36,-127, 
  /* [2][0][][] */ -20,-15,-16,31,51,33,-67,-47,127,-36,-7,18,2,81,-61,17, 
  /* [3][0][][] */ 38,-68,-4,-111,2,-32,-5,-5,118,2,84,47,-18,49,21,127, 
  /* [4][0][][] */ -85,54,12,35,7,-17,-4,40,-4,-2,17,-31,-127,-18,-11,25, 
  /* [5][0][][] */ 3,69,118,-3,18,81,-85,87,-65,80,-29,-42,36,-56,-127,29, 
  /* [6][0][][] */ 32,-51,110,-127,39,5,-37,99,-78,-91,49,-40,2,80,-19,85, 
  /* [7][0][][] */ 35,111,-29,-49,87,12,5,-54,127,90,-22,26,23,-16,58,37, 
  /* [8][0][][] */ 13,-86,10,-93,23,-56,14,-75,23,64,73,-14,19,127,88,66, 
  /* [9][0][][] */ 6,-33,-3,127,41,-11,42,-61,-67,118,31,-24,-7,-67,-10,-7, 
  /* [10][0][][] */ -10,23,-47,-127,6,1,-6,31,30,-38,16,-28,-18,-42,0,22, 
  /* [11][0][][] */ 11,16,13,-29,76,-40,82,-67,-86,40,-2,23,-4,127,-63,-24, 
  /* [12][0][][] */ 80,-12,-127,-16,43,-89,24,33,20,50,-86,-48,-38,124,4,30, 
  /* [13][0][][] */ -16,5,-23,12,7,-127,-5,18,7,-13,8,2,15,-11,8,10, 
  /* [14][0][][] */ 31,-31,95,-22,62,2,-127,-98,-9,-48,32,28,13,-51,-25,-40, 
  /* [15][0][][] */ -86,20,-18,-53,-1,10,127,66,-32,50,86,-29,16,88,71,8, 
  /* [16][0][][] */ 8,69,127,85,1,24,94,83,-103,20,-75,-19,10,-1,18,-73, 
  /* [17][0][][] */ -41,-103,-13,26,-68,-20,-56,18,-127,-28,11,-49,-5,36,62,-34, 
  /* [18][0][][] */ -4,30,-2,53,29,-3,27,6,71,53,-28,-38,9,127,67,33, 
  /* [19][0][][] */ 2,-13,30,2,90,25,-85,-54,-104,-65,-35,-127,-45,-51,8,-26, 
  /* [20][0][][] */ 96,-29,-70,-48,5,-127,19,28,-71,46,-122,-30,21,-7,35,8, 
  /* [21][0][][] */ 73,-20,65,-17,-26,6,-9,92,-3,-100,78,36,-12,127,56,78, 
  /* [22][0][][] */ -34,52,-47,127,-61,16,102,86,-19,45,-22,33,-8,-2,38,7, 
  /* [23][0][][] */ 66,14,109,-116,54,-6,-10,70,1,32,0,-43,-9,-35,-127,38, 
  /* [24][0][][] */ -127,38,13,-16,3,109,25,-18,0,21,103,-6,-78,19,58,-25, 
  /* [25][0][][] */ 24,28,11,18,8,12,67,-47,-8,-127,-16,-24,-14,-34,16,24, 
  /* [26][0][][] */ -34,-5,1,9,-49,-12,-41,-36,-105,-38,4,-32,9,127,-34,49, 
  /* [27][0][][] */ 1,32,8,61,39,-34,-24,-40,58,1,-22,-6,3,127,-8,19, 
  /* [28][0][][] */ 13,64,55,67,127,-6,30,36,-81,-21,-44,-27,21,97,41,-41, 
  /* [29][0][][] */ -2,-3,7,11,24,2,8,40,-23,-8,-12,-127,-3,-19,-12,10, 
  /* [30][0][][] */ -18,75,-48,77,-37,-21,40,-127,-38,51,-15,3,58,41,73,79, 
  /* [31][0][][] */ -44,-28,-18,-66,-12,-1,-56,-116,28,82,-8,-127,-40,-41,2,19, 
  /* [32][0][][] */ -127,-76,-4,55,56,39,-13,11,-7,-40,-103,42,79,-2,59,73, 
  /* [33][0][][] */ -11,-35,-36,-13,-89,-9,-82,6,62,19,10,-55,35,-127,127,36, 
  /* [34][0][][] */ 44,-4,60,19,40,19,-45,83,-84,-43,63,16,12,-11,-14,127, 
  /* [35][0][][] */ -44,58,-78,14,-12,-17,34,-124,85,96,-91,-3,7,-12,87,-127, 
  /* [36][0][][] */ -36,47,21,127,48,32,127,35,-16,51,-26,-15,-4,18,-75,-47, 
  /* [37][0][][] */ 4,-6,16,-73,4,-3,-34,-41,-75,-6,0,-14,5,-127,57,-26, 
  /* [38][0][][] */ 41,89,-10,-52,127,0,30,-35,109,76,-19,-6,9,-32,47,17, 
  /* [39][0][][] */ -29,63,-11,-127,-18,6,-42,30,43,-74,-29,-19,12,72,44,25, 
  /* [40][0][][] */ 9,-29,19,-102,-11,-22,-10,-45,-122,-4,-4,-28,-4,-127,104,-72, 
  /* [41][0][][] */ -9,-18,-42,-23,7,-33,17,-5,-35,18,-52,-13,-127,6,30,39, 
  /* [42][0][][] */ 127,87,-34,-23,-83,-53,-16,-60,-1,27,81,-56,-61,46,103,-113, 
  /* [43][0][][] */ -13,108,-83,2,58,-21,127,-49,58,82,-50,1,29,-115,-79,-69, 
  /* [44][0][][] */ -23,-15,8,-40,54,2,-82,-127,-22,-5,7,1,1,-38,64,-59, 
  /* [45][0][][] */ -11,38,-127,-29,17,-73,21,-76,14,24,7,-63,20,-15,48,-27, 
  /* [46][0][][] */ 7,-6,-17,-86,-9,12,21,-30,-119,-25,8,13,-8,-127,66,-33, 
  /* [47][0][][] */ 22,50,24,-13,127,-14,-25,12,-53,38,0,24,5,4,112,-31, 
  /* [48][0][][] */ -127,-78,-19,35,68,16,7,-17,1,-14,-107,44,66,10,76,54, 
  /* [49][0][][] */ 6,6,93,78,120,4,54,40,-127,-44,-38,-78,11,122,26,-58, 
  /* [50][0][][] */ 30,-24,-95,-8,24,-127,-37,-17,-16,-26,-3,-35,36,-13,-7,7, 
  /* [51][0][][] */ 5,42,41,13,27,9,1,27,-127,55,12,-110,9,-112,-26,86, 
  /* [52][0][][] */ 1,56,-12,38,32,-10,27,33,64,96,-25,-57,23,127,77,36, 
  /* [53][0][][] */ -6,-45,-16,-21,-84,-6,-80,2,43,20,13,-61,28,-127,114,20, 
  /* [54][0][][] */ 60,-17,-54,17,127,81,-124,-56,-78,-12,-36,-72,-5,-38,-19,-50, 
  /* [55][0][][] */ 48,-11,7,7,40,-44,-67,-127,-30,-73,-53,15,-4,-21,14,-11, 
  /* [56][0][][] */ -18,18,22,-25,-8,-23,-94,68,-13,127,-5,-19,26,1,0,11, 
  /* [57][0][][] */ -4,21,-50,-26,-55,-49,121,93,-33,24,-12,-5,26,23,127,-8, 
  /* [58][0][][] */ 55,16,-127,38,99,100,-33,49,-99,-47,-5,12,-30,29,-3,-29, 
  /* [59][0][][] */ -97,69,111,22,-73,-65,120,127,23,7,33,-15,17,12,72,2, 
  /* [60][0][][] */ 5,-2,-55,-6,17,-127,-21,-2,-15,-16,-7,-29,25,-22,6,11, 
  /* [61][0][][] */ 19,-8,22,127,73,19,31,11,-98,5,14,44,-13,24,35,-56, 
  /* [62][0][][] */ -52,127,16,-54,-36,-5,-65,63,-25,-58,-82,-63,-11,-103,-52,-34, 
  /* [63][0][][] */ -49,24,-29,127,-83,9,-75,-34,-64,-28,-29,-39,28,66,42,44, 
  /* [64][0][][] */ 12,2,-2,48,2,13,-14,63,32,2,-15,-40,-14,-127,50,-8, 
  /* [65][0][][] */ -20,-38,3,-127,36,-36,66,-40,-17,52,11,-114,-18,-1,24,-51, 
  /* [66][0][][] */ 33,-22,51,-16,-2,-2,-14,93,16,-60,47,39,2,127,13,66, 
  /* [67][0][][] */ -5,50,-21,-127,-16,-4,-58,30,81,-99,-28,-5,31,82,72,33, 
  /* [68][0][][] */ -30,37,127,16,9,5,-3,-5,-36,-21,-18,-30,13,-14,84,-37, 
  /* [69][0][][] */ 127,85,-21,-5,-97,-33,-21,-44,0,28,91,-61,-69,57,72,-100, 
  /* [70][0][][] */ 41,9,-54,-10,-27,27,53,127,-35,87,-37,7,9,63,-25,17, 
  /* [71][0][][] */ 11,-5,-6,15,6,-85,4,22,-31,20,-79,10,-127,2,39,49, 
  /* [72][0][][] */ 10,18,-127,16,11,12,27,96,-37,-19,12,-5,25,17,-4,6, 
  /* [73][0][][] */ -52,25,39,1,45,-32,-73,-127,16,-72,34,-22,13,-51,44,-14, 
  /* [74][0][][] */ -2,39,39,121,19,-5,-83,90,-75,19,-51,39,22,-127,40,-90, 
  /* [75][0][][] */ -12,41,-68,9,-1,-9,26,-18,127,34,-8,-8,3,121,-32,7, 
  /* [76][0][][] */ 2,-17,1,22,6,-18,-14,66,20,-33,-18,-127,-1,-3,6,13, 
  /* [77][0][][] */ -17,40,-21,127,-57,28,92,114,4,50,-15,31,-19,-27,-4,-6, 
  /* [78][0][][] */ -1,10,32,-127,54,-26,-36,52,15,-43,1,-49,27,114,26,56, 
  /* [79][0][][] */ -16,-88,-82,-71,-93,-9,21,-93,127,18,35,51,9,42,53,-43, 
  /* [80][0][][] */ -50,5,110,-107,13,-29,24,-81,-80,55,-55,-127,23,93,92,-40, 
  /* [81][0][][] */ -45,48,-127,26,73,-124,-16,58,-5,-46,66,-5,27,1,11,-3, 
  /* [82][0][][] */ 127,-13,-8,20,12,-117,-20,15,-16,-14,-101,0,108,10,-9,23, 
  /* [83][0][][] */ -35,76,-119,-78,-39,-18,44,-127,68,47,-44,-116,13,55,52,95, 
  /* [84][0][][] */ -36,41,68,-45,6,-28,71,-127,-53,55,-14,-71,34,49,73,0, 
  /* [85][0][][] */ -79,127,29,-123,-69,-29,-25,0,-56,-1,-69,18,9,-14,-89,-24, 
  /* [86][0][][] */ -10,7,-34,-2,-32,-28,127,20,-5,-29,-4,5,7,25,84,-20, 
  /* [87][0][][] */ -24,-46,-1,-123,7,-40,55,-21,-1,17,-8,-127,-20,8,10,-43, 
  /* [88][0][][] */ 99,-17,43,-25,22,-117,-2,48,-73,50,-127,-74,34,21,93,15, 
  /* [89][0][][] */ 24,-25,-41,-51,28,-15,-28,-7,-43,3,38,-62,127,-2,28,-42, 
  /* [90][0][][] */ -11,-46,32,-73,56,-7,-72,91,60,-95,-36,-28,-25,119,29,-127, 
  /* [91][0][][] */ -40,-2,-21,-45,15,-13,-24,-88,1,53,-14,-127,-32,-19,6,7, 
  /* [92][0][][] */ -22,20,37,19,-1,-127,14,-1,4,-25,2,-11,4,-21,17,2, 
  /* [93][0][][] */ 42,-23,127,-8,-48,56,26,-29,-16,23,-67,-15,-19,2,28,1, 
  /* [94][0][][] */ 30,-3,-11,-16,28,-9,-17,-9,-26,-21,14,-51,127,-12,27,-35, 
  /* [95][0][][] */ 127,88,1,37,-86,-17,-61,-7,-22,-16,83,-40,-39,30,72,-76, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00085397664224728942, 0.0012613106518983841, 0.00072902371175587177, 0.00089844944886863232, 0.00076382531551644206, 0.0011102468706667423, 0.00045639846939593554, 0.0011568419868126512, 0.00054333003936335444, 0.00097895145881921053, 0.00045958446571603417, 0.00065253512002527714, 0.00069714302662760019, 0.0035635221283882856, 0.00043835261021740735, 0.00039451572229154408, 0.00032376917079091072, 0.00081777450395748019, 0.0013989319559186697, 0.00073721708031371236, 0.00032808061223477125, 0.00026742747286334634, 0.00027765141567215323, 0.00026034697657451034, 0.00037504002102650702, 0.0017750953556969762, 0.001816406031139195, 0.00087539333617314696, 0.0006042629829607904, 0.001086482428945601, 0.00056375376880168915, 0.00064212072174996138, 0.00062829459784552455, 0.00058728631120175123, 0.0010343253379687667, 0.00069734564749523997, 0.00042860821122303605, 0.00056869437685236335, 0.0012525566853582859, 0.00093103357357904315, 0.00034461214090697467, 0.001136160921305418, 0.000906871457118541, 0.00058758375234901905, 0.0010688586626201868, 0.00064830278279259801, 0.00072751037077978253, 0.0007630137843079865, 0.00086962681962177157, 0.00062878674361854792, 0.0005870998720638454, 0.00044915697071701288, 0.0016659488901495934, 0.00056741718435660005, 0.00080555083695799112, 0.00082463212311267853, 0.0017340804915875196, 0.00071510439738631248, 0.00099512666929513216, 0.00041878293268382549, 0.0019636850338429213, 0.0010645298752933741, 0.00060421758098527789, 0.0014036411885172129, 0.0011869088048115373, 0.00069057417567819357, 0.00029377226019278169, 0.00054269324755296111, 0.0012232206063345075, 0.0011613836977630854, 0.00061724608531221747, 0.00063532852800562978, 0.0019355905242264271, 0.0008007492870092392, 0.00068880221806466579, 0.00050947465933859348, 0.00070778257213532925, 0.00020916553330607712, 0.00027384192799217999, 0.00050905917305499315, 0.00040108899702318013, 0.00045689826947636902, 0.00039053478394635022, 0.00044220988638699055, 0.00032025831751525402, 0.0009243427193723619, 0.0015050702495500445, 0.00047273814561776817, 0.0002978703414555639, 0.0012424133019521832, 0.00062956748297438025, 0.00063161848811432719, 0.00085543718887493014, 0.0013907520333305001, 0.00084533327026292682, 0.00064857670804485679, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8699, 17313, -18917, -2478, -9879, 9363, 27458, -54165, 312, 19204, 26065, 15633, -10727, 13466, -7534, 11951, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00069995998637750745, 0.00045139767462387681, 0.00023504640557803214, 0.00023478557704947889, 0.00041977540240623057, 0.00035180884879082441, 0.00041363257332704961, 0.00028660427778959274, 0.00033180671744048595, 0.00028393877437338233, 0.00065800949232652783, 0.00061995466239750385, 0.00042796548223122954, 0.00023008322750683874, 0.00057407160056754947, 0.00053632474737241864, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -16,-13,7,-32,13,-9,-36,3,13,5,-12,5,-5,-7,-23,8,-2,4,-7,-2,7,-33,3,4,3,12,4,127,34,-33,45,-7,-3,9,7,0,-10,10,-40,-3,-9,10,-3,33,5,16,10,3,25,2,-10,8,19,-19,-11,79,4,10,-26,-32,-7,23,-1,-26,-43,-65,-17,39,5,13,19,-16,-7,-33,-2,-21,-23,19,0,4,-11,-27,22,23,-2,-9,-5,-93,3,-13,6,-3,44,-33,-34,-13, 
  /* [1][0][][] */ 38,-75,-71,-61,127,-18,64,41,-22,-88,-56,-13,8,-5,-57,43,-66,4,42,40,18,38,-18,-57,11,-11,-11,-75,38,-17,-57,34,-25,32,7,-5,10,-10,-1,20,-31,42,-44,-27,-40,97,5,7,25,-74,7,-37,-16,41,53,9,-57,-20,-35,-33,20,-18,4,-42,-90,104,-24,-24,-9,-25,-17,15,56,-106,-26,3,39,-46,44,4,10,-28,25,6,-49,37,-12,26,24,-38,-3,8,25,12,38,95, 
  /* [2][0][][] */ 1,53,-82,-11,94,81,27,70,-1,-103,2,-14,-5,-6,25,22,12,-13,-40,65,22,-6,73,15,45,26,-2,-33,36,-3,45,-56,32,30,-23,36,-127,-81,29,32,2,-48,10,-14,22,-34,7,68,-23,19,-20,-10,87,-7,-11,56,31,10,26,4,28,22,25,-25,20,-2,-36,-1,-40,4,-14,-35,-39,-77,10,63,69,54,29,-10,21,-42,12,-11,-39,26,14,41,-14,23,10,-26,2,-35,-67,3, 
  /* [3][0][][] */ 68,20,97,-4,57,-30,12,-11,-23,-64,19,-47,-9,30,36,97,16,-7,37,11,127,-13,41,16,51,-18,-17,19,33,49,-11,93,-101,24,23,-1,-25,-18,-2,37,-86,-37,69,21,26,35,-46,-88,-59,-42,-51,39,2,-124,-5,30,-112,68,56,38,18,95,-21,-53,39,69,-13,-55,33,-27,-4,-63,45,-36,61,-16,10,-8,52,36,-40,-71,23,-18,-33,11,18,42,36,10,10,34,38,105,39,-30, 
  /* [4][0][][] */ 20,-3,20,-7,127,36,-6,-23,-38,-53,-38,-35,-44,21,-6,51,33,-79,-36,81,-21,3,35,-17,-6,1,10,-46,5,-8,64,-36,87,11,-22,12,45,22,14,12,-31,-11,-35,-28,-9,-56,-16,6,43,14,-21,12,-7,-39,6,-30,21,-10,-37,29,-4,56,67,23,45,52,-20,-5,-46,5,41,68,15,-71,-38,-24,30,42,82,-37,-5,-37,4,-1,-64,8,37,49,-44,36,5,-45,12,11,30,-14, 
  /* [5][0][][] */ 4,-8,-11,14,22,-15,40,-28,-22,-39,-12,3,-3,24,-4,15,-1,2,19,-9,28,15,-37,65,12,-2,8,-97,-2,34,16,32,-2,8,3,-56,25,26,-2,14,-4,-13,27,-20,-11,-7,8,-23,-15,-16,13,-19,0,-32,-5,-48,-5,13,-20,11,69,12,3,32,-3,54,6,78,12,97,10,30,5,8,-2,73,-26,-5,13,11,-9,-6,3,23,-7,15,-18,127,6,27,-1,-10,3,11,-62,24, 
  /* [6][0][][] */ 27,-74,20,-36,-32,9,37,20,0,1,-11,-69,-30,-2,-30,31,16,-4,-2,-9,-47,40,12,11,-24,-1,-19,-12,-12,16,42,0,56,14,59,-5,-8,-17,16,-88,-13,87,9,-38,9,-26,-22,12,-8,37,-32,69,-15,-61,-6,-12,0,-62,-2,2,-14,54,42,-78,28,-26,12,-17,-2,7,127,0,-41,5,-25,28,-81,-11,10,4,30,48,17,4,-19,-1,42,28,10,8,49,-31,-17,-8,-35,-14, 
  /* [7][0][][] */ 2,124,44,15,127,55,38,-34,-25,-34,35,-12,-31,25,22,20,7,-41,7,36,41,-39,38,10,-9,16,17,10,16,-12,3,16,48,-8,-40,14,26,13,-3,83,-56,27,14,29,-6,-22,30,-15,-34,-31,38,5,16,-38,-41,56,50,2,-25,2,-9,-45,-11,-3,-52,74,-35,-94,-8,-47,-8,68,-12,-25,12,12,54,55,45,-19,-52,-43,-8,-13,-22,50,-8,-9,-24,25,-41,-43,-49,-12,25,-4, 
  /* [8][0][][] */ -8,8,48,16,-127,-32,46,-17,24,80,62,3,-9,17,21,10,-36,17,9,-8,-41,3,-104,63,17,-32,51,-19,11,11,9,52,68,-13,-3,-10,-22,-13,3,35,19,-32,41,1,-48,-12,40,-4,-94,19,19,18,-52,-41,-28,35,9,-48,-75,-23,12,-33,-21,-12,1,71,2,-46,18,-7,-38,-24,28,42,56,-10,-17,-37,-21,23,-75,14,-19,1,30,21,53,41,26,-31,45,51,2,-10,43,19, 
  /* [9][0][][] */ 5,-105,-11,16,90,80,-27,-21,30,-43,100,90,-24,17,94,-97,12,-27,-5,11,-63,-42,36,-12,-30,4,-8,26,-22,17,15,-4,16,22,-114,29,0,16,-23,67,36,-79,-27,59,-6,-19,-84,-41,38,30,-22,-82,61,23,-21,-57,-12,94,-7,-2,23,-60,-38,127,-97,-16,-7,-13,-4,35,-55,-80,41,-9,4,29,70,-69,22,-3,-8,-17,7,33,4,-67,19,-1,9,-45,-52,43,-64,-16,-7,-41, 
  /* [10][0][][] */ -42,-21,-28,-40,-30,-8,60,-19,31,15,23,34,26,-13,-3,-2,-10,21,-29,-16,-4,28,14,16,-13,-9,10,-127,22,-45,55,-33,0,20,-5,-12,-3,31,3,-8,7,-30,21,-49,11,-3,23,14,-8,32,-28,-17,-35,-21,-8,-57,19,16,-6,-37,21,7,-5,6,-36,84,-11,-30,12,-29,0,-19,-28,-8,16,51,-4,34,-20,12,-22,-3,5,23,7,-17,-5,109,-1,-7,11,11,19,-36,44,-35, 
  /* [11][0][][] */ -83,25,-1,-1,16,-59,-14,-3,-50,-2,0,11,25,20,-28,-6,44,5,-57,-50,15,-1,-9,2,75,6,53,0,-13,30,-39,24,-3,26,-11,-10,-12,7,23,9,-16,-12,2,2,70,6,69,9,49,37,-11,30,15,-65,27,-5,-69,-20,-27,-45,-3,-15,4,15,-3,-25,28,3,24,13,-8,25,-29,5,31,1,-18,72,-127,60,-40,2,-64,-64,120,20,30,-5,11,44,-33,-48,-21,36,-27,-1, 
  /* [12][0][][] */ -11,-4,-35,-1,58,15,7,-16,-11,19,21,-9,2,-14,27,-7,-30,-7,13,-20,-10,-14,-33,49,-19,41,-25,95,-15,36,-32,7,-8,24,9,33,-13,-13,15,11,3,-18,1,2,-18,-6,23,19,1,0,-1,-29,-15,8,-12,-16,-13,-11,17,18,-17,-19,1,41,36,-72,12,58,-29,-127,-8,51,1,4,11,77,4,-15,-7,5,3,22,-38,8,15,-11,-3,-42,-3,17,12,4,-32,30,-8,28, 
  /* [13][0][][] */ -80,66,-6,-1,-67,4,-10,18,-35,-33,36,22,80,11,-20,-4,-13,35,-43,-12,16,-11,50,-55,62,41,-6,3,9,-30,-30,-94,-94,-27,5,13,-2,24,38,-10,-26,80,3,11,35,2,-11,5,63,-7,32,68,60,-68,78,-18,-23,54,42,2,7,23,-16,15,-5,-19,15,12,22,16,25,-127,7,-28,-78,10,54,42,-52,-43,90,-22,8,-21,42,-35,86,0,-15,-6,-17,26,38,-44,-14,12, 
  /* [14][0][][] */ -26,13,-12,-49,34,-2,-4,30,-85,3,19,14,-24,-55,-68,-22,-85,-18,62,10,29,-3,13,-91,-37,13,-49,-18,14,-22,-10,-27,-67,-25,24,11,-14,-6,6,2,5,86,-67,-14,-48,28,4,10,127,-26,22,-6,29,58,-98,15,-23,30,-98,16,5,29,38,28,1,30,-4,9,-50,20,63,31,36,-5,-23,17,55,-75,-28,-92,17,-30,8,36,30,-67,-34,12,-42,23,31,49,14,37,21,-18, 
  /* [15][0][][] */ -40,-78,-12,-34,8,14,-10,-64,-19,14,-6,-30,35,-16,43,-20,-89,-4,-14,16,-13,1,-65,-45,-13,2,-2,18,-24,-13,56,-92,-6,24,22,10,-5,25,-91,3,24,-71,-5,32,-21,-46,53,34,48,15,-6,-127,-9,46,-5,40,35,-11,-23,43,9,0,37,-2,6,-7,-15,-11,-21,16,4,37,-37,7,-3,-33,-34,-5,9,4,-8,35,-3,65,-19,-44,-34,-36,-38,54,27,74,-34,0,1,-11, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.029748298227787018, 0.019184401258826256, 0.0099894721060991287, 0.0099783865734934807, 0.01784045435488224, 0.014951876364648342, 0.01757938414812088, 0.012180681340396404, 0.0141017846763134, 0.012067397125065327, 0.027965402230620384, 0.026348073035478592, 0.018188532441854477, 0.009778536856174469, 0.024398043751716614, 0.022793801501393318, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 17674, 65292, -1526, -328, 15159, -8658, 854, -160, 5575, 13415, -3114, -338, 604, 5647, 4857, -8894, -3986, -679, -521, 16411, -10810, 15016, -2642, 7391, 31807, -127, -6948, 15455, 14223, -19414, 1891, 21877, 23525, -10539, 1992, 633, -59, -959, 4125, -6709, -5096, -710, -7497, 165, 30816, -1272, 12406, -1185, -14066, 631, -7, -365, -2368, 18065, -2985, 15552, 22485, 264, 33818, 43, -9378, -627, 858, -336, -1508, 13877, -1626, -4478, -3233, 3049, -54, -4677, 1003, 163, -1403, -6580, 50, -1352, 43712, -6050, -5908, -11417, -615, 63, 64870, -12291, -9947, -27240, -7267, 10345, -2136, 35670, 97, -1963, -3262, 901, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013347975618671626, 8.7060216173995286e-05, 0.00011709245154634118, 0.00023740359756629914, 0.00023076622164808214, 8.7343469203915447e-05, 4.8884707211982459e-05, 8.6140214989427477e-05, 0.00026047625578939915, 0.00017947396554518491, 0.00028969257255084813, 0.00011868428555317223, 0.00023359521583188325, 0.00021302455570548773, 0.00042285164818167686, 0.00019018843886442482, 0.00019348300702404231, 0.00019824078481178731, 0.00017507899610791355, 6.9062334659975022e-05, 7.0592810516245663e-05, 4.5860611862735823e-05, 0.000136160510010086, 9.7693504358176142e-05, 0.00010454002767801285, 0.00010523925448069349, 0.00015603340580128133, 0.00020662278984673321, 7.5544448918662965e-05, 0.00046623678645119071, 0.00039598802686668932, 0.00024099377333186567, 0.00013258559920359403, 0.00015273613098543137, 0.00029041399830020964, 0.00051089038606733084, 0.00038880197098478675, 0.00018730181909631938, 0.00025248026940971613, 0.00012424671149346977, 0.00025341453147120774, 0.0002560458960942924, 0.00035238763666711748, 7.9764213296584785e-05, 0.00039920519338920712, 8.9862434833776206e-05, 0.00011403305688872933, 0.00035081838723272085, 0.00070578407030552626, 0.00013103724631946534, 0.00043010208173654974, 0.00016027466335799545, 0.00021480699069797993, 0.00015437758702319115, 0.00027586022042669356, 0.00011362205987097695, 0.00012193788279546425, 0.00050181575352326035, 5.1838611398125067e-05, 0.00016034663713071495, 0.0002788949350360781, 0.00040579916094429791, 0.00010829507664311677, 0.00016206648433580995, 0.00013445138756651431, 0.00013279869745019823, 0.00026215138495899737, 0.00048506597522646189, 0.00020088069140911102, 0.00012770951434504241, 0.00027738208882510662, 0.00010209956963080913, 0.00027730793226510286, 0.00015008643094915897, 0.00048140512080863118, 0.00028100126655772328, 0.00013017021410632879, 8.683300984557718e-05, 5.8959514717571437e-05, 0.0002129047061316669, 0.00022648728918284178, 0.00023741339100524783, 0.00015173655992839485, 0.00029274751432240009, 5.4936561355134472e-05, 0.00012612064892891794, 7.3031325882766396e-05, 0.00052612664876505733, 0.00023421003425028175, 0.00013951348955743015, 0.0003692632308229804, 2.6527612135396339e-05, 0.00017108638712670654, 0.00010461692727403715, 0.00028836715500801802, 0.00026452302699908614, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-9,127,21,72,75,-58,-15,-18,-15,-5,-29,0,37,2,-8,-43,26,22,18,-127,127,6,-83,8,50,-28,-126,-127,38,24,13,27,61,-18,-29,-11,30,-8,-13,28,-108,71,25,-67,37,46,-18,53,-24,19,3,-6,15,48,-89,-50,-61,-19,-11,0,11,38,67,-25,75,13,-8,16,20,127,23,23,26,-1,-11,17,127,-7,-14,14,-28,20,126,20,-78,-16,-1,-31,-15,-39,1,-25,-15,25, 127,-127,76,106,-43,127,39,-117,69,5,-18,127,127,-99,-13,16,11,127,127,-112,127,-75,82,68,-127,-116,-65,-35,-55,46,-59,-20,-88,52,-127,-83,-42,-14,-53,62,-1,127,127,82,-52,-113,-112,-50,-15,-127,43,85,65,-31,45,84,-46,41,-79,-112,-45,-42,-61,67,72,-61,27,29,-81,33,-17,91,118,127,14,19,2,57,-32,53,64,127,127,-23,-10,74,-114,127,-123,-101,5,-127,-90,-127,-38,105, -74,-12,31,-83,14,-25,65,-8,79,-34,-28,17,-19,-6,-9,-13,-8,-16,7,-4,-22,-104,29,-1,-123,98,7,-55,117,50,-15,9,1,14,14,-29,-9,34,19,12,25,12,-119,65,17,-18,37,14,-15,12,-17,5,-9,1,-3,21,-64,6,-33,52,2,40,34,-1,-7,-39,-31,23,10,2,-3,36,10,-26,-6,4,-12,-7,-84,1,-21,-25,-18,2,-111,9,-33,-23,-52,24,-25,-32,29,-26,-14,0, 
  /* [0][1][][] */ -64,-74,75,-36,-48,94,17,127,-51,-21,-1,-120,25,-115,78,32,-2,-59,-17,90,53,-71,48,49,-94,-12,127,-23,-24,64,120,-103,-127,91,-87,-56,-36,32,-29,96,-49,-25,-5,47,-48,127,-23,65,16,96,19,-2,15,-54,26,33,127,120,-73,-85,127,-33,-35,127,71,-38,-14,-1,127,39,127,97,-40,102,-6,12,14,13,-30,10,-42,123,-80,110,0,33,-57,31,79,-127,-32,-8,127,-69,-23,0, 67,126,57,-115,127,83,88,39,-127,127,127,-39,-65,-127,-127,127,127,-62,-124,-50,104,93,-122,127,-108,-90,-42,127,-127,109,-127,-127,-89,127,107,127,127,-127,-105,127,-66,-96,111,-127,-127,-36,-127,-127,127,-112,85,43,127,127,127,-127,100,-127,-127,127,20,-79,-127,-99,-127,127,-127,127,-125,-127,-106,-82,-127,-79,127,127,-127,127,-77,127,127,29,-42,-127,60,127,92,46,127,12,127,1,-67,35,127,-127, -53,-13,-50,38,-57,-97,35,-27,18,-34,-29,94,1,92,14,9,-4,65,-7,127,3,-86,-42,7,-73,106,-70,-20,-69,-16,16,-62,-70,38,5,-17,-29,46,-68,41,127,-4,-39,29,-40,-59,16,45,8,119,-12,6,-36,-72,4,20,95,2,0,22,-35,127,93,-52,-43,12,38,-10,-77,121,-18,-85,0,-55,-17,-20,27,16,75,-37,-70,-42,56,14,-49,-17,72,22,14,62,-43,19,-43,96,-26,-6, 
  /* [0][2][][] */ -67,2,-3,-20,13,-44,65,25,55,-28,-36,-2,18,18,-27,2,-6,65,7,2,-54,-81,2,-9,-27,-54,34,-69,90,38,25,26,17,-10,-12,-45,-6,36,-4,-1,-16,-6,-68,104,4,31,11,36,-15,-30,10,-20,22,0,9,16,-69,23,-16,14,15,0,-21,-4,-1,-46,-46,15,-33,13,25,29,13,-20,28,3,17,5,-78,-12,-8,-8,17,15,-127,6,12,-43,-60,-51,-27,-49,9,57,-18,-8, 121,34,-127,-35,-72,-25,37,30,-65,-29,-20,-109,-77,111,-13,36,3,-50,-10,-126,92,-49,-39,0,-109,127,-51,20,-34,-22,-9,-4,-62,15,27,6,-22,-28,127,52,11,-14,68,-34,-39,75,-67,-44,-33,-5,-127,-127,-49,-25,2,40,-64,-7,11,39,-8,-19,10,-46,-54,33,64,-22,115,107,-24,-70,12,-58,3,3,99,4,51,22,13,-97,-50,3,3,7,127,40,-62,39,-19,-108,41,79,-10,26, -54,13,-17,27,15,-67,-127,2,-11,-8,-16,5,15,-27,19,-2,-7,-15,4,17,-48,-69,13,1,17,-96,21,3,-47,-40,-7,16,43,-21,-7,-24,-35,3,41,-42,23,-2,-49,-33,3,65,23,16,-9,-4,10,-9,18,6,-3,-5,-61,-13,2,-38,-12,10,85,-10,34,-2,-1,27,2,5,-4,20,-18,15,-1,14,36,1,75,-13,3,-8,-8,-17,75,0,43,-39,59,39,-16,-54,-7,2,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0056728892959654331, 0.0037000591401010752, 0.0049764290452003479, 0.010089652612805367, 0.0098075643181800842, 0.0037120974157005548, 0.0020775999873876572, 0.0036609591916203499, 0.011070241220295429, 0.0076276436448097229, 0.012311933562159538, 0.0050440821796655655, 0.0099277961999177933, 0.0090535432100296021, 0.01797119528055191, 0.0080830082297325134, 0.0082230279222130775, 0.0084252329543232918, 0.0074408571235835552, 0.0029351492412388325, 0.0030001944396644831, 0.0019490759586915374, 0.0057868217118084431, 0.0041519738733768463, 0.004442951176315546, 0.004472668282687664, 0.0066314195282757282, 0.0087814684957265854, 0.0032106388825923204, 0.01981506310403347, 0.016829490661621094, 0.010242234915494919, 0.0056348876096308231, 0.0064912857487797737, 0.012342594563961029, 0.021712841466069221, 0.016524083912372589, 0.0079603269696235657, 0.010730411857366562, 0.0052804853767156601, 0.010770116932690144, 0.01088195014744997, 0.014976474456489086, 0.0033899790141731501, 0.016966219991445541, 0.0038191534113138914, 0.0048464047722518444, 0.014909781515598297, 0.029995821416378021, 0.00556908268481493, 0.018279338255524635, 0.0068116728216409683, 0.0091292969882488251, 0.0065610473975539207, 0.011724059469997883, 0.0048289373517036438, 0.0051823598332703114, 0.021327169612050056, 0.0022031408734619617, 0.0068147322162985802, 0.011853034608066082, 0.017246464267373085, 0.0046025407500565052, 0.0068878256715834141, 0.0057141836732625961, 0.0056439447216689587, 0.011141433380544186, 0.020615303888916969, 0.0085374293848872185, 0.0054276543669402599, 0.011788737960159779, 0.0043392316438257694, 0.011785587295889854, 0.0063786730170249939, 0.020459717139601707, 0.011942553333938122, 0.0055322339758276939, 0.0036904027219861746, 0.0025057792663574219, 0.00904844980686903, 0.0096257096156477928, 0.01009006891399622, 0.006448803935199976, 0.012441769242286682, 0.0023348038084805012, 0.0053601274266839027, 0.0031038313172757626, 0.022360382601618767, 0.0099539263173937798, 0.0059293229132890701, 0.015693686902523041, 0.0011274234857410192, 0.007271171547472477, 0.0044462191872298717, 0.01225560437887907, 0.01124222856014967, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2349, 8382, 23741, 33828, 21356, -3712, -2915, 7350, 37677, -5449, 16501, 6295, 11769, 14746, 41889, 2137, 3126, 12172, 18644, 7558, -277, 573, 16740, -1499, 6790, -7, 15343, 10429, 8396, 50143, 58960, 22408, 9405, -830, 13228, 4111, 1845, 4819, 32391, -979, 17853, 12367, 49599, -4705, 34893, 11553, 8079, 22364, 82954, 13856, -671, 12500, -4156, -295, -3297, 10599, -702, 20767, 7509, 11301, 6956, 24156, 11360, 8102, 14877, 13004, 6421, -8800, 8590, -3417, 6991, 14460, 26687, 8127, -5205, -9044, 9753, 334, 2957, -1426, 23409, 15066, 7594, 21266, 4265, 412, 13908, 96320, 13819, 13227, 6475, -213, 9643, 11610, 5234, 15957, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00016782428428996354, 0.000176203393493779, 7.9822144471108913e-05, 6.8560249928850681e-05, 0.00013927501277066767, 0.00027533044340088964, 0.00027957590646110475, 0.00022074706794228405, 6.1938982980791479e-05, 0.00025180185912176967, 0.00016287162725348026, 0.00013991024752613157, 0.00010854670108528808, 0.00015633009024895728, 5.7194123655790463e-05, 0.00027378794038668275, 0.00014369905693456531, 0.00010194698552368209, 0.0001199271428049542, 0.00015723251271992922, 0.0002702448982745409, 0.00041732753743417561, 0.00011999941489193588, 0.00042499418486841023, 0.00038557086372748017, 0.00018039644055534154, 0.00014514011854771525, 0.0001334053958998993, 0.00019399916345719248, 7.0259666244965047e-05, 4.7837900638114661e-05, 0.00011002943210769445, 0.00017527698946651071, 0.00025858366279862821, 0.00015113901463337243, 0.0001413199061062187, 0.00027499845600686967, 0.00030679395422339439, 8.4040635556448251e-05, 0.00056863471399992704, 0.00010547533020144328, 0.00012609369878191501, 5.4201627790462226e-05, 0.0002246809599455446, 9.3369351816363633e-05, 0.00013258737453725189, 0.00021438294788822532, 0.00012022836745018139, 4.9888894864125177e-05, 0.00015152455307543278, 0.00018553415429778397, 0.00013791111996397376, 0.0002585308684501797, 0.00021026037575211376, 0.00031197231146506965, 0.00010355499398428947, 0.00014984387962613255, 8.9915985881816596e-05, 0.00027135340496897697, 0.00012963329209014773, 0.00023134528601076454, 5.8382393035572022e-05, 0.00013020989717915654, 0.00012087138020433486, 0.00016637978842481971, 0.00014801498036831617, 0.00019987201085314155, 0.00015263636305462569, 0.00019346574845258147, 0.00020494103955570608, 0.00015912814706098288, 0.00010920126806013286, 7.8104196290951222e-05, 0.00012746780703309923, 0.00029532815096899867, 0.00014918822853360325, 0.00016910095291677862, 0.00027374274213798344, 0.00025635675410740077, 0.00026792619610205293, 8.7215419625863433e-05, 0.00010987154382746667, 0.00011599568097153679, 9.0687542979139835e-05, 0.0002742914657574147, 0.00019623189291451126, 0.00016961537767201662, 3.9832841139286757e-05, 0.00010308939090464264, 0.00017102685524150729, 0.0001970266894204542, 0.00029429109417833388, 0.00015194078150670975, 0.0001388220553053543, 0.00021421161363832653, 0.00010768671199912205, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 1,65,-21,77,29,27,6,-12,40,30,-58,110,7,-119,44,-127, 
  /* [1][0][][] */ 22,50,-6,-17,31,-34,127,-101,0,87,-13,-12,6,-48,27,9, 
  /* [2][0][][] */ -127,32,-32,-33,1,-9,47,102,-36,51,104,-24,-62,9,39,-51, 
  /* [3][0][][] */ -59,61,49,66,-52,48,64,127,14,62,-116,-6,40,-66,-78,-57, 
  /* [4][0][][] */ 16,6,36,70,-15,70,-4,54,5,-23,3,-3,25,-11,-127,-26, 
  /* [5][0][][] */ -2,-33,58,-22,5,-25,-9,27,-68,94,-26,-127,-14,18,-49,-25, 
  /* [6][0][][] */ 18,-2,29,-9,36,51,-68,-72,-7,-4,40,-12,127,-22,-13,-31, 
  /* [7][0][][] */ 17,10,127,-12,-17,-34,2,-1,-74,22,-80,-48,16,-11,31,-6, 
  /* [8][0][][] */ 28,30,86,74,-51,82,16,51,40,5,12,-94,-25,8,-127,-82, 
  /* [9][0][][] */ 23,-109,50,40,9,-33,7,20,127,4,77,4,-27,13,-109,-28, 
  /* [10][0][][] */ -41,-89,3,-17,-108,8,-16,53,101,127,51,-38,-39,62,83,-5, 
  /* [11][0][][] */ 34,-11,3,-91,11,-22,-102,-127,-48,37,-5,-21,24,-15,43,-61, 
  /* [12][0][][] */ -14,4,16,-47,-33,-37,-94,-12,-45,-82,-27,11,21,127,92,52, 
  /* [13][0][][] */ -39,-92,-63,22,-13,-60,-6,-31,49,9,-12,-11,24,13,127,34, 
  /* [14][0][][] */ 9,-63,67,33,30,37,17,127,18,58,8,-51,10,37,-63,114, 
  /* [15][0][][] */ 23,-36,0,67,16,-9,103,6,11,-127,17,-32,5,-17,-5,-42, 
  /* [16][0][][] */ 30,-76,-56,22,0,-3,38,-75,112,66,100,2,-4,100,74,127, 
  /* [17][0][][] */ -81,-78,72,127,122,60,5,-23,105,-57,-24,-40,21,49,-116,34, 
  /* [18][0][][] */ -11,12,6,10,-91,-6,-12,44,-67,-25,-18,-52,9,-127,64,-3, 
  /* [19][0][][] */ 53,-70,41,-67,85,36,-118,79,107,-83,77,51,-27,77,46,127, 
  /* [20][0][][] */ 41,-22,65,-65,-6,11,-29,52,-20,-48,91,-20,11,9,-42,127, 
  /* [21][0][][] */ -69,-9,-2,-31,23,20,-88,-59,-30,60,-1,15,-127,-9,26,-15, 
  /* [22][0][][] */ 23,-31,19,-28,11,-69,5,-23,-127,31,-16,-45,-18,-13,82,-19, 
  /* [23][0][][] */ 16,7,19,-6,9,7,-11,5,-6,-6,40,-11,127,-4,0,-37, 
  /* [24][0][][] */ -10,-2,5,-66,-23,-21,43,4,-53,-3,-9,-127,11,-106,41,9, 
  /* [25][0][][] */ -101,25,-46,3,67,-44,-84,-127,-38,56,-25,-62,-81,-90,10,-59, 
  /* [26][0][][] */ 47,-5,57,-95,127,-30,0,0,116,-40,46,-34,-19,97,1,62, 
  /* [27][0][][] */ 99,-32,21,-27,-33,-52,-3,-20,-26,20,-127,13,16,-13,-2,39, 
  /* [28][0][][] */ -127,-24,-124,-96,58,-3,70,-68,-3,50,-72,14,48,-12,-51,56, 
  /* [29][0][][] */ -69,-29,0,127,-8,22,6,-37,-7,-3,-78,53,16,-72,26,-40, 
  /* [30][0][][] */ 65,-10,127,-19,57,48,-27,77,-34,-78,61,-34,-7,27,-70,73, 
  /* [31][0][][] */ 13,-93,1,-54,0,-68,12,-48,-9,41,105,15,-19,90,71,127, 
  /* [32][0][][] */ -16,76,-33,39,-127,27,-74,-44,-55,-33,0,50,11,52,34,59, 
  /* [33][0][][] */ 23,-11,23,127,16,3,19,-47,-97,51,67,-19,1,3,10,98, 
  /* [34][0][][] */ 38,1,20,-1,78,-39,-127,-14,-51,89,-42,-3,-35,1,-1,3, 
  /* [35][0][][] */ 76,19,-12,-1,17,-127,-26,-8,-25,0,-86,-3,80,22,-1,19, 
  /* [36][0][][] */ 24,-1,-127,4,48,9,-34,22,-30,-21,-1,-12,3,14,-12,9, 
  /* [37][0][][] */ 4,1,127,0,-58,24,20,-57,-12,32,-49,18,19,-6,9,-2, 
  /* [38][0][][] */ -126,37,5,21,30,85,8,-16,12,-20,127,-35,-35,6,-11,-22, 
  /* [39][0][][] */ -18,-3,14,34,33,-12,-127,33,10,28,0,-35,-5,-23,1,-6, 
  /* [40][0][][] */ -1,77,-24,127,7,49,50,28,-65,-42,-23,60,18,46,-58,-25, 
  /* [41][0][][] */ 17,9,-48,-17,-50,-4,127,81,-41,88,-31,3,2,67,34,-12, 
  /* [42][0][][] */ 27,-47,-41,-16,21,24,-55,86,92,-109,127,54,-25,46,-54,47, 
  /* [43][0][][] */ -71,9,27,-42,29,24,-81,-79,-25,35,2,-13,-127,-10,36,-5, 
  /* [44][0][][] */ 5,8,-20,-9,-10,-22,-6,-55,127,-7,20,41,18,78,6,49, 
  /* [45][0][][] */ -56,-86,17,-96,37,-14,-20,56,14,-76,-22,-37,35,97,-34,127, 
  /* [46][0][][] */ -44,20,-28,94,-85,-22,-1,-79,-127,45,-42,-11,-4,33,3,-39, 
  /* [47][0][][] */ -26,-17,-96,127,8,66,-3,-17,13,49,59,62,-26,-17,23,-20, 
  /* [48][0][][] */ -6,-6,34,-127,28,-28,-16,-13,-41,12,28,-27,-8,50,100,36, 
  /* [49][0][][] */ -30,37,58,109,-24,45,-67,-20,11,-64,-101,-55,-34,-56,-91,-127, 
  /* [50][0][][] */ 4,68,23,-107,64,13,-20,48,127,-19,-35,18,4,-34,12,-28, 
  /* [51][0][][] */ 7,-31,19,-9,49,-10,-50,-127,17,-74,-5,4,-14,-8,-15,-7, 
  /* [52][0][][] */ 24,27,-1,42,37,-7,-57,95,-89,127,-45,-31,73,97,0,-46, 
  /* [53][0][][] */ -6,96,10,-89,-34,-3,30,-25,-64,-53,-47,47,17,-127,-90,-13, 
  /* [54][0][][] */ -4,7,14,30,44,-25,8,-31,1,31,-11,-19,-9,127,-39,-10, 
  /* [55][0][][] */ -127,121,80,-30,38,0,-11,-12,-40,33,105,-14,-14,-18,121,-6, 
  /* [56][0][][] */ 71,2,30,-127,104,-5,-11,49,58,-60,48,126,-33,1,96,48, 
  /* [57][0][][] */ -30,-4,15,68,-27,13,40,127,-4,6,0,-31,6,56,10,23, 
  /* [58][0][][] */ 22,126,-1,-127,6,34,-11,16,102,-7,-5,77,3,-91,43,67, 
  /* [59][0][][] */ 32,57,48,-122,-43,-8,32,-10,7,26,32,-67,-20,-127,-77,14, 
  /* [60][0][][] */ 57,-10,119,-40,-35,127,31,-42,-10,40,-56,-9,26,12,27,-8, 
  /* [61][0][][] */ -28,34,-47,-55,-61,5,110,127,-21,66,-5,13,5,75,31,-30, 
  /* [62][0][][] */ -14,7,-11,-17,-90,25,-62,12,-39,-33,10,-54,5,-127,86,5, 
  /* [63][0][][] */ 18,-25,7,-85,47,0,-127,-114,-59,90,-17,5,49,-4,18,-47, 
  /* [64][0][][] */ -22,-4,35,53,70,0,-35,-127,32,-111,-2,-46,-2,-19,-3,5, 
  /* [65][0][][] */ -127,22,30,-65,18,78,43,-46,-78,28,56,-14,-6,12,-16,-32, 
  /* [66][0][][] */ 62,8,83,20,-66,20,-28,40,-57,-10,74,-101,-28,45,-127,-10, 
  /* [67][0][][] */ 32,-38,-33,58,64,-41,-88,-115,50,-127,-72,-36,-98,15,-75,20, 
  /* [68][0][][] */ 22,-23,-63,52,-48,-89,4,-64,-30,-20,46,-59,-32,57,127,-17, 
  /* [69][0][][] */ -29,38,-79,45,-21,-127,26,77,22,8,50,-18,121,33,-1,9, 
  /* [70][0][][] */ 9,6,-41,-36,-43,4,127,91,-21,56,-22,9,16,45,14,0, 
  /* [71][0][][] */ 8,-12,-32,-53,20,5,7,52,-26,-46,-11,-2,16,-127,83,15, 
  /* [72][0][][] */ 26,29,-12,28,30,-38,-38,-127,17,64,-48,22,43,54,38,51, 
  /* [73][0][][] */ -39,-127,-21,-70,-82,-17,32,-22,-22,7,-31,-45,18,-54,68,-10, 
  /* [74][0][][] */ -29,34,62,108,-6,3,-127,99,22,-34,-39,-38,-5,-3,-21,-3, 
  /* [75][0][][] */ -50,38,-37,12,-29,93,89,127,-6,54,5,-33,-116,74,13,21, 
  /* [76][0][][] */ 16,-27,-35,-26,45,-76,-127,-103,-17,-13,4,-14,43,0,65,-23, 
  /* [77][0][][] */ -34,13,-35,-24,-44,-3,-13,-37,127,4,-61,9,-12,44,26,-76, 
  /* [78][0][][] */ -110,-127,-22,74,58,65,-30,20,-3,-61,-109,71,40,-29,105,69, 
  /* [79][0][][] */ 34,-15,30,-51,127,2,52,20,84,25,6,34,-1,-22,12,-39, 
  /* [80][0][][] */ -8,-36,75,-124,-24,-39,6,8,-97,-39,-13,-67,3,127,-44,9, 
  /* [81][0][][] */ 12,-15,38,32,3,47,-17,-11,10,-10,1,-40,-4,33,-127,23, 
  /* [82][0][][] */ -85,-17,16,-127,-18,-30,0,-60,-33,-35,-38,-117,-26,-110,-89,31, 
  /* [83][0][][] */ -5,8,-26,-61,-43,11,-2,42,-69,2,12,-76,21,-127,7,46, 
  /* [84][0][][] */ 127,42,13,45,-66,10,-57,21,0,-13,117,-1,-83,28,93,-73, 
  /* [85][0][][] */ -10,-25,11,-35,42,-8,-38,127,-88,-113,-67,-39,-20,78,90,-127, 
  /* [86][0][][] */ 11,-3,-1,2,-62,65,-33,34,-94,-42,34,-22,-12,-127,-11,23, 
  /* [87][0][][] */ 127,-39,18,0,-43,-37,6,3,8,22,-116,14,32,-12,0,40, 
  /* [88][0][][] */ 49,95,-15,2,-31,-30,-8,-6,108,32,36,24,-42,-20,127,-96, 
  /* [89][0][][] */ 37,74,-87,-27,-42,-23,24,-69,54,47,23,-30,-43,4,-19,-127, 
  /* [90][0][][] */ -8,-30,11,-77,-61,23,127,-52,89,-75,9,-89,50,-25,-46,-19, 
  /* [91][0][][] */ 11,2,-21,-88,-41,-9,33,-30,-46,24,63,47,15,-14,37,127, 
  /* [92][0][][] */ 18,1,10,11,60,-20,-78,-127,44,-69,-4,-33,-33,-20,-6,-23, 
  /* [93][0][][] */ 66,8,35,-127,-43,-5,-19,51,52,-71,87,-17,-40,126,-30,23, 
  /* [94][0][][] */ -100,48,-90,22,70,-127,-11,6,-3,-48,83,-32,-2,-4,-16,-10, 
  /* [95][0][][] */ -23,62,20,-127,-2,-1,-25,1,19,-32,-52,-62,1,15,-63,-5, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0006771787884645164, 0.00071098888292908669, 0.00032208606717176735, 0.0002766437828540802, 0.00056198117090389132, 0.0011109710903838277, 0.0011281018378213048, 0.00089072471018880606, 0.00024992667022161186, 0.0010160321835428476, 0.00065719458507373929, 0.00056454434525221586, 0.00043799099512398243, 0.00063079915707930923, 0.00023078094818629324, 0.0011047470616176724, 0.00057983235456049442, 0.00041136081563308835, 0.000483911600895226, 0.00063444051193073392, 0.0010904506780207157, 0.0016839359886944294, 0.00048420322127640247, 0.0017148712649941444, 0.0015557963633909822, 0.00072790804551914334, 0.00058564712526276708, 0.00053829699754714966, 0.0007827956578694284, 0.0002835010236594826, 0.00019302815780974925, 0.00044397386955097318, 0.00070725078694522381, 0.0010433971183374524, 0.00060985295567661524, 0.0005702323978766799, 0.001109631615690887, 0.0012379278196021914, 0.00033910787897184491, 0.0022944675292819738, 0.0004255978565197438, 0.00050879392074421048, 0.00021870608907192945, 0.00090659811394289136, 0.00037674966733902693, 0.00053499621571972966, 0.00086504517821595073, 0.00048512706416659057, 0.00020130400662310421, 0.00061140861362218857, 0.00074863893678411841, 0.00055647781118750572, 0.0010431840782985091, 0.00084841041825711727, 0.0012588227400556207, 0.00041784922359511256, 0.00060462701367214322, 0.00036281518987379968, 0.0010949235875159502, 0.00052307633450254798, 0.00093348900554701686, 0.00023557567328680307, 0.0005254030111245811, 0.00048772164154797792, 0.00067135016433894634, 0.000597247330006212, 0.00080649286974221468, 0.00061589485267177224, 0.00078064331319183111, 0.00082694663433358073, 0.00064208946423605084, 0.00044063219684176147, 0.00031515405862592161, 0.00051433854969218373, 0.0011916628573089838, 0.00060198141727596521, 0.00068233022466301918, 0.0011045647552236915, 0.0010344113688915968, 0.0010810946114361286, 0.00035191827919334173, 0.00044333678670227528, 0.00046804797602817416, 0.00036592845572158694, 0.0011067788582295179, 0.00079180480679497123, 0.00068440590985119343, 0.00016072737344074994, 0.00041597048402763903, 0.00069010129664093256, 0.00079501187428832054, 0.0011874783085659146, 0.00061308813747018576, 0.00056015345035120845, 0.00086435384582728148, 0.00043452088721096516, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3948, -4320, -13233, 33248, 26851, 6050, -5087, -5225, 26761, 2741, 27492, 25602, -9515, 12277, 36032, -30472, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00044888065895065665, 0.00026742942281998694, 0.00026351562701165676, 0.00021980291057843715, 0.00035217168624512851, 0.00036132443347014487, 0.00034117253380827606, 0.00039584541809745133, 0.00019385720952413976, 0.00029729949892498553, 0.00039717362960800529, 0.00066133250948041677, 0.00041727614006958902, 0.00040644779801368713, 0.00043150960118509829, 0.00032358805765397847, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -4,17,-14,24,41,71,-34,-28,42,1,10,11,-7,12,26,67,0,-3,-12,-10,94,-55,12,-16,-27,-36,-40,-90,-2,-3,46,47,115,-3,8,-2,13,-23,-23,11,-31,16,24,-25,2,-29,-8,22,-11,18,6,-10,-33,-12,7,-2,40,28,-20,-22,-59,26,-10,-10,16,12,57,3,15,3,3,-23,-63,-6,-3,-2,-6,-90,3,-14,36,-15,-51,-44,30,-14,6,29,-5,4,19,-30,23,21,-12,127, 
  /* [1][0][][] */ 76,-96,41,86,-14,-60,-19,-49,-24,-93,-7,27,14,-59,-32,-54,-85,-8,22,20,-37,-103,-38,27,127,-70,-69,15,-33,96,-18,51,16,19,-40,22,-18,-13,48,-20,-4,-74,79,-33,-62,16,60,-10,31,26,4,-70,67,-87,42,-18,27,30,-13,-106,39,-68,21,-50,4,-83,34,49,48,51,-43,1,-100,38,-23,66,33,95,16,-20,46,6,-72,35,-76,62,1,68,-42,19,20,10,9,-44,40,-1, 
  /* [2][0][][] */ 33,20,17,-30,9,-2,-11,39,61,-14,14,68,0,10,45,5,-10,-16,13,-5,-20,-65,5,-59,0,-14,-25,25,-4,14,127,-61,19,-71,-27,58,13,125,-40,-21,-1,-17,-4,36,-42,-48,-59,27,30,28,-36,-29,31,0,-7,-29,-26,0,-3,25,2,5,73,87,6,-84,18,-72,-13,-16,-12,5,-12,15,-23,14,19,60,8,17,13,84,26,-11,-13,6,10,1,28,4,-1,-51,-42,0,-7,63, 
  /* [3][0][][] */ -12,-16,-32,34,29,-23,3,-27,-19,18,2,3,10,-20,44,-12,41,-45,19,10,-19,-16,-12,-2,-19,12,8,-5,28,-44,65,-20,16,-18,-9,50,-15,-7,-10,7,11,-64,27,-29,-1,1,1,2,-127,46,-15,28,-118,-54,-25,-32,34,8,-18,54,-8,21,14,15,-19,-94,-41,30,54,19,1,25,-48,13,-7,-48,-46,-58,26,-44,13,-26,17,68,36,59,31,12,32,-10,-11,9,-29,0,-17,-27, 
  /* [4][0][][] */ 0,-26,16,-70,-3,-16,-51,9,-21,-48,-31,-9,5,75,11,6,56,-15,6,0,-6,35,58,8,-7,-1,14,13,4,-14,-10,-5,-37,10,8,13,41,-22,0,-13,19,14,-102,-25,32,-11,-6,-14,1,83,-11,-18,-25,-15,11,-5,2,-31,27,35,13,5,3,-2,36,-117,22,-22,-47,18,-19,2,-14,16,-16,30,-22,66,52,4,9,3,127,-38,45,-19,-9,-5,64,11,0,20,-29,22,-5,-41, 
  /* [5][0][][] */ -13,6,-7,-5,-8,-4,2,114,53,-18,-16,-28,-10,25,39,29,-19,-8,-4,-38,-51,-12,2,-52,15,7,20,74,73,9,66,49,-46,18,4,-4,-54,-54,-34,-20,-34,-14,-5,3,68,16,13,8,9,11,-23,10,-31,-13,7,-2,-19,-18,-13,35,-49,20,-22,-41,4,13,-19,8,-8,20,3,2,27,3,7,-4,-5,25,4,125,-8,-42,22,29,1,-6,24,-33,0,-27,24,-127,-30,-18,-10,-115, 
  /* [6][0][][] */ -29,-1,-15,-49,-8,-20,-12,10,-7,19,-19,1,33,-58,8,-12,-5,-61,24,11,0,4,-17,25,76,-7,-2,-1,17,-3,7,-8,-26,-1,-19,4,23,2,14,32,1,-27,-45,-15,-7,-18,30,-127,19,33,17,6,6,6,-8,-41,36,-6,-7,10,16,15,0,8,35,67,28,-17,-20,-12,14,-18,13,2,43,-8,-29,23,1,6,-19,-3,52,-34,-2,37,21,-17,19,6,-34,-4,-20,11,-7,17, 
  /* [7][0][][] */ 18,8,38,-27,-3,1,-6,-24,-2,-10,-14,-14,-7,-89,22,7,-3,-33,-13,-8,14,-19,-36,-7,-20,-8,4,-21,11,5,9,1,-11,4,-13,-21,-1,-9,-25,26,4,-16,-23,26,-2,12,-17,79,1,21,-19,-21,-22,9,-5,-54,36,-1,-1,1,-4,7,-11,-8,-19,35,13,-29,-14,-8,7,35,-5,-7,-14,7,51,8,1,-19,8,-32,33,2,-35,127,-5,-3,-30,-24,-3,20,-22,-5,-5,3, 
  /* [8][0][][] */ -71,38,-67,8,40,-7,-16,24,10,69,-52,9,11,40,80,-19,-6,37,-77,14,12,33,-27,6,-40,-30,16,13,48,-91,-6,-2,26,7,20,-6,-13,26,-49,43,16,21,10,-127,-43,-3,48,-33,-56,27,7,65,-117,73,26,0,14,-20,-28,-19,-1,-45,6,29,-35,42,33,-24,-8,-1,25,90,-29,28,40,35,-14,-100,-8,-34,-22,-10,30,-1,-59,2,18,-40,0,32,-24,2,33,-5,-19,-11, 
  /* [9][0][][] */ 20,-50,-38,-30,12,28,-23,22,24,-20,-7,17,-39,-19,9,21,-5,9,32,-26,-27,8,-21,-37,36,8,25,-14,-35,-32,-23,-3,-10,12,18,30,9,38,-40,14,16,6,-15,-79,8,-7,33,-127,-36,0,2,22,-19,9,-13,2,-46,30,-15,15,9,6,12,30,20,114,39,41,9,-7,10,-17,-10,-3,-33,6,62,-6,9,15,-15,8,17,-41,2,19,-2,3,-47,33,-30,-2,9,11,6,-13, 
  /* [10][0][][] */ 21,43,-19,32,66,-105,-15,-30,6,52,32,-7,-8,17,14,-76,14,36,-23,41,-83,-10,-7,-29,-66,-30,-52,45,13,10,4,39,-7,-11,34,-15,77,-26,-9,-2,-17,58,47,-17,-53,-15,-37,11,-18,-24,-40,1,-11,-10,4,-15,9,33,-24,-15,3,9,-12,21,13,47,53,24,21,1,30,52,-51,-21,-59,-13,0,28,-19,7,31,-5,-61,-28,59,-48,93,-5,-17,13,22,-17,81,39,-13,-127, 
  /* [11][0][][] */ 39,36,-35,22,-8,14,56,0,-7,-21,-27,-16,-1,0,36,1,-5,-7,-98,-7,-3,11,8,-6,-45,-21,-13,1,-2,20,0,-2,-9,7,7,24,9,10,-11,17,8,29,58,-96,30,-36,1,-9,-127,15,10,-52,21,15,-12,11,-13,-17,3,5,11,-20,-10,7,-53,53,-20,11,13,-5,26,15,-51,-30,11,26,-5,-39,-56,6,6,-2,86,42,5,-13,-17,-14,0,19,-19,-6,-4,10,-22,15, 
  /* [12][0][][] */ -35,-7,5,0,-27,33,14,5,127,5,-18,7,-1,12,-34,-41,24,32,12,75,52,34,-6,-16,3,10,14,-28,-111,7,27,-38,2,-6,-12,-18,23,-2,36,-15,-46,-19,-2,13,0,33,7,-6,15,8,-42,11,3,1,10,-10,74,-28,10,16,17,-17,9,-9,-9,35,-39,1,-5,6,-20,-29,14,8,-69,8,23,-6,9,-58,-17,12,41,37,-18,-19,-27,-29,5,14,1,46,-15,-26,13,12, 
  /* [13][0][][] */ 28,-10,-28,31,31,-2,9,0,-5,4,7,0,12,-11,12,-13,14,-69,-35,9,-8,-19,13,5,10,11,2,-6,-10,-32,-6,16,1,6,7,40,19,-3,7,16,3,9,26,38,18,15,-8,-127,22,-6,4,7,-14,-1,20,5,-13,16,22,15,7,17,-5,7,-9,-17,-17,-55,6,14,-8,-32,-16,36,-8,20,-25,0,15,-2,26,-10,-9,18,13,28,10,21,-5,0,24,-4,4,16,-9,-7, 
  /* [14][0][][] */ -122,-56,27,57,30,-23,-27,10,-13,9,-10,13,67,11,-127,-2,78,-12,-15,30,-10,-8,37,19,-113,13,35,-10,-44,-73,-31,-1,-3,1,21,-67,32,31,1,24,22,30,0,-35,17,125,73,58,-114,53,13,30,-55,-4,40,-4,7,12,66,61,33,51,15,48,5,-9,-44,45,11,78,-51,-90,-84,-1,-5,44,-9,40,88,3,58,18,40,27,48,12,48,40,25,50,71,-3,2,32,23,-24, 
  /* [15][0][][] */ 97,-19,45,-2,2,74,32,-18,-12,57,12,10,-90,-16,-20,36,8,37,47,-11,17,21,-85,66,21,13,52,-7,30,40,-60,-79,11,-54,42,-6,42,-30,-50,-108,-4,36,-3,44,2,48,-22,-33,115,-49,-59,31,53,-121,62,-117,-5,-63,23,19,-127,2,17,22,86,-27,-57,42,-28,73,-23,14,51,33,21,4,27,-51,77,-20,-10,-5,39,91,-21,4,0,-58,5,-7,70,1,-72,55,26,-15, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.019077427685260773, 0.011365749873220921, 0.011199413798749447, 0.0093416236340999603, 0.014967296272516251, 0.01535628829151392, 0.01449983287602663, 0.016823429614305496, 0.0082389311864972115, 0.012635228224098682, 0.01687987893819809, 0.028106631711125374, 0.017734235152602196, 0.017274031415581703, 0.018339157104492188, 0.013752492144703865, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10111, -8197, 3150, 45627, -2268, -4774, -11001, 2541, -2792, 1069, 2911, -1711, 1116, -5037, 6676, -5471, -1332, 16664, 23715, 2856, 3785, -3255, 150, 532, 16518, -675, -1286, -3970, -5759, -7376, 5486, -8997, -19, -2172, -40, 13342, 1504, -3399, 19143, 683, -579, 1635, -10012, -7789, -7148, 68169, 153, 15135, 33857, -11890, -252, 5474, 7240, -48, -5963, 2209, -11364, 1859, 1817, -6477, -1600, -528, -14617, -205, 1719, 16006, 28473, 24516, -11937, -89, -8213, -1079, 55286, 11167, 537, 186, 18485, 33780, -280, -7663, -1699, -4539, 904, -3098, 484, 219, 1121, -489, 1868, -3310, -81, -698, -422, -689, 69, 48776, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00020135141676291823, 0.00014663625916000456, 0.00023112574126571417, 4.6396678953897208e-05, 0.00014002207899466157, 0.00017021097301039845, 0.00028938057948835194, 7.2980816185008734e-05, 0.00014107816969044507, 0.00039770914008840919, 0.00015127896040212363, 0.0003291016910225153, 8.0596044426783919e-05, 0.00043277672375552356, 0.00015861340216360986, 0.0001548031868878752, 0.00012743318802677095, 0.00028186390409246087, 6.8830064265057445e-05, 0.00019017979502677917, 4.2292376747354865e-05, 0.00018903361342381686, 0.00013667602615896612, 0.00035550477332435548, 0.00021422762074507773, 0.00024748229770921171, 0.00012038043496431783, 0.00019289854390081018, 0.00010777000716188923, 0.00012232453445903957, 0.00013997440692037344, 0.00018248005653731525, 0.00013084179954603314, 9.1724192316178232e-05, 0.00021337361249607056, 0.00017739870236255229, 0.00052387424511834979, 0.00011327002721372992, 5.4965192248346284e-05, 0.0001409800024703145, 0.00017594553355593234, 0.00029156485106796026, 0.0003209510468877852, 0.00016095918545033783, 0.00018423609435558319, 6.266753189265728e-05, 0.00023015994520392269, 0.00022433891717810184, 7.7686127042397857e-05, 0.00021658296464011073, 0.00016704108566045761, 0.00022181829262990505, 0.00023840168432798237, 0.0002912352210842073, 0.00022817333228886127, 0.00039320637006312609, 0.00033599970629438758, 0.00021028898481745273, 0.0001055221728165634, 8.5938801930751652e-05, 0.00030151926330290735, 0.00015373824862763286, 0.00025516754249110818, 0.00014203690807335079, 0.00019111989240627736, 0.00017983705038204789, 0.00010344047768739983, 7.4272182246204466e-05, 0.00033349666045978665, 0.0002588109637144953, 0.00020664960902649909, 0.00014444484259001911, 0.00010326131450710818, 0.00017502656555734575, 0.00014537895913235843, 0.00022158103820402175, 0.00050421198830008507, 5.5606720707146451e-05, 0.00024509977083653212, 0.00024283606035169214, 0.00014564269804395735, 0.00047109505976550281, 0.00012789446918759495, 0.00016682702698744833, 0.00012817724200431257, 8.6728919995948672e-05, 0.00015880083083175123, 0.00016938928456511348, 0.00019649048044811934, 0.00010454092989675701, 0.00020959410176146775, 0.00010032128193415701, 0.00015427258040290326, 0.00052557262824848294, 0.017947988584637642, 7.9665231169201434e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,6,-20,104,-18,23,-62,-53,17,-6,100,-9,3,-8,-5,55,5,16,-34,3,74,3,32,-33,2,17,43,49,21,13,24,48,-6,27,10,-14,5,49,-60,-27,20,9,27,17,-85,-57,25,-5,-10,-20,-8,-6,49,5,-9,2,-3,-35,29,-31,27,-2,127,26,-13,-11,11,-52,66,36,2,-8,79,-32,68,5,17,-127,29,65,1,15,127,-14,38,29,-28,-19,35,-7,-13,82,2,20,-2,12, -49,13,-8,10,52,-8,-11,-127,37,14,-127,-5,-17,-12,4,93,18,-30,-14,-16,77,-96,127,26,-61,-31,-105,-15,27,36,-49,18,120,12,-13,-1,-24,127,-62,-127,8,-19,-30,14,47,-127,127,-44,-75,49,49,7,39,-64,31,56,36,42,-101,84,127,34,4,-21,43,-38,-94,-1,37,-30,-18,46,-49,-48,105,-4,-29,-60,-34,64,-66,62,-16,9,-11,48,55,-40,-28,53,-12,72,-127,-31,23,-127, 0,-4,-23,-74,8,18,38,22,-4,-2,5,63,0,-12,-11,6,-12,17,-17,16,6,25,24,-32,1,-31,10,13,-6,5,46,-79,44,17,9,-22,12,3,-30,-21,7,3,-16,9,22,-32,21,1,7,-8,6,-5,4,5,-6,8,-8,44,7,-2,11,-19,3,-18,-26,-17,30,-50,-106,-6,41,-18,-127,-22,-12,17,10,-11,5,12,-13,23,-36,-3,-41,21,26,36,-25,-17,25,-12,20,7,-2,-45, 
  /* [0][1][][] */ -41,58,-17,37,-85,-16,-11,-44,25,95,-44,-22,-30,-25,-7,63,127,-24,-88,-14,57,-127,-28,15,-35,-47,-127,-6,37,37,-50,28,-127,-75,-56,4,65,-3,-49,46,-20,86,1,-2,34,-53,-12,-31,127,43,-3,21,44,9,-37,-17,31,9,-125,127,-37,-89,21,127,-59,-36,-83,127,-36,127,-19,52,-36,-54,37,8,-35,-70,127,48,127,36,6,-1,127,29,-95,47,-38,-35,-102,40,98,103,29,-58, 127,127,127,127,-46,-127,127,24,127,-127,16,-127,-106,127,127,127,-16,-127,-62,-127,127,23,-67,127,127,127,-56,-127,127,127,-127,127,-9,-127,-124,127,-127,-45,98,108,-127,-127,127,127,127,-117,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-106,-28,-69,-68,127,127,-70,127,127,-106,-127,127,-42,127,-127,-127,-127,123,-76,127,-43,127,77,127,-38,-127,-25,-106,-127,-126,-23,-127,-22,-127,-127,116, -24,65,-37,2,127,71,-22,49,5,23,-13,-5,-26,-30,-13,-7,-104,-21,-127,38,30,78,-12,-116,-34,-40,124,73,9,36,72,8,126,-48,127,-3,55,4,-92,14,36,23,-23,2,-23,-53,-13,-42,81,14,-11,40,-6,-4,-75,-14,24,20,127,-90,2,127,1,-36,-110,-28,-73,100,14,-16,112,24,-18,-56,11,46,-29,-8,-44,-3,-46,9,45,24,-90,35,127,-46,31,-22,127,-10,-113,35,34,19, 
  /* [0][2][][] */ -4,-40,-21,-61,-4,15,40,32,-2,9,-20,51,23,-34,-7,7,41,3,13,21,-10,31,-17,-26,2,-24,9,3,-10,-7,49,-75,-39,67,-27,-25,31,-35,-62,16,8,9,-34,19,13,-78,-12,-1,-9,6,17,-8,7,1,-22,6,-1,44,-49,34,-6,-12,5,17,-6,-10,22,-53,-56,11,-21,-13,-120,-31,0,18,14,-13,56,18,23,22,-40,16,12,25,-21,10,4,25,22,-6,20,41,-7,-29, -28,-11,-26,23,-45,74,-25,66,6,-6,54,-12,127,-7,-18,-18,-1,-39,-58,24,-23,80,-44,-111,-47,-47,100,70,13,44,54,-2,-124,63,-14,-23,-28,-27,-127,-4,44,-14,-15,36,-26,-43,-18,-47,-60,27,69,25,-11,-81,30,52,17,26,74,-55,20,-58,-8,0,19,-26,-127,-55,-11,-26,-64,22,36,-46,-30,-7,-44,23,-57,1,49,34,19,10,5,63,-92,127,15,127,-31,-19,115,-21,46,83, -9,-35,-25,29,12,66,-44,13,3,-6,1,13,12,-50,-9,-13,-44,-5,17,20,-24,6,-20,4,-4,19,-3,52,-2,-5,33,29,17,42,20,-22,-6,-27,-31,7,11,-11,22,8,-73,-31,-13,5,-2,-16,-1,-4,-9,8,-17,-5,-1,-50,13,-29,-22,49,10,-29,-10,-2,36,-55,45,7,53,-21,31,-55,-18,22,11,10,-6,22,-30,32,88,-14,-18,54,39,-8,108,12,2,-19,9,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0085574351251125336, 0.0062320409342646599, 0.0098228435963392258, 0.001971858786419034, 0.0059509379789233208, 0.0072339661419391632, 0.012298674322664738, 0.0031016846187412739, 0.0059958221390843391, 0.016902638599276543, 0.0064293555915355682, 0.013986821286380291, 0.00342533178627491, 0.018393009901046753, 0.0067410697229206562, 0.0065791350789368153, 0.0054159103892743587, 0.011979215778410435, 0.0029252776876091957, 0.0080826412886381149, 0.001797426026314497, 0.0080339284613728523, 0.0058087310753762722, 0.015108952298760414, 0.0091046737506985664, 0.010517997667193413, 0.0051161684095859528, 0.0081981876865029335, 0.0045802253298461437, 0.0051987925544381142, 0.0059489118866622448, 0.0077554020099341869, 0.0055607762187719345, 0.0038982781115919352, 0.009068378247320652, 0.0075394446030259132, 0.02226465567946434, 0.0048139761202037334, 0.0023360205814242363, 0.0059916498139500618, 0.0074776848778128624, 0.012391505762934685, 0.013640418648719788, 0.0068407654762268066, 0.0078300340101122856, 0.0026633699890226126, 0.0097817974165081978, 0.0095344036817550659, 0.0033016602974385023, 0.0092047760263085365, 0.0070992461405694485, 0.0094272773712873459, 0.010132071562111378, 0.012377496808767319, 0.0096973665058612823, 0.016711270436644554, 0.014279987663030624, 0.0089372815564274788, 0.0044846921227872372, 0.0036523989401757717, 0.012814568355679512, 0.0065338751301169395, 0.010844620876014233, 0.0060365684330463409, 0.008122595027089119, 0.0076430742628872395, 0.0043962202034890652, 0.0031565676908940077, 0.014173608273267746, 0.010999466292560101, 0.0087826084345579147, 0.0061389058828353882, 0.004388605710119009, 0.0074386289343237877, 0.0061786058358848095, 0.0094171939417719841, 0.02142900787293911, 0.0023632855154573917, 0.010416740551590919, 0.010320532135665417, 0.0061898143030703068, 0.020021539181470871, 0.0054355147294700146, 0.0070901485159993172, 0.0054475325159728527, 0.0036859791725873947, 0.0067490353249013424, 0.0071990443393588066, 0.0083508454263210297, 0.0044429893605411053, 0.008907749317586422, 0.004263654351234436, 0.0065565844997763634, 0.022336836904287338, 0.76278948783874512, 0.0033857722301036119, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 27236, 1880, 8994, -837, 7032, 9171, 17319, 8565, -1582, 23213, 8851, 2341, 10622, 59196, -545, -2649, 17074, 17796, 2475, -198, -982, 18658, 5824, 4216, 9867, 6593, 6541, 6208, 70, 24, 8118, 13834, 24123, 2394, 10770, -892, 32979, 10825, 1120, 7604, 945, 16093, 13520, 6772, 4911, 15692, 21436, 7234, 6820, 4221, 381, -1144, 26443, 9445, 10646, 19958, -364, 12504, 4783, 5561, 22965, 8925, 4337, 9816, 8501, 5534, 8341, -1095, 25353, 11296, 12764, -2023, -1845, 4489, 2161, 4341, 32717, 20784, 18342, -3962, 7825, -7353, -2597, 800, 8767, 7780, 11677, 6745, 14788, 6318, 11034, 5694, 20613, 30049, -15039, 20662, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 9.4938717666082084e-05, 0.00018801566329784691, 0.00014954415382817388, 0.00065849581733345985, 0.0002296249003848061, 0.00010195073264185339, 0.00018026192265097052, 0.00040974502917379141, 0.0002805784170050174, 7.8158962423913181e-05, 0.00016251810302492231, 0.00035452182055450976, 0.00025883037596940994, 8.1301950558554381e-05, 0.00019965064711868763, 0.00026054432964883745, 0.00013055383169557899, 0.00013060806668363512, 0.00018294557230547071, 0.00054798054043203592, 0.00026724801864475012, 0.00013249649782665074, 0.00025757664116099477, 0.00018930551595985889, 0.00017784979718271643, 0.00031562673393636942, 0.00021889316849410534, 0.00014493013441096991, 0.00041309822699986398, 0.0002499355177860707, 0.00017616807599551976, 0.00013597309589385986, 8.1472921010572463e-05, 0.00045375266927294433, 0.00015507105854339898, 0.00030790048185735941, 6.8334353272803128e-05, 0.00024440334527753294, 0.00039690194535069168, 0.00012634470476768911, 0.00052698241779580712, 0.00011760544293792918, 0.00015740211529191583, 0.00010928471601800993, 0.00022882982739247382, 0.00020844857499469072, 0.00013278397091198713, 0.00019957289623562247, 0.00023124594008550048, 0.0002076903183478862, 0.00032569505856372416, 0.00057518557878211141, 0.00010114346514455974, 0.00016900406626518816, 0.00021836943051312119, 9.2662041424773633e-05, 0.00029043888207525015, 0.00013936906179878861, 0.00016735953977331519, 0.00029212754452601075, 7.4156283517368138e-05, 0.00015706892008893192, 0.00024410644255112857, 0.0002820680383592844, 0.00012336789222899824, 0.00019994037575088441, 0.0002342279622098431, 0.00031477201264351606, 0.00010633639612933621, 0.00010234710498480126, 0.00015608388639520854, 0.00023560094996355474, 0.00020805414533242583, 0.00029156080563552678, 0.00020164871239103377, 0.00029250551597215235, 7.2351736889686435e-05, 0.00021619706240016967, 9.174020669888705e-05, 0.0003071968094445765, 0.00013968517305329442, 0.00028205086709931493, 0.00014786289830226451, 0.00032263825414702296, 0.00018264642858412117, 0.00020102305279579014, 0.00013899870100431144, 0.00020262635371182114, 0.00011499903484946117, 0.00025248585734516382, 0.00012771668843924999, 0.00029632134828716516, 0.00010232403292320669, 9.198020416079089e-05, 0.00019481538038235158, 0.0001585121062817052, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,-27,125,126,77,-43,27,-31,127,-11,-64,-81,41,93,-42,-85, 
  /* [1][0][][] */ 40,79,-2,3,98,-9,17,35,44,72,-42,127,5,-19,89,-103, 
  /* [2][0][][] */ 29,-49,7,0,-47,20,-43,82,-73,-76,13,72,-7,-127,72,-91, 
  /* [3][0][][] */ 127,121,-4,35,-125,-19,-64,-26,1,1,105,-69,-57,92,-46,-37, 
  /* [4][0][][] */ -3,-2,20,5,-29,36,-20,41,-62,-44,-2,-9,-9,-127,33,7, 
  /* [5][0][][] */ 122,-40,-23,3,-7,-116,-28,10,-3,4,-127,-4,25,-4,-7,24, 
  /* [6][0][][] */ -127,-68,-14,100,-47,5,-49,23,-123,-72,-66,-36,21,55,-7,98, 
  /* [7][0][][] */ -18,15,-74,51,41,-127,-22,35,9,-29,12,-4,-1,18,-45,13, 
  /* [8][0][][] */ 37,-52,-7,-6,15,25,-65,-68,-7,10,-73,13,-127,5,0,21, 
  /* [9][0][][] */ 23,-59,59,115,1,10,-2,-72,127,-88,-1,-23,-5,54,-60,23, 
  /* [10][0][][] */ -117,-75,-10,-52,110,34,55,82,113,-68,-80,32,90,-99,-127,80, 
  /* [11][0][][] */ 38,-18,-127,19,50,27,-18,44,-10,-31,-11,-9,-2,23,-40,7, 
  /* [12][0][][] */ 111,-52,11,3,-4,-62,-65,-27,36,-2,-127,-28,-53,-22,-5,59, 
  /* [13][0][][] */ 38,-76,16,-83,97,2,-105,-127,42,-78,23,27,27,-6,22,18, 
  /* [14][0][][] */ -50,22,-92,-42,86,-127,64,-53,63,54,-7,-99,27,116,-15,25, 
  /* [15][0][][] */ 29,-9,64,42,51,-46,-36,-9,23,-61,-66,-7,-127,-51,-13,50, 
  /* [16][0][][] */ -123,59,-4,15,-5,93,46,77,-24,35,127,3,-8,3,6,-52, 
  /* [17][0][][] */ -12,-8,-40,-31,-34,16,45,78,-20,127,-21,10,-7,82,65,-3, 
  /* [18][0][][] */ 6,127,-48,7,14,3,60,-62,24,116,-52,119,15,-40,27,-103, 
  /* [19][0][][] */ 9,-20,39,21,9,44,-4,19,14,10,-45,-4,-127,1,-12,26, 
  /* [20][0][][] */ 93,-60,-6,-86,-26,19,26,-86,-54,26,-127,-37,31,3,52,10, 
  /* [21][0][][] */ 47,-4,127,53,-16,57,28,-8,-2,34,-24,-5,-10,81,-2,-12, 
  /* [22][0][][] */ 28,7,17,6,-17,3,21,127,12,-3,15,30,-2,37,29,25, 
  /* [23][0][][] */ -21,20,-85,16,16,-127,8,33,0,-18,-9,-9,-64,3,0,35, 
  /* [24][0][][] */ 45,-62,2,-56,59,-1,-24,-6,37,31,62,92,-42,84,127,38, 
  /* [25][0][][] */ -127,-101,-38,11,20,5,12,-30,-60,4,-79,18,27,36,25,48, 
  /* [26][0][][] */ 11,2,49,-1,-4,14,-35,62,-82,-64,-9,20,11,-127,33,-20, 
  /* [27][0][][] */ -103,40,-48,28,32,-25,5,26,38,-32,127,25,-25,6,-14,-27, 
  /* [28][0][][] */ -15,-11,17,31,-3,-1,11,81,25,15,-25,-7,-127,-12,-10,38, 
  /* [29][0][][] */ -5,65,46,-33,41,-21,23,-20,-127,31,-35,10,3,38,-94,7, 
  /* [30][0][][] */ -11,-5,-127,-35,26,-63,-1,13,-23,-16,-9,-17,-39,-27,9,16, 
  /* [31][0][][] */ 127,-26,-122,9,38,6,-46,59,-22,-8,-73,-50,5,-5,-91,25, 
  /* [32][0][][] */ -118,48,38,50,22,89,27,34,23,2,127,8,-23,23,-17,-33, 
  /* [33][0][][] */ 6,-14,127,-20,-66,26,5,-37,-5,7,-6,19,-6,18,38,22, 
  /* [34][0][][] */ -18,-19,-44,-120,29,12,1,-24,-30,-63,-28,-127,-14,4,50,6, 
  /* [35][0][][] */ 1,-30,38,53,51,-22,22,-18,-124,42,-15,23,-27,127,-44,-34, 
  /* [36][0][][] */ -127,50,-31,1,-16,44,46,102,2,26,124,-15,11,25,10,-21, 
  /* [37][0][][] */ -32,8,127,-29,-76,-67,24,-38,23,21,-7,4,1,-57,65,6, 
  /* [38][0][][] */ 19,-17,-16,24,31,-55,-54,4,-14,-11,61,-15,127,21,-12,10, 
  /* [39][0][][] */ -35,-19,-15,-44,-73,-94,76,127,-49,-7,3,-65,-1,67,56,75, 
  /* [40][0][][] */ 65,-10,-22,-19,-11,88,-14,8,16,-1,19,-5,127,8,-23,-16, 
  /* [41][0][][] */ -4,-10,-31,-127,27,-6,-27,-66,-5,-47,17,-35,-9,-18,-12,29, 
  /* [42][0][][] */ 46,52,1,104,-119,-2,-94,5,-79,-62,79,-81,-44,127,-52,17, 
  /* [43][0][][] */ 20,122,-24,127,21,26,43,-74,-37,88,-3,24,3,-45,49,32, 
  /* [44][0][][] */ -16,-26,-127,16,55,76,-51,48,-19,-23,36,-25,3,-29,-54,5, 
  /* [45][0][][] */ 0,25,-17,-127,-29,0,57,-6,-20,29,-36,9,-1,-98,29,-30, 
  /* [46][0][][] */ 14,30,62,-20,18,11,-48,56,20,-47,-30,17,11,127,54,-13, 
  /* [47][0][][] */ 19,-23,27,-35,-32,14,-61,58,-9,-35,13,36,12,-127,36,8, 
  /* [48][0][][] */ 8,-11,13,-127,-4,-16,-5,11,15,-32,14,-17,9,48,-8,55, 
  /* [49][0][][] */ 33,-39,0,111,84,11,0,51,-53,14,35,35,-8,35,127,-8, 
  /* [50][0][][] */ -24,-9,68,-24,9,127,-26,-64,40,-23,115,34,96,-10,-3,-56, 
  /* [51][0][][] */ 30,44,8,13,16,-1,-47,24,49,-1,-4,127,15,35,35,-53, 
  /* [52][0][][] */ -33,65,127,3,15,-28,10,-58,-32,7,7,33,-6,95,-118,-14, 
  /* [53][0][][] */ -3,-21,-46,-127,-50,2,21,-39,-23,43,5,3,22,-19,47,15, 
  /* [54][0][][] */ 9,12,-24,-48,26,8,-15,8,61,-23,1,-26,-9,127,18,26, 
  /* [55][0][][] */ -5,-23,-43,-4,15,-49,-13,-127,12,-89,-7,-12,-30,-81,-45,-12, 
  /* [56][0][][] */ 40,40,28,64,4,-22,13,127,28,-27,5,-38,84,-15,-46,32, 
  /* [57][0][][] */ 81,-27,127,-27,-60,-52,-3,-30,16,8,-100,28,62,-50,61,22, 
  /* [58][0][][] */ 103,91,1,97,-127,-23,-7,41,-15,20,99,-31,-83,-67,-19,-73, 
  /* [59][0][][] */ 127,-41,-5,-4,-27,-16,-3,9,-29,25,-123,-15,11,-5,3,29, 
  /* [60][0][][] */ -127,36,0,1,17,19,24,39,16,15,104,3,-35,0,18,-14, 
  /* [61][0][][] */ -109,65,23,21,31,1,-75,-59,127,-96,81,-3,51,-42,-91,-52, 
  /* [62][0][][] */ -18,-41,-127,69,77,106,-11,100,22,-67,34,-8,-78,-2,-113,-16, 
  /* [63][0][][] */ -43,7,127,-41,-56,-62,27,-26,4,13,-1,15,-8,-52,74,16, 
  /* [64][0][][] */ 29,66,-14,22,61,-8,89,-127,-27,105,10,-18,-22,-118,-4,48, 
  /* [65][0][][] */ 1,22,2,-19,58,14,1,-127,-20,-50,-25,-50,-10,-32,35,22, 
  /* [66][0][][] */ -127,-2,-14,14,-40,21,11,-39,-83,-44,-90,58,66,29,45,79, 
  /* [67][0][][] */ -9,-52,2,127,5,-3,-29,41,59,23,11,-17,-10,-35,-96,-15, 
  /* [68][0][][] */ 10,0,-10,127,-55,-16,6,-29,-46,31,10,-30,-26,-59,-33,-45, 
  /* [69][0][][] */ 83,90,10,121,38,-19,62,-127,23,110,19,55,5,-37,33,-17, 
  /* [70][0][][] */ 18,-38,12,-96,127,-44,45,18,77,-34,62,-50,14,100,77,110, 
  /* [71][0][][] */ 8,53,5,91,43,-127,-38,101,33,-92,20,16,7,-54,-67,33, 
  /* [72][0][][] */ -127,-75,-18,43,12,33,-29,13,-53,-31,-95,30,48,15,8,101, 
  /* [73][0][][] */ -17,-22,-10,62,17,-22,-3,-12,80,10,-4,7,31,127,-56,-47, 
  /* [74][0][][] */ 75,-40,19,-33,-42,-18,36,-12,-41,-9,-109,22,-127,-15,36,48, 
  /* [75][0][][] */ -10,-17,-18,127,-29,3,0,-15,-62,19,-20,-21,4,-45,-18,-36, 
  /* [76][0][][] */ -2,-14,-4,45,35,10,-26,-127,14,-123,3,23,-23,-18,32,-42, 
  /* [77][0][][] */ 127,-27,38,47,-32,-2,-44,0,40,-13,-34,54,29,9,-44,30, 
  /* [78][0][][] */ -20,-6,42,-6,6,-9,-65,30,42,-31,-39,-34,14,127,34,-23, 
  /* [79][0][][] */ -3,21,51,20,43,61,-52,-56,15,-49,76,-18,127,-24,-29,-46, 
  /* [80][0][][] */ -127,-98,-85,115,2,30,27,-6,-81,23,-105,12,57,-86,-10,59, 
  /* [81][0][][] */ 61,4,-67,34,127,91,-40,-39,-3,-108,-19,-76,-30,-6,-99,21, 
  /* [82][0][][] */ 127,124,4,44,-122,-19,-77,-21,-73,-4,114,-52,-51,105,-9,-47, 
  /* [83][0][][] */ 127,39,16,-22,11,-15,-10,31,38,17,82,-31,-48,-27,-27,-81, 
  /* [84][0][][] */ 9,-59,-68,-27,36,22,-2,-127,-29,-51,35,5,-27,-10,-3,-16, 
  /* [85][0][][] */ -28,-5,-50,-60,-13,-6,70,83,-12,127,-10,-54,25,65,70,-20, 
  /* [86][0][][] */ 113,-29,11,2,3,-34,-2,-18,1,1,-127,9,16,20,-11,22, 
  /* [87][0][][] */ -19,35,25,-35,-2,70,-36,63,-2,-41,28,16,16,-127,14,6, 
  /* [88][0][][] */ 7,-19,-98,-48,60,-8,-31,-127,4,-32,-1,-35,-49,-15,26,-27, 
  /* [89][0][][] */ 24,-27,27,-127,37,6,-49,116,90,-80,30,12,-3,40,31,50, 
  /* [90][0][][] */ -11,14,-42,65,66,-3,112,-84,79,127,-35,37,15,6,-6,-16, 
  /* [91][0][][] */ 40,-18,-45,-9,-3,-127,-12,-9,-4,-2,-50,-8,32,-11,8,28, 
  /* [92][0][][] */ 28,-3,127,57,37,11,-2,47,-28,31,-65,23,26,83,2,-4, 
  /* [93][0][][] */ 127,-41,-38,-19,-35,-62,9,45,-19,37,-122,-13,5,22,1,55, 
  /* [94][0][][] */ 16,-19,44,77,111,-32,-10,57,7,-15,-2,55,-6,127,-23,-77, 
  /* [95][0][][] */ -113,35,39,44,16,44,26,6,13,8,127,-7,-18,31,-11,-31, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00041867553954944015, 0.00082914077211171389, 0.00065948313567787409, 0.0029039373621344566, 0.001012635650113225, 0.00044959821389056742, 0.00079494708916172385, 0.0018069575307890773, 0.0012373384088277817, 0.00034467756631784141, 0.00071669765748083591, 0.0015634255250915885, 0.0011414304608479142, 0.00035853800363838673, 0.00088045053416863084, 0.0011489889584481716, 0.0005757366307079792, 0.00057597580598667264, 0.00080678187077865005, 0.0024165699724107981, 0.0011785519309341908, 0.00058430369244888425, 0.0011359016643837094, 0.00083482894115149975, 0.00078430975554510951, 0.0013918998884037137, 0.00096530921291559935, 0.00063913548365235329, 0.0018217449542135, 0.0011022045509889722, 0.0007768934010528028, 0.00059963535750284791, 0.00035929199657402933, 0.0020010292064398527, 0.00068385648773983121, 0.0013578274520114064, 0.00030135147972032428, 0.0010778079740703106, 0.0017503200797364116, 0.00055717455688863993, 0.002323969267308712, 0.00051863479893654585, 0.00069413636811077595, 0.00048194077680818737, 0.0010091294534504414, 0.00091924902517348528, 0.00058557145530357957, 0.0008801076328381896, 0.0010197843657806516, 0.0009159051114693284, 0.0014363008085638285, 0.002536542946472764, 0.0004460382042452693, 0.00074530043639242649, 0.00096299953293055296, 0.00040863550384528935, 0.0012808226747438312, 0.0006146114319562912, 0.00073804816929623485, 0.0012882695300504565, 0.00032702591852284968, 0.00069266697391867638, 0.0010764986509457231, 0.0012439076090231538, 0.00054404698312282562, 0.00088172819232568145, 0.0010329349897801876, 0.001388130709528923, 0.00046893881517462432, 0.0004513462190516293, 0.00068832305260002613, 0.0010389897506684065, 0.00091750960564240813, 0.0012857702095061541, 0.00088926189346238971, 0.0012899363646283746, 0.00031906797084957361, 0.00095341948326677084, 0.00040457025170326233, 0.0013547244016081095, 0.00061600544722750783, 0.0012438318226486444, 0.00065206887666136026, 0.0014228203799575567, 0.00080546265235170722, 0.00088650279212743044, 0.0006129781249910593, 0.00089357327669858932, 0.00050714064855128527, 0.0011134514352306724, 0.0005632249522022903, 0.0013067640829831362, 0.00045124447206035256, 0.00040562864160165191, 0.0008591272053308785, 0.0006990313995629549, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -40824, 2746, 1735, -8389, 1355, -6930, -11556, -41281, 3549, 24553, 32309, -11069, -1025, -21772, 40402, -42894, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00063006702112033963, 0.00092899339506402612, 0.0010586801217868924, 0.0011003752006217837, 0.00070312706520780921, 0.0010842743795365095, 0.0010557110654190183, 0.00073155720019713044, 0.00076244981028139591, 0.00060640566516667604, 0.00075991236371919513, 0.00051903602434322238, 0.0011435146443545818, 0.0015241712098941207, 0.00047179378452710807, 0.00052627938566729426, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -19,-1,-24,9,24,1,1,110,-51,18,46,-5,15,-17,-15,12,11,-15,-7,0,68,-5,21,127,-14,88,-3,-12,25,-13,25,-27,-14,51,21,-50,17,48,20,-12,-111,-25,24,45,37,29,-123,-53, 
  /* [1][0][][] */ -37,-12,22,13,-34,12,0,57,-52,-32,8,-42,-23,-16,-2,-5,-24,119,-9,20,10,8,-28,-17,26,-42,17,26,-25,-83,-40,23,-18,-4,30,-2,-5,-39,2,14,-19,-30,127,12,10,2,22,-13, 
  /* [2][0][][] */ -23,-7,-13,-36,-1,-65,6,-20,1,11,16,28,16,16,-12,10,-5,-21,-25,-13,-3,0,1,-127,-13,75,-15,3,-1,-19,-2,-7,-6,54,12,-1,21,10,28,1,-40,4,-18,-7,0,-10,16,7, 
  /* [3][0][][] */ -8,35,0,-29,0,2,3,-5,-18,-4,-1,40,-127,4,-4,-3,0,5,-18,-1,-30,10,6,16,-6,-12,2,23,-10,20,5,15,4,1,17,20,-12,25,42,5,11,7,25,-30,6,-7,6,17, 
  /* [4][0][][] */ 36,-31,10,11,18,28,23,-24,-31,3,-12,-17,0,10,3,16,22,-8,-78,2,-3,11,15,73,2,-28,5,48,10,-73,20,6,12,-34,32,-127,11,35,-3,19,-17,17,10,-22,-10,-19,8,5, 
  /* [5][0][][] */ 28,2,-19,57,0,-5,7,26,0,-2,39,8,2,52,2,2,-24,20,27,1,10,4,4,-25,0,-49,3,-19,-4,-10,5,4,67,-127,2,28,-14,-14,16,4,-89,58,18,-5,-4,-3,-100,-7, 
  /* [6][0][][] */ 25,-2,6,6,-14,-3,2,-13,-3,8,-1,8,-18,8,2,5,1,-12,127,8,7,9,14,-35,6,3,26,-11,-12,-2,-2,6,0,-11,29,-36,1,-43,68,13,1,-7,-5,7,-10,1,6,-10, 
  /* [7][0][][] */ -43,-16,-10,36,-6,75,-5,42,2,26,-9,127,79,-6,-5,-2,-6,-24,-5,-17,-28,-5,-18,70,-3,-39,-53,-33,-12,-15,-14,-9,2,1,-20,7,8,-58,94,-1,25,26,-61,-58,13,-9,6,2, 
  /* [8][0][][] */ -48,-47,0,2,-7,3,-2,34,-6,-65,2,39,48,6,5,4,-11,60,-32,4,-52,21,-6,-13,1,2,3,46,-9,115,-11,20,-5,3,-21,-127,-112,66,34,23,22,-5,106,-24,11,30,17,33, 
  /* [9][0][][] */ -24,7,-4,28,17,-33,-5,0,57,-40,9,57,-61,6,12,-1,-7,18,-38,-22,53,7,-13,-18,4,8,50,-23,10,13,15,-4,-4,18,76,-106,-8,-127,-96,5,-30,25,60,11,7,9,-18,-40, 
  /* [10][0][][] */ -22,-10,-35,-127,45,89,9,-12,0,33,24,12,50,-51,-33,18,34,-43,57,-32,34,-22,39,53,-50,-113,5,-35,49,35,43,-43,-27,-82,27,-5,18,-42,6,-35,-34,-62,-10,13,12,17,20,-38, 
  /* [11][0][][] */ -4,57,-6,63,34,-65,-81,-14,0,66,-18,0,-13,56,-3,-83,20,41,1,-13,-60,-104,9,1,15,-36,20,-15,54,-38,23,-90,44,-21,-39,-97,91,19,12,-127,-3,68,95,-79,-8,-59,29,34, 
  /* [12][0][][] */ 127,-3,-15,13,1,20,5,97,18,-10,-56,-25,-1,12,-10,-3,-6,10,-4,-7,3,0,2,18,1,14,-3,7,-2,13,-4,2,2,-65,-12,11,-18,-15,-31,0,-15,-78,4,-123,-54,-12,77,-4, 
  /* [13][0][][] */ 11,2,-1,6,8,-11,2,-1,1,5,5,23,-5,3,5,1,7,2,12,4,14,-11,9,-3,3,0,17,127,11,-3,8,-2,3,1,-38,22,9,-4,4,-15,-12,-5,2,7,-1,-2,-9,-13, 
  /* [14][0][][] */ 67,-24,49,-69,49,28,38,-101,-52,-57,-1,121,-70,-1,60,14,52,28,-50,70,21,14,73,-19,25,58,-32,-116,29,-34,59,52,-8,70,-127,-47,-39,48,85,10,-39,5,56,2,2,3,14,-26, 
  /* [15][0][][] */ -5,-54,-75,-33,59,24,77,-53,-6,17,-16,-33,84,20,-95,67,57,48,79,-82,-98,-23,57,-11,-93,41,27,51,54,48,48,-47,19,61,99,127,-17,-106,-12,-29,92,56,117,-48,-4,-32,-15,65, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.026777848601341248, 0.039482217282056808, 0.044993903487920761, 0.046765945851802826, 0.029882898554205894, 0.046081662178039551, 0.044867720454931259, 0.031091181561350822, 0.032404117286205292, 0.02577224001288414, 0.032296273857355118, 0.022059030830860138, 0.048599373549222946, 0.064777277410030365, 0.02005123533308506, 0.022366873919963837, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -67, 35457, -1248, 50382, 4464, 127792, -1664, 47358, 7251, 24526, 30375, 3657, -4573, 34344, -1565, -2757, -444, 3382, 2814, -1981, 459, -3392, 108, -22100, -4667, 39018, 134642, 99059, 3051, 2291, -2745, -66, 27035, -1382, 10381, -2249, 31240, 798, 50974, 2988, -1970, 57142, 2130, 1988, 46592, 32, 2905, 49988, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.3534195912070572e-05, 4.7535242629237473e-05, 0.00016309748752973974, 4.7477060434175655e-05, 0.00014308524259831756, 6.6291999246459454e-05, 0.0001604631106602028, 0.00012223489466123283, 5.8745721617015079e-05, 4.6305271098390222e-05, 5.7877918152371421e-05, 9.1312882432248443e-05, 5.2256353228585795e-05, 4.0733804780757055e-05, 0.00017295886937063187, 0.00019331405928824097, 0.00021460944844875485, 5.9313118981663138e-05, 0.00010556107736192644, 0.00014466569700744003, 8.4985076682642102e-05, 0.00016595517809037119, 0.00012369868636596948, 0.00014780841593164951, 8.9008470240514725e-05, 0.00011889083543792367, 3.9117530832299963e-05, 7.3115996201522648e-05, 0.00012381409760564566, 0.0001333313703071326, 0.0001296237314818427, 0.00013146967103239149, 5.4881453252164647e-05, 0.00019232784688938409, 3.6012555938214064e-05, 5.9705431340262294e-05, 0.00018619447655510157, 9.9102566309738904e-05, 0.00011042922415072098, 9.732285252539441e-05, 0.00015249829448293895, 0.0001045750905177556, 7.1663831477053463e-05, 9.933779074344784e-05, 2.9467273634509183e-05, 0.0001644118019612506, 9.1660309408325702e-05, 2.7452557333162986e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,97,70,53,-34,106,-64,59,-89,-80,47,51,-42,-71,-89,102,78,49,78,66,-73,-83,50,-32,-40,-64,-64,-67,61,-63,-114,-13,41,68,64,-65,53,-50,-23,50,-74,58,62,-94,11,75,-34, 82,-95,127,85,-77,-68,-56,-84,96,-102,-63,73,79,-109,-95,92,-38,96,83,127,85,-115,53,71,-51,-77,-69,-80,56,78,-30,-127,-86,79,81,83,-82,83,-83,-16,76,-94,82,89,-74,-127,93,-104, 35,-45,69,38,18,-41,-47,-39,42,-31,5,33,29,-79,-54,-1,-54,36,35,69,33,-54,31,26,-28,-45,-44,-23,31,30,87,-90,-85,44,35,34,-30,39,-37,-11,40,-40,34,43,-5,-8,37,-73, 
  /* [0][1][][] */ 92,-111,-41,93,56,-82,127,-89,86,-113,-72,81,84,-111,-13,-127,127,107,74,-38,84,108,-127,73,73,-75,-93,-99,-127,86,-70,-8,-88,70,106,96,-85,79,-80,89,85,-100,87,91,-88,108,93,-92, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-22,98,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,53,127,-29,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-77,-33,66,37,-62,-48,-62,56,-42,-60,58,49,-53,-16,11,-62,50,58,-30,57,64,50,64,65,-65,-62,-45,36,55,127,15,-62,69,48,49,-49,60,-59,56,60,-58,53,62,-62,-67,59,-57, 
  /* [0][2][][] */ 45,-50,-47,50,27,-53,64,-42,41,-73,-5,39,55,-72,83,-79,73,50,34,-31,26,-11,-76,30,-24,-43,-48,-48,-75,32,-41,92,-73,36,48,42,-26,37,-42,-87,47,-50,40,45,-23,16,40,-74, 72,-73,-49,79,-57,-63,-71,-67,51,-78,-66,61,74,-48,127,33,-47,59,62,-43,54,-18,41,66,-49,-66,-77,-61,31,61,-23,119,-55,64,57,57,-49,62,-66,-106,69,-67,60,62,-86,50,63,-53, 41,-39,-27,46,28,-20,-17,-34,15,-27,-52,28,31,5,67,24,-36,22,28,-32,27,0,39,41,-25,-29,-48,-23,34,33,61,67,0,33,15,22,-22,29,-29,-56,28,-32,25,30,-64,9,30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0039752032607793808, 0.0020202477462589741, 0.0069316430017352104, 0.00201777508482337, 0.0060811229050159454, 0.0028174100443720818, 0.0068196821957826614, 0.0051949829794466496, 0.0024966930504888296, 0.0019679740071296692, 0.0024598115123808384, 0.0038807974196970463, 0.0022208949085325003, 0.0017311866395175457, 0.0073507516644895077, 0.0082158474251627922, 0.0091209011152386665, 0.0025208075530827045, 0.0044863456860184669, 0.0061482922174036503, 0.0036118656862527132, 0.0070530949160456657, 0.0052571939304471016, 0.0062818573787808418, 0.0037828600034117699, 0.0050528603605926037, 0.0016624950803816319, 0.0031074297148734331, 0.005262098740786314, 0.0056665833108127117, 0.0055090081878006458, 0.0055874609388411045, 0.0023324617650359869, 0.0081739332526922226, 0.0015305336564779282, 0.0025374807883054018, 0.0079132653772830963, 0.0042118588462471962, 0.0046932417899370193, 0.0041362210176885128, 0.0064811771735548973, 0.0044444412924349308, 0.0030457128304988146, 0.0042218561284244061, 0.0012523591285571456, 0.0069875014014542103, 0.0038955630734562874, 0.001166733680292964, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 658, 875, 2264, 630, 10131, 16189, 2337, -108, -828, -615, 1278, 1041, 3279, 1267, 25709, 2720, 2106, -1138, -272, 3448, -1769, 10567, 9807, 10822, 5840, 369, 3932, 3908, 9024, -498, 9421, 5832, 604, -242, 4777, 3273, -1718, 290, -753, 5012, 1154, -596, -958, 32, 1100, 3079, 887, 1035, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00034793888335116208, 0.0008175800321623683, 0.00024363813281524926, 0.00025531675782985985, 0.00021652693976648152, 0.00025047795497812331, 0.00047060661017894745, 0.00019802415044978261, 0.00034650435554794967, 0.00073517049895599484, 0.00079544493928551674, 0.00026719336165115237, 0.00038629386108368635, 0.00060422316892072558, 0.00014044706767890602, 0.00045903827412985265, 0.00023834996682126075, 0.00034178985515609384, 0.00027119062724523246, 0.00026789336698129773, 0.00034469511592760682, 0.00024327699793502688, 0.00037694972706958652, 0.00014483820996247232, 0.00027439335826784372, 0.0002674990682862699, 0.0017715984722599387, 0.00047883432125672698, 0.00019346486078575253, 0.00045036445953883231, 0.00027629331452772021, 0.00020552799105644226, 0.00065146374981850386, 0.00022558464843314141, 0.00077824899926781654, 0.00055235868785530329, 0.00080267409794032574, 0.00037675388739444315, 0.00021306646522134542, 0.00037242923281155527, 0.00013806339120492339, 0.00023767705715727061, 0.00030464987503364682, 0.00024224318622145802, 0.0017586905742064118, 0.00044854337465949357, 0.00027300036163069308, 0.0011401990195736289, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,3,-5,72,-32,41,25,-27, 
  /* [1][0][][] */ 24,71,46,19,18,-38,104,127, 
  /* [2][0][][] */ -36,2,2,-4,-127,-8,7,-2, 
  /* [3][0][][] */ 96,1,-14,-119,-127,19,35,-20, 
  /* [4][0][][] */ -127,50,-13,-7,74,-19,47,19, 
  /* [5][0][][] */ -102,-24,20,-8,-127,10,6,78, 
  /* [6][0][][] */ -20,-127,28,-14,17,0,-5,36, 
  /* [7][0][][] */ -67,-7,7,105,127,-35,-36,5, 
  /* [8][0][][] */ 76,1,3,-127,-1,-25,-42,-33, 
  /* [9][0][][] */ -5,-127,-11,-2,7,89,-53,91, 
  /* [10][0][][] */ -93,-7,-6,23,-127,70,63,-18, 
  /* [11][0][][] */ 113,8,42,13,-58,-46,-33,-127, 
  /* [12][0][][] */ -1,11,45,-10,11,-79,127,66, 
  /* [13][0][][] */ 62,-25,-6,-16,124,127,117,-42, 
  /* [14][0][][] */ 127,47,-7,18,-89,-25,-20,-13, 
  /* [15][0][][] */ -16,-127,17,-16,2,6,0,33, 
  /* [16][0][][] */ -54,-15,7,-2,-127,1,12,2, 
  /* [17][0][][] */ -32,110,-124,3,11,-127,108,-92, 
  /* [18][0][][] */ 127,-25,-43,11,-60,28,9,96, 
  /* [19][0][][] */ 127,-47,-22,-9,46,5,28,4, 
  /* [20][0][][] */ 127,24,-18,115,-4,36,-5,-53, 
  /* [21][0][][] */ 7,29,-58,6,-26,87,-127,-80, 
  /* [22][0][][] */ -127,18,27,-5,-31,3,-51,-24, 
  /* [23][0][][] */ -43,-60,0,21,-127,65,80,-14, 
  /* [24][0][][] */ 127,-11,-9,-6,-99,-8,-3,13, 
  /* [25][0][][] */ 24,-12,1,-24,127,53,52,-33, 
  /* [26][0][][] */ 2,-95,9,-38,3,-127,82,-54, 
  /* [27][0][][] */ -17,-127,27,-13,-4,-55,31,-9, 
  /* [28][0][][] */ -88,37,-23,8,-16,-27,127,91, 
  /* [29][0][][] */ -14,44,13,4,1,44,-104,-127, 
  /* [30][0][][] */ 127,-25,-2,7,-83,-1,-39,-13, 
  /* [31][0][][] */ -4,-23,69,-18,16,-121,127,64, 
  /* [32][0][][] */ -70,23,9,6,-127,-98,-94,48, 
  /* [33][0][][] */ -26,10,0,24,-127,-60,-49,21, 
  /* [34][0][][] */ 13,-127,54,-8,-8,88,-74,60, 
  /* [35][0][][] */ -23,-52,-127,-9,-2,-72,47,-53, 
  /* [36][0][][] */ 2,127,56,9,-9,11,-21,-36, 
  /* [37][0][][] */ -127,36,37,-17,55,-33,-10,-111, 
  /* [38][0][][] */ -127,-11,-49,-13,41,25,32,104, 
  /* [39][0][][] */ -2,-32,70,-7,12,-78,127,92, 
  /* [40][0][][] */ -33,-21,-10,-41,-127,107,120,-28, 
  /* [41][0][][] */ -127,48,6,-71,-87,-91,-91,50, 
  /* [42][0][][] */ -46,-127,-107,-6,-9,75,-127,-84, 
  /* [43][0][][] */ -72,7,-17,-127,99,65,63,0, 
  /* [44][0][][] */ 127,-9,12,-91,31,-32,-12,43, 
  /* [45][0][][] */ -26,-127,-9,-14,-5,-70,78,7, 
  /* [46][0][][] */ 108,-5,-5,-23,127,-38,-28,5, 
  /* [47][0][][] */ 127,-5,-7,112,-9,26,10,-47, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070999178569763899, 0.0016683249268680811, 0.00049715937348082662, 0.00052099034655839205, 0.00044183724094182253, 0.00051111646462231874, 0.00096030323766171932, 0.00040408110362477601, 0.00070706458063796163, 0.0015001629944890738, 0.0016231568297371268, 0.00054522533901035786, 0.00078825763193890452, 0.0012329565361142159, 0.0002865913265850395, 0.00093669729540124536, 0.00048636854626238346, 0.0006974443094804883, 0.00055338203674182296, 0.00054665375500917435, 0.00070337270153686404, 0.00049642246449366212, 0.00076919031562283635, 0.00029555175569839776, 0.00055991741828620434, 0.00054584915051236749, 0.0036150612868368626, 0.00097709242254495621, 0.00039477756945416331, 0.00091899780090898275, 0.00056379439774900675, 0.00041939315269701183, 0.0013293538941070437, 0.00046032006503082812, 0.0015880675055086613, 0.0011271235998719931, 0.0016379083972424269, 0.00076879066182300448, 0.00043477592407725751, 0.00075996597297489643, 0.00028172729071229696, 0.00048499542754143476, 0.000621657760348171, 0.00049431290244683623, 0.0035887218546122313, 0.00091528176562860608, 0.00055707490537315607, 0.002326649846509099, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -42797, 27580, -13430, -12746, 20922, -1100, 29489, 44537, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00043953311978839338, 0.00074944575317203999, 0.0014992827782407403, 0.0016336377011612058, 0.00077765865717083216, 0.00056844670325517654, 0.00074257160304114223, 0.0010821250034496188, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -55,-10,-34,16,6,-23,-3,6,-118,127,-40,118,123,9,75,-19,-6,-31,8,2,-7,-7,-21,-36,25,-98,9,67,-10,13,19,-40,-6,-82,107,23,-3,-4,-3,-15,117,-8,51,-25,-34,29,-17,-18, 
  /* [1][0][][] */ -3,35,127,7,-3,-27,4,-84,32,-4,25,3,-19,7,-5,-120,12,-58,10,2,-24,34,25,-36,-16,-9,13,2,14,-8,13,0,-4,10,14,13,-14,-32,62,-58,10,40,-13,27,-15,10,24,-1, 
  /* [2][0][][] */ 6,-52,15,-45,32,28,-5,-31,5,0,-4,16,-11,58,6,-2,-38,127,-24,-35,-17,24,-41,-8,122,2,0,-7,-29,-8,1,-41,-7,-15,1,12,-10,-3,-16,6,16,-18,-18,-1,3,25,-27,-41, 
  /* [3][0][][] */ 0,-86,-2,8,4,-7,-12,-1,-8,-12,19,22,14,-9,49,0,-9,-22,2,21,-6,21,-22,3,6,52,1,7,-5,5,127,1,12,7,-4,-3,-20,-14,-6,14,-9,6,-10,26,-9,2,-1,35, 
  /* [4][0][][] */ -99,5,-1,-1,0,-37,0,5,41,-38,19,-18,-34,0,-10,-8,0,5,2,25,7,-28,14,1,-7,47,5,110,1,-2,-8,-32,-2,-127,-33,12,1,-8,-1,0,-52,-8,-11,15,-58,4,5,5, 
  /* [5][0][][] */ -21,24,19,4,-49,9,-1,44,26,2,14,4,-2,-45,5,33,0,-87,20,2,42,-38,7,40,9,7,-78,-43,-36,-34,18,1,-1,-68,-3,-67,64,12,-46,11,23,-42,2,5,127,-10,-43,-4, 
  /* [6][0][][] */ -28,-23,-13,-4,38,-27,-1,-24,-11,-2,33,-17,-14,40,-2,-58,-4,4,0,-24,-35,47,-9,-79,2,-8,-54,-66,22,43,-16,4,3,-55,-16,65,-66,-48,13,-53,-11,6,19,41,127,-29,42,13, 
  /* [7][0][][] */ 14,32,-74,24,-24,13,5,56,-6,-2,59,-33,11,-29,-8,-4,-18,-127,41,-40,56,38,15,-56,18,-21,21,2,-20,31,-14,4,3,34,-2,-25,-9,-55,-41,-65,-16,-27,40,59,-28,-17,-5,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.018680157139897346, 0.031851444393396378, 0.063719518482685089, 0.069429598748683929, 0.033050492405891418, 0.024158984422683716, 0.0315592922270298, 0.045990310609340668, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52504, -200, 7994, -355, 5682, -5992, 1406, 19234, 1560, 29508, -2286, 18547, -6302, -932, 24625, 967, 405, 14298, 34329, 11631, 149, -288, 218, 9904, -8271, 23416, 45895, 34654, 3266, 157, -1345, 1424, 710, 17476, -6837, 13538, -10742, 16071, -22405, 98849, 21637, 23068, 9981, -1605, 16244, 3431, 1018, 169, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00034537501051090658, 0.00027786457212641835, 0.00019415804126765579, 0.00028127251425758004, 0.00015157449524849653, 9.8595744930207729e-05, 0.00083223392721265554, 0.00018050766084343195, 0.00012404652079567313, 0.00016404806228820235, 9.8927317594643682e-05, 0.00023138560936786234, 0.00025804794859141111, 0.00021344456763472408, 0.00010064339585369453, 0.0015639686025679111, 0.00024754265905357897, 0.00028866654611192644, 6.9856403570156544e-05, 0.0001730237272568047, 0.00018382292182650417, 0.00023027078714221716, 0.00017403396486770362, 0.00021862624271307141, 0.00015551099204458296, 0.00015877129044383764, 0.00062678859103471041, 9.9039243650622666e-05, 0.0001962758251465857, 0.0049311062321066856, 9.5478208095300943e-05, 0.00018081098096445203, 0.001216131029650569, 0.0001681131252553314, 0.00019835741841234267, 0.0001834753347793594, 0.00045790791045874357, 0.00015291234012693167, 0.00027787568978965282, 2.3874605176388286e-05, 0.00014783698134124279, 7.2675866249483079e-05, 0.00016192680050153285, 0.0001693031081231311, 0.00014791110879741609, 0.00011173939128639176, 0.00028411377570591867, 0.00012215824972372502, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,81,-1,28,16,8,9,7,-9,-9,-44,8,-2,8,-23,-114,-7,-22,127,-10,-3,7,-5,9,-5,5,15,99,20,28,38,-28,2,35,-2,2,18,-67,-8,-8,17,2,-6,-10, 127,9,15,-127,28,86,11,11,125,127,7,43,-51,-24,5,8,127,-56,-60,-56,-102,25,-109,14,17,71,-32,-84,23,21,10,-125,5,-62,127,9,-39,-46,-6,115,-79,-98,-30,3,-34,-9,-127,23, -32,-3,8,15,0,65,4,18,28,8,-14,31,-15,-3,16,4,-103,29,-3,78,-32,-12,-18,-6,-4,-59,-3,29,-16,5,4,-22,8,-24,16,-19,0,48,41,-13,50,38,-15,11,-43,3,-1,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-27,35,-16,9,9,-12,53,-7,-1,18,-33,0,-50,-59,-86,10,-74,-124,-18,5,99,-14,-127,-8,33,12,-109,17,-53,-3,127,-3,59,-42,41,-62,-127,39,-88,-45,-14,-12,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,93,127,-127,127,-29,-42,127,-127,127,127,127,-80,127,127,127,-121,103,107, 54,5,49,-13,6,-61,44,18,-23,14,-105,-8,0,-40,127,4,63,-65,-71,85,13,-46,11,-34,2,6,-38,68,20,40,1,2,32,-45,8,67,-5,65,68,-10,-81,8,-84,-31,27,-16,-11,5, 
  /* [0][2][][] */ -53,-7,26,-16,7,35,-37,22,9,-24,12,32,6,-6,-38,18,5,22,-14,105,6,-32,-16,-13,-3,22,0,51,-10,3,46,-32,-18,-44,-32,-40,-1,31,8,-22,9,-5,42,-37,-36,18,-11,17, 68,126,75,21,16,-20,124,35,19,-3,43,26,-6,-1,-90,25,-58,-56,-36,123,-38,48,12,19,32,-63,-40,29,76,0,127,21,85,-27,7,-36,-25,-17,-13,118,-27,-13,-40,45,20,-32,8,-127, -42,-4,7,-3,5,-5,-61,8,-18,-11,-40,-40,19,-9,-9,11,33,24,-8,-127,23,-10,5,-9,-6,10,-10,-55,-14,8,6,8,-20,87,-37,-23,-4,36,25,-61,4,8,-37,7,-43,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014678438194096088, 0.011809243820607662, 0.0082517163828015327, 0.011954082176089287, 0.0064419158734381199, 0.0041903192177414894, 0.035369940102100372, 0.0076715755276381969, 0.0052719768136739731, 0.006972042378038168, 0.0042044110596179962, 0.0098338881507515907, 0.01096703764051199, 0.0090713938698172569, 0.0042773443274199963, 0.066468663513660431, 0.010520562529563904, 0.012268328107893467, 0.0029688971117138863, 0.0073535083793103695, 0.0078124739229679108, 0.0097865080460906029, 0.0073964432813227177, 0.0092916153371334076, 0.0066092167980968952, 0.0067477794364094734, 0.026638515293598175, 0.0042091677896678448, 0.0083417221903800964, 0.20957201719284058, 0.0040578236803412437, 0.0076844664290547371, 0.051685567945241928, 0.0071448078379034996, 0.00843019038438797, 0.0077977017499506474, 0.019461086019873619, 0.0064987745136022568, 0.011809716001152992, 0.0010146707063540816, 0.0062830713577568531, 0.0030887241009622812, 0.0068818889558315277, 0.0071953819133341312, 0.0062862220220267773, 0.0047489241696894169, 0.012074834667146206, 0.0051917252130806446, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 58354, 8285, 7064, 8621, 1711, 11580, -1988, -300, 925, 2396, 3510, 326, 1778, -899, 822, -2312, 5420, 12245, -289, 32718, 4565, 3103, 8552, -564, 3941, 5680, 28692, 10756, -74, -2953, 128, 2547, -2524, 10839, 3458, 8305, 7909, 4985, 24922, 1936, -983, 3114, 1226, 4199, 5023, 2323, -1417, 2843, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.3950468504335731e-05, 0.00027415924705564976, 0.00021833927894476801, 0.0003719078958965838, 0.0013074974995106459, 0.0004356378922238946, 0.00096569227753207088, 0.0010031342972069979, 0.00060155038954690099, 0.00057066779118031263, 0.00064386596204712987, 0.00044497373164631426, 0.00055128452368080616, 0.00051087001338601112, 0.00052306015277281404, 0.0015708962455391884, 0.00030095709371380508, 0.00034650531597435474, 0.001773722586221993, 8.2890379417221993e-05, 0.0002684440987650305, 0.00031827029306441545, 0.00046404707245528698, 0.00090903957607224584, 0.00031013265834189951, 0.00020676554413512349, 0.00014093154459260404, 0.00033946274197660387, 0.00086095818551257253, 0.00088755454635247588, 0.0004881757777184248, 0.00033038947731256485, 0.00079107022611424327, 0.00020329549442976713, 0.00031057294108904898, 0.00022363668540492654, 0.00046161445789039135, 0.00027122415485791862, 9.4131471996661276e-05, 0.0023401291109621525, 0.000593135308008641, 0.00088861124822869897, 0.00040318857645615935, 0.00035253344685770571, 0.0002374657487962395, 0.00046834110980853438, 0.00081087584840133786, 0.00093449745327234268, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 70,22,2,-9,127,27,-50,-18, 
  /* [1][0][][] */ -9,-6,4,127,8,-6,5,19, 
  /* [2][0][][] */ 31,-127,-19,40,-3,-69,82,11, 
  /* [3][0][][] */ 127,-26,-9,19,-14,-33,26,5, 
  /* [4][0][][] */ 10,-46,127,-11,-7,-50,11,-98, 
  /* [5][0][][] */ 65,1,2,-5,127,12,-6,4, 
  /* [6][0][][] */ -13,89,-17,127,25,48,-67,-52, 
  /* [7][0][][] */ -8,127,-6,3,0,-12,13,-4, 
  /* [8][0][][] */ 127,52,-5,4,-48,-18,-3,-40, 
  /* [9][0][][] */ -127,13,7,19,49,13,-10,0, 
  /* [10][0][][] */ -75,-9,15,127,40,26,-13,0, 
  /* [11][0][][] */ -127,3,12,-62,32,9,-24,-46, 
  /* [12][0][][] */ 127,20,5,13,-45,-14,6,-40, 
  /* [13][0][][] */ -13,78,-127,-10,5,101,-72,75, 
  /* [14][0][][] */ -47,-27,-9,127,19,12,-10,-25, 
  /* [15][0][][] */ -3,127,1,-4,-2,-15,9,-50, 
  /* [16][0][][] */ -17,-126,-21,5,-7,-120,127,-34, 
  /* [17][0][][] */ 18,127,1,-12,6,77,-89,-17, 
  /* [18][0][][] */ -9,46,-127,-3,9,60,-35,61, 
  /* [19][0][][] */ -79,22,3,0,-127,7,25,24, 
  /* [20][0][][] */ -127,-29,-5,-5,79,-26,39,2, 
  /* [21][0][][] */ -62,-5,-5,0,-127,-2,16,6, 
  /* [22][0][][] */ -127,-22,6,-4,81,-14,31,45, 
  /* [23][0][][] */ -19,-24,-8,-9,-1,79,-127,-87, 
  /* [24][0][][] */ -8,42,-127,2,8,50,-21,75, 
  /* [25][0][][] */ 109,-43,-3,127,-83,-9,9,-55, 
  /* [26][0][][] */ 2,-18,-3,0,-8,122,127,-30, 
  /* [27][0][][] */ 62,-10,-7,14,127,30,32,-21, 
  /* [28][0][][] */ 2,127,-70,9,1,79,-28,125, 
  /* [29][0][][] */ -12,14,-2,-7,-2,90,-127,-88, 
  /* [30][0][][] */ 4,-6,-1,-127,-4,0,-3,-14, 
  /* [31][0][][] */ -61,3,3,6,-127,5,14,5, 
  /* [32][0][][] */ -5,39,10,-127,1,37,-91,-113, 
  /* [33][0][][] */ -61,-7,-4,3,-127,42,42,-1, 
  /* [34][0][][] */ -127,76,11,23,34,-20,5,6, 
  /* [35][0][][] */ -27,127,-9,-2,4,-106,79,-29, 
  /* [36][0][][] */ -6,51,8,-22,1,97,-127,-33, 
  /* [37][0][][] */ 36,-69,-7,26,20,-127,125,-17, 
  /* [38][0][][] */ 7,-127,3,0,12,49,-47,66, 
  /* [39][0][][] */ 3,-127,-12,-9,-1,-12,-49,-96, 
  /* [40][0][][] */ 120,43,-2,-9,-54,80,-127,-98, 
  /* [41][0][][] */ 11,-127,17,-2,-5,80,-57,127, 
  /* [42][0][][] */ 53,-9,-2,-127,-45,-2,4,-27, 
  /* [43][0][][] */ -99,-27,13,-127,65,15,-21,-9, 
  /* [44][0][][] */ -4,-28,-4,16,-28,101,127,-8, 
  /* [45][0][][] */ -127,-39,-3,-6,20,14,21,-20, 
  /* [46][0][][] */ 13,72,127,-1,-3,9,16,27, 
  /* [47][0][][] */ -2,3,8,127,11,4,1,0, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00019876527949236333, 0.0007368896622210741, 0.00058685586554929614, 0.00099962006788700819, 0.003514312906190753, 0.0011709146201610565, 0.0025956034660339355, 0.0026962407864630222, 0.0016168568981811404, 0.0015338500961661339, 0.0017305933870375156, 0.0011960075935348868, 0.0014817514456808567, 0.0013731247745454311, 0.0014058895176276565, 0.0042222803458571434, 0.00080891733523458242, 0.00093134265625849366, 0.0047674402594566345, 0.00022279411496128887, 0.0007215284276753664, 0.00085545209003612399, 0.0012472732923924923, 0.0024433312937617302, 0.00083357957191765308, 0.00055574777070432901, 0.00037879808223806322, 0.00091241346672177315, 0.0023140974808484316, 0.0023855834733694792, 0.0013121267547830939, 0.00088802620302885771, 0.0021262513473629951, 0.00054642092436552048, 0.00083476299187168479, 0.00060109433252364397, 0.0012407348258420825, 0.00072900066152215004, 0.00025300809647887945, 0.0062898369506001472, 0.0015942386817187071, 0.0023884237743914127, 0.0010836968431249261, 0.00094754516612738371, 0.00063826428959146142, 0.0012588148238137364, 0.0021794852800667286, 0.0025117574259638786, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -3781, -26043, 23962, 22784, 2377, 28, 37620, 10601, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0015317037468776107, 0.00067222642246633768, 0.0013398979790508747, 0.0013620196841657162, 0.0010192274348810315, 0.0011868554865941405, 0.00089743727585300803, 0.00064914330141618848, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -12,-2,9,-92,10,26,6,5,2,5,3,-6,97,0,1,7,0,-10,-4,2,77,-5,-1,4,28,34,11,12,5,5,4,-127,10,6,0,2,-29,2,-17,33,9,-26,-8,3,2,-3,5,3, 
  /* [1][0][][] */ -34,-9,-4,-4,43,28,-27,76,20,6,-32,-23,14,0,20,37,0,41,18,-47,-1,21,127,21,-27,-4,54,2,20,-3,19,-11,12,-6,-9,-21,5,-54,8,5,-7,-7,-78,-7,-33,9,-50,-97, 
  /* [2][0][][] */ -56,16,-1,12,43,-11,28,27,-11,56,10,-4,1,0,6,51,0,11,-127,23,-2,11,7,-17,-32,2,39,4,7,28,21,1,5,-6,-13,-15,11,5,6,1,35,-9,-32,0,22,-54,22,12, 
  /* [3][0][][] */ 2,0,-2,9,-6,28,0,-5,67,18,-1,-4,27,0,-29,-8,0,-1,-9,3,-2,-2,4,-19,-11,-8,-9,-2,-8,-4,-1,-8,-50,45,-54,0,8,-1,2,-127,1,6,3,-53,0,-3,0,9, 
  /* [4][0][][] */ 1,-3,79,36,2,-21,0,-2,2,-2,-2,-9,-80,0,-12,4,0,10,5,-1,64,5,3,-3,-16,31,-3,46,-7,-3,0,98,4,5,-1,-3,16,-11,-9,-17,-5,-127,4,3,0,-2,0,1, 
  /* [5][0][][] */ -5,44,4,-8,4,46,25,13,-19,29,7,55,27,0,-127,-2,0,14,-39,21,-10,10,-12,42,-19,-2,29,-5,-12,21,24,-17,50,29,-40,-6,3,18,-47,16,25,-12,-11,28,21,61,21,22, 
  /* [6][0][][] */ -24,-54,2,7,39,-45,-20,8,28,-26,-13,88,-3,0,-127,39,0,-9,50,-19,-5,1,24,-34,30,-1,-5,-11,46,-11,-11,-3,93,-33,28,-1,-4,-10,-69,-22,-14,-15,-4,-25,-20,-83,-16,-26, 
  /* [7][0][][] */ -113,-22,-13,8,127,18,66,27,13,5,27,-33,-28,0,86,103,0,10,0,59,-13,-3,-27,44,18,6,45,4,50,64,55,-9,-10,-16,-21,-25,6,23,26,34,73,4,-26,-11,58,4,63,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.065097406506538391, 0.028569621965289116, 0.056945662945508957, 0.057885833084583282, 0.043317165225744247, 0.050441358238458633, 0.038141082972288132, 0.027588590979576111, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 67699, 54822, 62055, 42611, -113, 14004, 2748, 21768, 25621, 22454, 28836, -2113, -47341, -127, 43218, 501, -204, 25931, 3269, 1541, -15469, 4998, 53248, 33186, -21438, 33971, 28566, 25625, -2596, 15067, -7650, -50970, 12069, 117473, 25895, 1456, 52766, -286, 153744, -28893, 14593, -27087, 4340, 106478, -1659, 69926, 1290, -22660, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.8454471551813185e-05, 7.2068098234012723e-05, 0.00014464990817941725, 0.0001247642794623971, 0.00015117276052478701, 0.0001739480794640258, 0.00013054865121375769, 7.3798284574877471e-05, 8.9249093434773386e-05, 3.5003115044673905e-05, 0.00010481796925887465, 2.6727122531156056e-05, 0.00018840294796973467, 0.005541567225009203, 5.9591395256575197e-05, 0.00019124452956020832, 0.0027484172023832798, 2.6027935746242292e-05, 8.0112564319279045e-05, 0.00018564905622042716, 0.00011041205289075151, 0.00019614120537880808, 0.00010583265975583345, 4.1067745769396424e-05, 9.0363930212333798e-05, 8.4643092122860253e-05, 4.2936244426527992e-05, 4.2848503653658554e-05, 0.0003129923134110868, 6.7668159317690879e-05, 5.7136461691698059e-05, 0.00020509651221800596, 0.00020289918757043779, 8.6047939475974999e-06, 9.502963803242892e-05, 0.0002149503561668098, 1.6964038877631538e-05, 0.00044088930008001626, 3.1011473765829578e-05, 0.00010068835399579257, 8.1462290836498141e-05, 0.00019019715546164662, 8.9861401647794992e-05, 8.9915929493145086e-06, 0.0001578527590027079, 8.5037434473633766e-05, 0.00020489368762355298, 0.00014472530165221542, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-16,7,-39,-79,-68,-27,-50,9,66,34,-71,114,-43,-113,-84,37,-6,-1,-71,-111,-79,-35,-125,-63,-20,70,15,95,26,-127,-88,-7,54,18,47,-127,78,-76,-14,105,-109,-3,-35,-87,106, 75,12,-28,-28,58,-127,-127,-81,61,-76,-116,108,37,-82,-1,62,-52,-114,59,7,11,-112,-127,-70,-5,-127,-119,-39,-54,21,-57,54,28,-127,65,84,13,72,-92,127,-127,6,124,-127,2,-23,-127,94, -32,43,7,-5,-65,-109,-58,-17,87,-8,-127,38,8,-71,-101,-11,-127,-25,28,12,-15,-75,-36,-24,-11,-29,-57,-11,-10,18,-24,9,107,-86,70,32,14,36,-5,16,-78,3,6,-79,-17,5,-55,14, 
  /* [0][1][][] */ -85,-127,-44,-44,-10,54,98,-105,-26,-109,-21,113,90,-64,27,-96,-121,-94,90,-77,41,-88,-102,-127,42,-118,-78,-38,127,-60,127,84,-43,-84,-14,85,-35,-77,-107,90,42,59,105,-109,-91,-117,82,119, 127,-82,-127,-127,127,41,93,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-120,127,-98,-127,-127,-119,-127,-71,127,28,-111,127,127,-68,-127,-97,90,61,127,127,-118,-112,-127,125,127, -53,31,-61,-85,-120,-23,31,-37,127,-20,-76,35,56,-70,-25,-43,-37,-29,55,-71,56,-81,-39,-23,48,-4,-45,-60,15,-89,-35,20,29,-98,118,23,-36,-62,1,-14,37,53,11,-75,-57,-37,65,36, 
  /* [0][2][][] */ -61,-106,-33,-34,0,35,-5,-35,-38,-59,-17,59,77,-127,-127,-64,-43,-19,64,75,51,-33,-13,-60,33,-54,-10,-58,76,29,77,63,108,-26,-38,-9,-95,35,-18,30,9,37,14,-56,96,-77,4,30, 87,-74,-88,-85,82,19,7,-47,48,-70,-33,55,83,-26,16,92,-24,-31,77,118,81,-53,-18,-58,93,-67,-18,-98,-50,40,-45,111,-18,-49,67,6,-127,50,-15,-1,10,32,14,-67,127,-100,-12,40, -28,29,-41,-37,-79,-19,22,-11,59,-5,-12,31,32,-43,111,-28,-93,-4,31,60,73,-28,-2,-2,43,2,-4,-63,-13,29,-19,39,-90,-43,65,3,-20,21,27,-38,7,35,-6,-15,63,-34,-4,17, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0037593150045722723, 0.0030628941021859646, 0.0061476207338273525, 0.0053024818189442158, 0.0064248424023389816, 0.0073927929624915123, 0.0055483174510300159, 0.003136427141726017, 0.0037930863909423351, 0.001487632398493588, 0.0044547636061906815, 0.0011359027121216059, 0.0080071249976754189, 0.23551659286022186, 0.0025326341856271029, 0.0081278923898935318, 0.1168077290058136, 0.0011061872355639935, 0.0034047840163111687, 0.0078900847584009171, 0.0046925120986998081, 0.0083360010758042336, 0.0044978880323469639, 0.0017453791806474328, 0.0038404669612646103, 0.003597331466153264, 0.0018247903790324926, 0.0018210613634437323, 0.013302173465490341, 0.0028758968692272902, 0.0024282995145767927, 0.0087166018784046173, 0.0086232153698801994, 0.0003657037450466305, 0.0040387595072388649, 0.0091353897005319595, 0.00072097167139872909, 0.018737794831395149, 0.001317987684160471, 0.0042792549356818199, 0.0034621474333107471, 0.0080833788961172104, 0.0038191096391528845, 0.00038214269443415105, 0.006708742119371891, 0.0036140908487141132, 0.0087079815566539764, 0.0061508254148066044, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 4170, 77, 10247, 6444, 7243, 6693, 10678, -41, 33, -327, 2485, 448, 13013, -83512552, 2936, 17787, -67415664, -115, -481, 11713, 3866, -19, 8, 441, 3727, -846, 71, 729, 4327, 1791, 2543, 14413, 4068, 321, 307, -2154, 379, 3926, -145, 12597, 2333, 12802, -342, -89, 15273, 195, 9717, 4727, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00050163426203653216, 0.00047331105452030897, 0.00030765912379138172, 0.0002923669817391783, 0.00027580905589275062, 0.0003098633314948529, 0.00035870660212822258, 0.0013399999588727951, 0.00039912055945023894, 0.0023014659527689219, 0.00059688661713153124, 0.0018932892708107829, 0.00017080728139262646, 1.9420274277592853e-09, 0.00089194654719904065, 0.00018487486522644758, 1.9420274277592853e-09, 0.0062554571777582169, 0.00039160656160674989, 0.0003303453850094229, 0.00027928422787226737, 0.0044593093916773796, 0.00031315421801991761, 0.0014359932392835617, 0.0010155861964449286, 0.00065541459480300546, 0.0022008940577507019, 0.0017010301817208529, 0.00025912415003404021, 0.0016370608936995268, 0.0011613143142312765, 0.00016248939209617674, 0.00018885383906308562, 0.010082711465656757, 0.00047314362018369138, 0.00055758230155333877, 0.0040236711502075195, 0.00032707661739550531, 0.0025580560322850943, 0.00027496067923493683, 0.0012108894297853112, 0.00017263104382436723, 0.00047669527702964842, 0.0093913180753588676, 0.00032983405981212854, 0.0004875538288615644, 0.00028737462707795203, 0.00018657049804460257, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 14,-127,46,-41,27,-18,-48,24, 
  /* [1][0][][] */ 69,66,-23,-99,12,-14,-77,127, 
  /* [2][0][][] */ 30,5,-47,127,50,125,46,91, 
  /* [3][0][][] */ 80,75,-85,127,-92,-8,-9,12, 
  /* [4][0][][] */ -33,-106,78,7,7,34,-48,-127, 
  /* [5][0][][] */ 20,8,-34,42,2,-33,38,127, 
  /* [6][0][][] */ 62,-18,-127,-94,115,16,56,-41, 
  /* [7][0][][] */ 127,16,20,-23,28,-9,87,-60, 
  /* [8][0][][] */ 21,-98,12,109,1,26,-11,-127, 
  /* [9][0][][] */ 102,-127,11,0,-10,13,-113,88, 
  /* [10][0][][] */ -127,-40,-120,21,-8,8,-111,60, 
  /* [11][0][][] */ -22,-42,-8,-103,-127,-34,47,-17, 
  /* [12][0][][] */ 18,9,-38,67,-76,-22,59,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -7,-33,-5,9,44,127,45,44, 
  /* [15][0][][] */ 40,1,20,-127,64,41,-57,69, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,26,127,23,-30,-12,30,30, 
  /* [18][0][][] */ 90,-127,25,33,-5,24,-122,2, 
  /* [19][0][][] */ -127,-11,22,70,-51,-60,-93,65, 
  /* [20][0][][] */ 33,34,-42,111,-21,-127,-5,62, 
  /* [21][0][][] */ 55,22,127,11,-15,-12,68,9, 
  /* [22][0][][] */ -79,-15,-127,1,4,9,-102,4, 
  /* [23][0][][] */ -103,121,-21,-22,12,-15,127,-77, 
  /* [24][0][][] */ 3,-53,-53,88,-10,-61,101,127, 
  /* [25][0][][] */ 11,44,34,30,127,124,-77,-51, 
  /* [26][0][][] */ -85,-27,-127,-2,7,12,-88,-1, 
  /* [27][0][][] */ -1,-26,-33,8,-44,127,68,48, 
  /* [28][0][][] */ 2,-19,-22,40,23,127,54,62, 
  /* [29][0][][] */ 85,29,127,5,-21,-18,88,-7, 
  /* [30][0][][] */ -81,127,-25,-29,12,-4,98,-49, 
  /* [31][0][][] */ -43,-93,-18,1,29,-72,127,112, 
  /* [32][0][][] */ 5,8,-51,119,-12,100,86,127, 
  /* [33][0][][] */ 0,60,-11,-104,11,-11,-11,127, 
  /* [34][0][][] */ -27,89,-9,-98,32,-10,16,127, 
  /* [35][0][][] */ 127,5,-19,-36,25,27,107,-39, 
  /* [36][0][][] */ -127,-9,24,64,-42,10,-116,83, 
  /* [37][0][][] */ -8,-23,-12,27,34,127,48,57, 
  /* [38][0][][] */ 14,19,7,81,127,-7,-19,33, 
  /* [39][0][][] */ 7,29,38,-127,27,-2,-41,123, 
  /* [40][0][][] */ 96,29,127,1,-12,-11,97,-9, 
  /* [41][0][][] */ 0,-30,-34,86,51,127,73,102, 
  /* [42][0][][] */ -78,-4,127,21,-35,12,-27,60, 
  /* [43][0][][] */ -12,-54,8,98,-16,5,16,-127, 
  /* [44][0][][] */ 31,0,-76,-127,76,-33,-6,-119, 
  /* [45][0][][] */ -89,127,-1,-53,10,1,74,-56, 
  /* [46][0][][] */ -127,-26,34,22,-29,36,-86,35, 
  /* [47][0][][] */ 109,22,127,2,25,-20,122,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010169466258957982, 0.00095952791161835194, 0.00062370719388127327, 0.00059270596830174327, 0.00055913859978318214, 0.00062817573780193925, 0.00072719407035037875, 0.0027165377978235483, 0.00080912397243082523, 0.0046656862832605839, 0.0012100485619157553, 0.0038382029160857201, 0.00034627196146175265, 3.937008052901092e-09, 0.0018082138849422336, 0.00037479071761481464, 3.937008052901092e-09, 0.01268148235976696, 0.00079389108577743173, 0.00066969828912988305, 0.00056618370581418276, 0.0090402113273739815, 0.00063484720885753632, 0.0029111418407410383, 0.0020588643383234739, 0.0013287004549056292, 0.0044617997482419014, 0.0034484423231333494, 0.00052531383698806167, 0.0033187596127390862, 0.0023542942944914103, 0.00032940937671810389, 0.00038285716436803341, 0.020440349355340004, 0.00095918844453990459, 0.0011303682113066316, 0.0081570558249950409, 0.00066307163797318935, 0.0051858625374734402, 0.00055741873802617192, 0.002454796340316534, 0.00034996922477148473, 0.00096638861577957869, 0.019038708880543709, 0.00066866172710433602, 0.00098840182181447744, 0.00058258511126041412, 0.00037822822923772037, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1248, -42475, -7382, -12820, -31747, -2089, -24860, -28003, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021261358633637428, 0.0023230127990245819, 0.0026712962426245213, 0.0012859875569120049, 0.0010574278421700001, 0.0021138482261449099, 0.0016435256693512201, 0.0010995839256793261, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-24,2,-1,126,3,-1,1,1,-127,-91,-3,0,121,-3,0, 
  /* [1][0][][] */ 0,-29,1,85,70,14,23,6,0,-7,127,-44,0,29,-14,0, 
  /* [2][0][][] */ 0,1,0,-12,-58,3,10,1,1,3,-18,2,0,127,-8,0, 
  /* [3][0][][] */ 0,-13,-21,-127,81,26,69,18,-1,60,0,39,0,-2,20,0, 
  /* [4][0][][] */ 0,52,-26,35,-56,29,127,8,-1,-60,16,-8,0,-6,16,0, 
  /* [5][0][][] */ 0,-15,-11,0,-23,-24,-12,16,0,10,-5,-44,0,-5,127,0, 
  /* [6][0][][] */ 0,18,-3,1,51,-21,-25,-7,1,-104,115,61,0,127,60,0, 
  /* [7][0][][] */ 0,12,-15,127,10,-1,17,11,1,69,-51,77,0,-8,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.090360775589942932, 0.098728038370609283, 0.11353009194135666, 0.054654471576213837, 0.044940680265426636, 0.089838549494743347, 0.069849841296672821, 0.046732313930988312, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 17238, 46909, 9694, 8993, 38299, 13983, 41555, 5441, 5723, 27386, 14935, -445, 25394, 9920, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00015133582928683609, 8.5685111116617918e-05, 0.00036332407034933567, 0.00018793295021168888, 8.6336411186493933e-05, 0.00037483105552382767, 9.3835536972619593e-05, 5.4745596571592614e-05, 0.00030566047644242644, 0.00023282712209038436, 0.00080420804442837834, 0.00072724185883998871, 0.0002672014816198498, 0.00021060981089249253, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,77,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-107,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,33,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-6,38,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,20,-124,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-114,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0064317728392779827, 0.003641617251560092, 0.015441272407770157, 0.0079871499910950661, 0.0036692975554615259, 0.015930319204926491, 0.0039880103431642056, 0.0023266877979040146, 0.012990569695830345, 0.0098951524123549461, 0.034178841859102249, 0.030907778069376945, 0.011356063187122345, 0.008950917050242424, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 21834, -78065, 4809, 206440, 12810, 62460, 17510, 339718, 19671, 23279, 346749, -1073741824, 48242, 33946, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00020473745826166123, 0.00026184512535110116, 5.0561808166094124e-05, 1.3897662938688882e-05, 0.00027309669530950487, 6.2619350501336157e-05, 0.00035434935125522316, 3.2590360206086189e-06, 6.1086102505214512e-05, 0.00012104598135920241, 1.66916215675883e-05, 1.1533876076441629e-09, 7.8945347922854125e-05, 5.4860167438164353e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-6,28, -7,-26,11, -127,-123,-70, 
  /* [1][1][][] */ 1,-8,-4, -25,0,-9, -1,-35,2, 
  /* [1][2][][] */ -5,15,-4, -7,4,-5, 38,-21,11, 
  /* [2][0][][] */ 31,-5,-6, 78,115,1, 37,-42,4, 
  /* [2][1][][] */ 11,12,-1, 71,127,-30, 17,-9,-10, 
  /* [2][2][][] */ 51,-65,21, 74,-44,-22, 32,-55,13, 
  /* [3][0][][] */ 7,33,3, 34,94,21, 3,7,-3, 
  /* [3][1][][] */ 23,38,8, 70,127,26, -12,-17,4, 
  /* [3][2][][] */ 9,5,7, 29,27,9, 2,-2,4, 
  /* [4][0][][] */ 43,77,-8, 16,84,-12, -17,7,-3, 
  /* [4][1][][] */ 47,96,51, 36,127,33, 35,57,-14, 
  /* [4][2][][] */ 62,84,38, 49,126,12, -19,27,22, 
  /* [5][0][][] */ 8,1,-118, -4,0,-101, -6,27,-26, 
  /* [5][1][][] */ 4,-44,-127, -1,-45,-113, -2,12,-23, 
  /* [5][2][][] */ 1,11,-16, 4,-1,-12, 2,14,-11, 
  /* [6][0][][] */ 25,-63,34, 47,-87,39, 9,-20,8, 
  /* [6][1][][] */ 36,-96,61, 63,-127,71, 7,-28,16, 
  /* [6][2][][] */ 22,-33,14, 14,-43,26, -11,9,0, 
  /* [7][0][][] */ -31,16,4, -109,-41,-1, -25,22,1, 
  /* [7][1][][] */ -13,-9,0, -127,-96,-11, -6,-5,6, 
  /* [7][2][][] */ -23,30,-9, -12,12,1, -20,27,-1, 
  /* [8][0][][] */ -95,-81,-101, -91,-75,-99, -11,9,-22, 
  /* [8][1][][] */ -127,-108,-124, -126,-105,-125, -55,-30,-59, 
  /* [8][2][][] */ -101,-92,-106, -100,-89,-108, -38,-23,-47, 
  /* [9][0][][] */ -22,-5,8, -12,-6,1, 6,6,-8, 
  /* [9][1][][] */ 95,112,-9, 75,127,17, -5,20,26, 
  /* [9][2][][] */ -23,-22,17, 5,-28,1, 13,6,-19, 
  /* [10][0][][] */ -24,-82,-17, 34,95,21, -8,-12,-2, 
  /* [10][1][][] */ -58,-102,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-18,3, 37,24,-10, -8,0,8, 
  /* [11][0][][] */ -4,-16,8, 16,-33,13, 13,-91,-47, 
  /* [11][1][][] */ -38,-34,-12, -28,-54,-29, -9,-51,-47, 
  /* [11][2][][] */ -1,-32,-69, 118,127,67, -33,17,-40, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -61,-111,-25, -9,-17,-6, 
  /* [13][1][][] */ 61,114,15, 58,127,24, 8,16,11, 
  /* [13][2][][] */ -9,-20,3, 1,-18,-2, 1,5,-4, 
  /* [14][0][][] */ 45,-6,-37, 76,-28,-51, 31,-10,-21, 
  /* [14][1][][] */ 89,-16,-72, 127,-39,-86, 59,-18,-36, 
  /* [14][2][][] */ 54,-10,-46, 74,-21,-52, 26,-6,-17, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 5.0711901167233009e-07, 0.079244360327720642, 0.10134808719158173, 0.019570127129554749, 0.0053791399113833904, 0.10570304840803146, 0.024237042292952538, 0.13715218007564545, 0.0012614214792847633, 0.023643594235181808, 0.046851277351379395, 0.0064605516381561756, 4.4642277430284594e-07, 0.030556079000234604, 0.021233823150396347, 4.8125261997711277e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.49327492713928223, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.3720492422580719, } };
const TfArray<1, int> quant50_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.34343600273132324, } };
const TfArray<1, int> quant53_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.49006041884422302, } };
const TfArray<1, int> quant54_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2267596423625946, } };
const TfArray<1, int> quant58_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.18205425143241882, } };
const TfArray<1, int> quant61_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.24782861769199371, } };
const TfArray<1, int> quant62_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.19480989873409271, } };
const TfArray<1, int> quant65_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.31313937902450562, } };
const TfArray<1, int> quant66_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.057656660676002502, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.075939029455184937, } };
const TfArray<1, int> quant69_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 688, (TfLiteIntArray*)&tensor_dimension69, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 675, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
