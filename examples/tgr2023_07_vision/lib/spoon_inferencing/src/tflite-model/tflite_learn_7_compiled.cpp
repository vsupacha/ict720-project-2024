/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 28.03.2024 04:07:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 416224;
#else
constexpr int kTensorArenaSize = 415200;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037370242644101381, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 39335, -43306, -44057, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.0001183734493679367, 0.0001226384483743459, 0.00012070809316355735, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 85,88,127,-78,-74,20,-25,50,0,29,38,-31,-35,-97,95,37,-52,91,97,119,-18,-26,58,-100,-118,102,-62,7,88,13,-21,-8, 
  /* [1][0][][] */ 46,-38,-78,8,-10,127,-15,-17,122,-45,-2,-81,-63,107,40,-51,89,-55,-26,-97,-118,25,107,75,19,25,3,-24,-70,-54,-4,-25, 
  /* [2][0][][] */ -27,78,-80,77,85,-43,-31,116,91,46,127,-16,-103,-88,77,116,-86,-55,-11,-114,72,115,-60,-98,89,-61,-19,-119,11,-77,85,-37, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0031435259152203798, 0.0032567870803177357, 0.0032055247575044632, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -217, 13, 41, -195, 37, 271, -236, 77, 130, 17, 51, 80, -297, 99, 195, -125, 172, -102, 1059, -207, 49, 67, -461, 383, -306, 436, -318, -251, -41, -150, -454, -228, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.125438499613665e-05, 4.1711587982717901e-05, 4.634208744391799e-05, 4.4201231503393501e-05, 4.4266340410104021e-05, 4.2800020310096443e-05, 4.1273222450399771e-05, 4.3107167584821582e-05, 4.6227258280850947e-05, 4.1521143430145457e-05, 4.2535088141448796e-05, 4.6642373490612954e-05, 4.5094195229467005e-05, 4.1837745811790228e-05, 4.5333868911257014e-05, 4.0600352804176509e-05, 3.950052268919535e-05, 4.7127705329330638e-05, 4.785909186466597e-05, 4.8758138291304931e-05, 4.5023523853160441e-05, 4.1923551179934293e-05, 4.2880470573436469e-05, 4.020470441901125e-05, 4.1392264392925426e-05, 4.2168467189185321e-05, 4.3113519495818764e-05, 4.5022592530585825e-05, 4.272174192010425e-05, 4.511361476033926e-05, 4.2503099393798038e-05, 4.3997970351483673e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -43,-58,102,4,97,-11,-98,-109,58,-97,-119,-3,62,4,-45,49,-65,-40,-70,-59,-79,-114,-2,108,-127,4,74,-55,110,-8,-28,-91,81,-71,-94,61,-123,-90,-90,24,72,-96,-105,99,46,-119,106,-27,11,-67,-21,98,-81,-57,-98,108,23,64,123,-120,-84,86,-53,52,-19,9,67,92,51,97,83,-113,99,-109,43,82,-117,8,-69,27,49,14,110,-12,-69,-50,-96,101,26,115,-12,-119,20,70,25,18, 
  /* [1][0][][] */ -55,41,-84,1,-55,80,37,17,88,-118,-105,119,77,-23,28,69,102,-42,25,116,-50,-8,34,25,35,12,-47,99,11,-4,106,-61,58,111,-20,35,41,68,-7,-65,-59,4,-19,-94,-30,44,-26,-51,-24,-87,110,56,1,91,-74,-53,27,108,69,82,-57,127,-72,-93,-67,40,76,47,109,31,10,2,-116,101,-47,47,73,-56,-42,82,-79,91,-61,-115,33,126,-69,-64,89,90,89,31,87,113,34,-3, 
  /* [2][0][][] */ 39,33,-57,83,-30,-39,82,87,-96,103,-37,127,105,-13,78,-107,-39,-26,27,55,-74,-13,106,21,-30,78,98,13,-44,68,78,81,-58,-22,-71,-102,-75,86,97,-29,-109,-71,9,-4,-80,104,-26,-64,96,56,97,-78,-45,54,40,35,-65,86,-33,2,-15,80,-14,77,84,37,46,77,-79,58,26,-43,31,-73,55,25,-56,-20,3,5,32,-93,13,-44,0,-88,-20,-36,105,102,-28,-1,-38,-52,-47,-58, 
  /* [3][0][][] */ 75,2,34,-18,-82,33,-113,30,55,2,66,-10,78,93,68,9,87,98,-71,0,106,-89,-67,-119,-17,-111,-82,89,28,-108,81,15,-56,-31,-30,-11,-107,-22,22,50,-23,-90,-95,-4,75,32,-43,-92,67,-95,27,-17,77,33,70,-103,-127,-111,-124,-61,-96,19,-53,59,39,-28,-63,-27,-44,-81,-5,82,19,-101,37,-49,20,90,93,-55,-86,-115,20,96,28,41,-40,-108,-91,46,-10,-103,76,-107,-85,24, 
  /* [4][0][][] */ 55,106,0,58,-35,-33,32,21,66,70,-2,40,15,-31,-9,-57,-41,0,-70,-4,96,-86,83,25,-10,-6,61,-71,-60,28,-63,-42,64,116,-2,-91,-65,-1,-104,53,-43,-57,-64,-83,39,110,40,54,23,-48,-24,-79,-94,50,-99,8,37,-86,8,17,11,-91,-50,-77,-51,61,3,-29,20,-90,-106,-99,-49,27,77,56,55,-24,-4,-48,11,-36,-114,-12,5,71,93,10,-127,-65,47,51,29,73,-88,-15, 
  /* [5][0][][] */ 83,-106,86,87,52,-113,33,36,107,-124,5,-82,-3,84,38,44,65,65,-63,99,7,58,24,-22,-93,-59,-12,-84,46,36,-3,-97,-43,4,-65,4,-107,-51,41,29,-106,-45,37,94,-48,9,20,-56,-117,102,17,32,46,7,24,-45,107,31,-68,-33,17,-80,35,-70,-30,108,-21,29,70,2,104,-73,-44,67,-56,-65,19,-42,18,73,110,45,2,107,-79,67,-2,46,44,-117,127,93,-25,-2,61,-86, 
  /* [6][0][][] */ 18,-48,114,76,-96,-65,-5,67,-18,-76,3,-79,112,58,119,-127,43,0,-7,116,-66,-126,111,59,-69,-86,-11,-63,-25,-121,51,-82,-92,-127,-49,-111,-12,41,-114,80,90,56,21,-16,-118,108,-93,-47,-85,20,-20,-66,56,-58,114,-3,6,-9,-65,113,-97,16,78,-73,-54,65,102,-53,80,-10,-108,5,56,-73,-69,-46,-89,-108,-61,-33,32,-32,70,-30,-76,-90,-44,-102,106,97,94,16,-52,-44,78,-32, 
  /* [7][0][][] */ 120,74,-36,-38,-84,103,-18,4,122,-13,-92,9,43,-85,48,78,35,19,-14,94,44,36,-6,87,-63,100,40,46,-90,97,-19,43,21,28,50,105,-119,90,-6,-23,98,-75,91,71,56,3,106,-112,52,-59,-119,-75,-35,91,3,20,117,-87,-11,-55,8,-23,66,-127,-76,-50,68,29,-114,26,53,66,87,31,40,63,-67,52,-96,52,96,-30,-38,-68,90,36,-106,100,69,10,90,71,-56,-60,1,-64, 
  /* [8][0][][] */ 10,31,-35,-79,67,26,-65,-22,11,19,47,72,-20,-44,-77,-61,-64,92,-50,15,13,-19,79,105,-100,93,46,76,-68,25,-92,115,82,-26,46,-2,113,1,-17,72,73,100,-98,-111,-9,-24,-23,96,16,-89,-71,-2,-52,-5,-43,-119,45,95,-108,102,100,19,35,98,-29,-36,-16,98,-81,56,26,-11,74,68,-16,26,-35,102,81,73,37,82,-127,-73,26,35,73,-31,15,-35,-69,100,-78,-118,-42,58, 
  /* [9][0][][] */ 10,16,112,53,71,-114,-51,-113,49,53,-7,58,-22,-73,-102,-26,-1,1,-112,-71,11,103,-114,-108,115,-16,-19,18,-15,-71,-84,112,66,6,21,-11,-91,25,-28,-44,58,-72,60,-89,92,29,-101,63,60,-13,-82,-56,68,-71,-69,113,99,-52,0,-5,-85,112,84,-88,-90,9,108,53,-29,105,106,-97,8,91,-95,-100,-93,-127,-40,117,38,31,104,35,-41,-89,41,-12,120,43,-35,118,120,23,70,-37, 
  /* [10][0][][] */ -60,88,94,-64,-32,90,109,32,44,13,28,-78,85,84,-34,16,-56,83,-120,-85,-30,29,56,-71,38,51,-120,-127,-67,67,-96,-76,82,104,102,79,-57,9,-30,39,-33,118,-108,-36,-93,-54,0,-62,-3,-10,28,3,50,26,-79,-47,-101,-15,12,-45,-3,59,97,26,111,-72,-99,-18,13,-17,-110,-89,88,72,-106,112,-19,61,70,28,82,4,35,110,-100,71,104,-19,22,13,-2,-63,-56,-74,-42,-67, 
  /* [11][0][][] */ 127,34,-14,95,103,63,50,52,103,109,-71,126,7,-77,29,-61,-40,-94,57,56,52,70,24,-100,-99,-71,-16,64,97,-11,46,-20,-64,-66,59,65,-58,92,-2,-53,-1,99,-49,10,-18,-50,-61,-59,77,117,111,71,-88,-68,39,45,-43,-34,-5,-82,-51,107,98,21,43,79,-51,30,104,72,-55,-41,37,117,-68,47,-65,32,-41,83,-89,-26,-41,-42,49,-51,17,-27,-61,-2,8,-78,-67,-7,-54,-22, 
  /* [12][0][][] */ 9,64,-62,-8,72,5,-42,30,-81,68,-22,25,-23,10,40,-83,-99,-39,-56,-80,38,-18,9,86,-74,-54,87,-104,88,6,-33,104,-83,-73,-52,15,-10,-73,-21,31,108,30,-114,-40,-24,-83,-39,108,-44,-111,-65,96,26,-5,-72,104,-24,-57,68,55,55,127,-4,46,103,24,-52,102,51,87,37,72,74,104,8,-14,-43,26,-119,-94,-63,91,65,8,-40,28,44,101,-74,-106,77,35,95,8,24,66, 
  /* [13][0][][] */ 105,-70,115,97,111,115,89,54,70,-115,11,-43,70,64,64,-45,-115,-71,-62,32,54,-23,127,-43,-56,47,9,28,-96,-83,74,32,43,104,-16,30,-76,-39,16,71,-75,84,-59,2,-54,21,-10,-41,31,102,-34,-108,-93,25,81,-99,-52,19,-45,-69,-35,108,-82,19,-49,-65,-89,85,-43,-14,102,-2,-93,32,-102,-35,-96,77,87,-70,51,-100,81,16,-90,-117,94,120,-33,-63,-67,53,111,-79,62,-9, 
  /* [14][0][][] */ -70,-102,89,71,80,-25,-10,-107,-69,-36,71,79,-31,-72,-82,-76,-44,-52,19,24,-58,37,4,63,-102,-67,-26,35,-104,-108,-73,40,90,-17,-26,-8,97,96,35,-101,-10,-101,38,89,49,-104,47,-78,112,39,69,53,98,-12,-19,-4,-43,10,40,98,-28,-87,-28,72,-84,-7,79,-98,-83,-81,-79,89,7,71,34,-64,58,-96,57,36,48,-15,-127,-32,-105,-88,-101,105,102,10,90,-48,86,82,-28,62, 
  /* [15][0][][] */ 25,-19,-40,84,86,-95,63,-93,70,-18,-71,16,118,9,-93,-115,84,12,-108,21,48,18,72,111,85,68,40,89,21,54,74,-97,4,12,-76,4,-82,126,123,-67,25,116,-44,-20,36,-73,-38,-80,-6,-84,-9,29,-112,-100,-58,-10,71,63,-48,113,-43,-69,-3,99,-41,109,-78,10,-61,11,58,-87,21,-5,53,-115,-12,48,113,92,-81,69,-126,-58,-123,-31,-93,47,89,83,-122,-36,60,127,-105,122, 
  /* [16][0][][] */ -81,-7,124,-67,62,127,-49,32,50,52,-116,65,-35,-60,-57,-59,125,89,91,76,109,96,-31,66,-23,67,-67,81,-109,26,36,10,-111,83,71,57,-26,51,-61,-72,16,-43,75,86,61,104,104,-22,-65,-120,13,123,-33,121,63,40,31,88,60,26,121,106,38,76,66,17,-29,98,47,108,-29,-7,35,94,47,106,2,119,-111,-20,16,-90,54,9,9,98,111,12,65,6,-3,121,73,-58,-96,26, 
  /* [17][0][][] */ 30,-105,25,72,-38,-79,-60,-93,36,-70,75,58,108,54,-107,44,52,48,91,127,-80,-12,13,-48,20,62,-72,25,113,-37,-31,65,-27,-23,51,1,-37,89,-83,-30,-89,-38,-17,-11,2,8,76,-98,77,105,-5,30,-17,69,98,-66,-107,81,-50,-102,27,-58,85,102,-66,-71,40,-96,-73,-5,119,51,14,-112,-33,58,106,-42,37,-58,7,-17,-49,-89,-105,65,73,-35,33,67,-92,-111,-10,114,9,16, 
  /* [18][0][][] */ -60,110,119,-43,-10,-72,-68,35,6,96,-74,-15,-14,54,82,-34,47,-6,63,4,119,-16,44,-42,27,-69,8,122,54,30,29,60,48,-12,-69,-80,-3,56,-2,76,-9,20,-25,22,-79,41,49,25,38,-2,85,56,-75,-14,32,106,-18,44,8,-83,94,127,40,50,-34,-87,-3,96,83,-55,-37,123,-61,-28,-49,-70,62,75,22,-79,-29,4,3,-43,116,-2,83,70,-68,-41,-45,101,100,-23,68,-5, 
  /* [19][0][][] */ 17,23,64,33,49,-74,83,78,80,-51,23,-4,-67,28,-50,51,65,-92,92,52,-13,69,-49,10,64,-70,26,-60,-80,-103,-57,38,73,-74,41,-4,6,-62,-51,-89,38,-102,-75,7,-77,23,65,-81,-23,37,-26,40,-32,11,8,-3,21,86,14,-25,48,-33,90,56,-59,-4,-24,-2,-3,45,70,-21,-56,-106,-29,-72,-22,-99,12,91,49,-102,-2,66,-77,-7,6,-6,93,24,-5,55,-27,127,60,-42, 
  /* [20][0][][] */ 2,78,66,99,-87,86,21,71,28,14,-72,25,18,97,47,-65,-47,-24,-65,-28,38,-39,-71,-66,72,-57,-92,45,28,10,-25,113,98,53,-12,64,37,-19,-8,-91,-67,-29,-68,-82,-13,-49,-55,113,67,-97,-96,38,43,115,58,14,90,84,113,85,116,-29,-60,-27,-26,-56,-46,29,-72,-57,-60,79,-50,-67,45,20,100,73,109,114,92,17,92,-12,72,127,0,75,38,104,26,64,33,50,5,22, 
  /* [21][0][][] */ 96,80,77,-101,111,-81,76,18,1,-87,-70,24,-19,38,-53,-89,-119,-29,35,-15,95,-50,71,-86,65,-88,-36,72,-1,9,-15,-16,0,23,-103,-113,108,100,-117,-30,-7,8,32,-15,-97,-82,-81,90,-27,-79,-26,76,40,73,-114,11,-53,51,-78,124,53,-105,-3,-34,77,36,-37,-67,-111,1,46,54,33,-17,48,72,-109,-32,66,113,16,106,9,-70,27,-100,67,-80,-127,82,119,-112,-53,-96,70,-35, 
  /* [22][0][][] */ 36,-59,-79,-101,78,-60,97,50,-101,78,-86,-114,115,-115,-121,-98,26,74,-114,-62,83,-87,20,22,81,-18,-123,93,-72,-87,-75,-110,58,52,7,10,-10,-24,-67,-127,-8,-24,-9,86,52,-126,82,-34,-57,-90,4,-28,-75,-101,-53,33,-21,-43,-34,-43,110,-91,-86,-120,-78,8,-127,-50,100,94,-36,-12,-81,8,54,-99,34,-64,53,96,96,-110,-78,-125,69,79,86,-44,-65,23,-70,60,15,11,-35,89, 
  /* [23][0][][] */ 62,-103,16,66,116,-121,12,-120,63,-92,99,63,-5,-119,24,-34,99,-26,-104,109,82,-79,119,-31,-5,-10,95,31,70,57,62,-37,-38,54,27,29,113,-15,-123,13,-121,10,9,-118,-83,-104,112,25,83,-123,-83,-54,93,-63,-69,82,-88,-32,89,57,-122,-114,-59,-5,37,46,-117,-117,61,-14,121,-77,0,-41,-69,-92,58,-15,108,121,-53,-48,6,-110,104,1,127,-16,-121,36,121,-4,113,-85,-49,87, 
  /* [24][0][][] */ -83,-57,-116,-80,-91,-120,-79,-103,62,115,79,41,113,57,-49,-127,-92,38,21,-56,93,-90,-65,-46,50,-35,70,53,105,57,-3,-69,-2,4,46,24,-62,-94,60,-27,-83,-110,100,-3,16,-45,42,69,-96,-54,-27,9,67,58,65,-83,-11,76,24,-5,87,-12,33,93,-105,94,-55,-98,-108,48,-66,-34,-45,37,93,98,58,-86,-115,-90,-89,-103,-72,-127,-5,61,-20,-109,21,-119,2,-82,-25,25,-102,27, 
  /* [25][0][][] */ -89,-62,-71,-4,105,-69,-95,57,48,-100,-32,29,72,-4,-103,-14,-62,67,42,-107,80,96,-2,-48,23,-49,-95,49,86,-85,42,119,102,-109,55,69,112,-66,-11,-10,-88,107,-107,10,94,40,63,47,-102,97,-71,12,54,-24,-61,26,-16,54,-92,87,115,56,60,54,8,84,-8,-1,-87,-4,-15,-107,41,-127,93,32,83,85,25,14,60,52,-25,85,-69,-46,-99,-86,-11,-43,115,24,-115,-18,-17,-81, 
  /* [26][0][][] */ 52,-120,-26,-17,-77,-22,-15,-19,-110,-127,103,71,-86,-51,5,-18,101,29,-68,-78,9,67,96,7,50,64,11,41,-5,21,-95,-5,-28,-63,-105,-104,-68,82,-56,106,-102,100,53,26,-76,69,-43,94,-23,17,4,94,5,-49,-18,-119,92,62,42,23,1,-112,53,-11,114,-23,-60,53,-101,77,80,90,77,-99,-102,4,50,-111,-100,7,-32,72,72,-77,75,-5,-47,11,-95,110,8,15,-58,96,49,87, 
  /* [27][0][][] */ 8,4,-64,-101,-114,-60,-69,-19,37,96,31,-85,-22,50,74,-32,66,-19,74,-64,-91,7,-31,-26,-104,43,-105,17,83,37,-34,-13,57,62,-79,-85,-86,-65,-108,80,-94,13,23,13,90,19,61,95,83,83,56,-72,-68,-85,-5,-31,94,-27,-92,-78,-58,-38,-33,55,38,-48,-110,96,62,8,-112,23,54,-53,8,-87,42,-66,80,93,77,-29,127,-57,-74,-82,-35,25,-45,-8,-35,-51,51,37,80,52, 
  /* [28][0][][] */ 101,4,84,43,-118,-47,-99,-52,-40,-104,58,87,-79,-81,2,100,94,110,-67,82,-2,22,-109,-77,-118,83,-86,-60,-47,-77,6,-19,-102,16,79,83,17,-102,-19,28,107,41,-94,54,-101,-4,32,51,25,-39,-80,-32,-86,23,78,44,57,-7,110,51,-1,-36,-71,9,59,73,-23,82,-72,27,-101,-44,71,40,23,-102,-118,-65,-88,47,-76,-94,127,-28,61,-107,65,-83,-78,-49,-37,-64,-40,79,-71,-61, 
  /* [29][0][][] */ 50,50,50,-53,-91,14,-113,7,90,6,-88,-66,127,-97,-45,-47,-88,95,21,-56,-55,-33,52,4,-38,6,-41,-28,-85,-10,105,-7,55,-1,-74,-52,-10,98,-9,86,47,99,-45,80,-2,98,-50,-18,21,7,65,-85,65,-96,123,63,-89,58,-22,100,-109,118,-80,-38,-54,-63,49,81,100,-84,41,-52,105,70,85,21,104,-59,-31,28,-7,-82,18,-76,60,113,40,70,-13,91,61,73,-93,45,-1,62, 
  /* [30][0][][] */ 18,-76,-72,31,-101,14,-74,-24,110,-26,-11,-49,-101,14,49,10,-14,27,92,-113,38,-110,-123,3,-122,17,-76,112,-17,-109,-99,-5,-87,-80,-123,-65,5,-27,-14,18,79,-87,-22,89,95,-54,93,50,-79,72,17,-114,94,-61,-20,94,-87,-56,-83,-59,-107,-12,-84,-28,-114,-98,-104,86,-68,103,47,-37,-90,97,30,-94,-60,-81,-85,-69,20,26,-106,-24,-118,19,-110,99,-42,-127,73,45,-36,-11,3,-76, 
  /* [31][0][][] */ 107,-83,34,97,47,62,-60,-97,-31,-14,-80,-57,102,-119,-48,106,-61,-90,35,50,85,33,-32,102,41,-111,34,37,-71,-73,54,105,38,19,-90,11,93,-22,-66,-111,62,-69,-31,30,10,-54,-24,24,71,45,104,-29,-115,-57,-77,51,-115,71,19,109,-21,16,85,-72,68,108,-46,-78,72,-119,-118,12,-96,-34,30,4,-60,-48,47,90,-75,-42,74,69,54,97,-94,15,43,-51,-86,-55,12,127,15,-11, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017533112550154328, 0.001772742485627532, 0.0019695386290550232, 0.0018785523716360331, 0.0018813194474205375, 0.0018190008122473955, 0.0017541118431836367, 0.0018320545786991715, 0.0019646584987640381, 0.0017646485939621925, 0.0018077412387356162, 0.0019823007751256227, 0.0019165031844750047, 0.0017781042261049151, 0.0019266894087195396, 0.0017255148850381374, 0.0016787721542641521, 0.0020029274746775627, 0.0020340112969279289, 0.0020722209010273218, 0.0019134997855871916, 0.001781750819645822, 0.0018224199302494526, 0.001708699855953455, 0.0017591712530702353, 0.0017921597464010119, 0.0018323245458304882, 0.0019134602043777704, 0.0018156740115955472, 0.0019173285691067576, 0.0018063816241919994, 0.0018699136562645435, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -2141, 2935, 7428, 2782, -2762, -3579, 19560, 2340, 2806, -1819, 8864, -248, -8272, 2049, 17519, 7719, 13368, 5843, -4171, -6193, 4639, 35364, 21852, 17472, 1272, 803, 4415, 3022, 2408, -5505, 6722, -2708, -284, 4444, 48, 885, 9713, 4222, -1872, 5389, 6676, 4232, 3866, 14658, 4189, 4165, 1475, 7431, 4329, -5931, -5332, 460, -288, -1209, 2973, 132, 159, -1180, -4244, 13248, -793, 1351, -1086, -1792, -3681, 6432, 30782, 2117, -2213, 655, 1556, 1789, 2072, -1161, 542, 8887, -569, 18839, 17570, -857, 8370, 1610, -294, 1018, 9815, 6977, 5205, 1188, 7116, 3196, -359, -7867, 672, -1776, -1558, -1673, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00030384946148842573, 0.00053863332141190767, 0.00032266243943013251, 0.00031357380794361234, 0.00037611406878568232, 0.00041672712541185319, 0.00016993135795928538, 0.00030107810744084418, 0.00021939589350949973, 0.00034536747261881828, 0.00022420643654186279, 0.00029449383146129549, 0.00030638260068371892, 0.0013790570665150881, 0.00017641528393141925, 0.00014721683692187071, 0.00014004747208673507, 0.00024900661082938313, 0.00047184599679894745, 0.00027327702264301479, 0.00012931336823385209, 7.6159842137712985e-05, 0.00014081007975619286, 9.50198809732683e-05, 0.00014011051098350435, 0.00060330290580168366, 0.00067400239640846848, 0.00035905008553527296, 0.00021465122699737549, 0.00035868716076947749, 0.00021957058925181627, 0.00028497527819126844, 0.00022751044889446348, 0.00026193400844931602, 0.00038636210956610739, 0.00027947852504439652, 0.0001969875447684899, 0.00025776823167689145, 0.00033016878296621144, 0.00033129483927041292, 0.0001908584963530302, 0.0006134924478828907, 0.00038973399205133319, 0.00015804967551957816, 0.00045801140367984772, 0.00024139968445524573, 0.00033056520624086261, 0.00029195350361987948, 0.00031244801357388496, 0.0002201845491072163, 0.00029528711456805468, 0.00016795903502497822, 0.00055369251640513539, 0.00024815252982079983, 0.00027030147612094879, 0.00032480485970154405, 0.00063774763839319348, 0.00023268496443051845, 0.0003572043206077069, 0.00013959519856143743, 0.00094891339540481567, 0.00051391212036833167, 0.00025607302086427808, 0.00043373051448725164, 0.00051209260709583759, 0.00029754909337498248, 7.0288566348608583e-05, 0.00018509998335503042, 0.00052155600860714912, 0.00047950490261428058, 0.00026361283380538225, 0.00028461683541536331, 0.00064941839082166553, 0.00035378659958951175, 0.00035842371289618313, 0.00024390948237851262, 0.00024723543901927769, 0.0001000032716547139, 0.00010420841863378882, 0.0002106729953084141, 0.00017675165145192295, 0.00020718034647870809, 0.000159434974193573, 0.00023311907716561109, 0.00018685421673581004, 0.00034299120306968689, 0.00045373477041721344, 0.00024161877809092402, 0.00010390214447397739, 0.00064394983928650618, 0.00024158712767530233, 0.00025274892686866224, 0.00032775002182461321, 0.00055464700562879443, 0.00040749128675088286, 0.00024627152015455067, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -28,95,-3,-127,-36,-22,-42,-85,-19,23,-3,82,20,-69,-17,41, 
  /* [1][0][][] */ -38,24,-65,-9,-26,-33,30,-86,64,50,-56,14,7,7,44,-127, 
  /* [2][0][][] */ -10,0,-28,43,37,32,-35,-45,127,-36,7,-5,-29,90,-60,22, 
  /* [3][0][][] */ 51,-59,10,-97,10,-35,-14,-3,99,-7,63,48,2,48,18,127, 
  /* [4][0][][] */ -82,40,24,35,5,-11,1,46,13,-1,28,-31,-127,-3,-12,36, 
  /* [5][0][][] */ 7,71,114,9,18,75,-80,71,-58,69,-28,-28,39,-44,-127,18, 
  /* [6][0][][] */ 29,-58,107,-127,36,-2,-45,85,-69,-101,57,-32,4,84,-17,72, 
  /* [7][0][][] */ 46,127,-21,-54,103,16,-2,-51,125,96,-36,27,27,-19,59,48, 
  /* [8][0][][] */ 5,-85,8,-85,24,-48,24,-66,32,55,78,-15,9,127,75,51, 
  /* [9][0][][] */ 10,-30,-8,127,37,-12,43,-62,-67,112,30,-20,-6,-54,-2,-6, 
  /* [10][0][][] */ -22,20,-43,-127,14,10,-4,47,43,-43,28,-38,-28,-40,-9,37, 
  /* [11][0][][] */ -2,15,22,-19,80,-25,74,-55,-76,34,3,24,-4,127,-68,-30, 
  /* [12][0][][] */ 78,-6,-127,-18,48,-60,37,31,8,59,-68,-53,-47,126,4,12, 
  /* [13][0][][] */ -16,7,-23,10,5,-127,-4,18,5,-15,7,0,11,-10,9,11, 
  /* [14][0][][] */ 32,-21,100,-25,62,-5,-127,-90,-25,-42,21,26,12,-58,-24,-26, 
  /* [15][0][][] */ -71,30,-17,-52,-9,-7,127,58,-48,56,66,-14,21,76,75,13, 
  /* [16][0][][] */ 6,50,127,94,3,25,95,78,-79,12,-61,-13,7,14,6,-63, 
  /* [17][0][][] */ -46,-117,-15,30,-68,-18,-59,19,-127,-34,20,-54,-10,47,58,-42, 
  /* [18][0][][] */ 10,46,5,72,45,1,19,-11,69,49,-37,-26,21,127,58,19, 
  /* [19][0][][] */ 3,-29,38,12,94,25,-87,-58,-89,-77,-29,-127,-45,-44,-1,-33, 
  /* [20][0][][] */ 96,-41,-68,-38,10,-127,11,7,-47,44,-108,-25,38,-7,23,-10, 
  /* [21][0][][] */ 79,-17,89,-6,-7,11,-18,115,-10,-99,67,33,-13,127,37,91, 
  /* [22][0][][] */ -34,31,-37,127,-41,20,93,73,5,29,-1,25,-16,16,17,-2, 
  /* [23][0][][] */ 65,1,85,-84,72,-14,-17,30,13,17,-1,-33,6,-24,-127,15, 
  /* [24][0][][] */ -127,44,7,-23,0,103,26,-25,-8,25,100,-3,-71,13,64,-34, 
  /* [25][0][][] */ 21,22,12,21,10,14,66,-46,1,-127,-8,-23,-14,-26,11,21, 
  /* [26][0][][] */ -35,-4,0,11,-48,-15,-41,-34,-115,-34,-2,-34,9,127,-40,55, 
  /* [27][0][][] */ -9,28,8,63,41,-24,-14,-27,58,3,-21,-6,2,127,-7,12, 
  /* [28][0][][] */ 23,74,52,59,127,-17,28,31,-102,-16,-60,-27,27,88,46,-40, 
  /* [29][0][][] */ 0,0,11,17,35,-1,4,36,-18,-12,-14,-127,-2,-10,-25,6, 
  /* [30][0][][] */ -18,86,-48,79,-40,-22,42,-127,-49,58,-20,2,59,40,79,91, 
  /* [31][0][][] */ -32,-16,-7,-64,0,2,-55,-111,16,86,-18,-127,-35,-52,-2,19, 
  /* [32][0][][] */ -127,-77,-12,55,50,38,-11,4,-2,-48,-97,39,74,2,62,65, 
  /* [33][0][][] */ -20,-44,-46,-11,-88,1,-81,5,76,9,23,-60,21,-115,127,26, 
  /* [34][0][][] */ 43,-7,66,25,50,22,-43,87,-77,-51,72,15,7,-1,-19,127, 
  /* [35][0][][] */ -46,51,-79,13,-14,-22,33,-127,93,91,-80,-3,9,-12,85,-126, 
  /* [36][0][][] */ -49,29,6,119,32,41,127,25,5,32,-12,-25,-30,31,-66,-55, 
  /* [37][0][][] */ -2,-12,6,-81,-1,-6,-35,-54,-76,-16,8,-20,2,-127,71,-44, 
  /* [38][0][][] */ 45,93,-7,-45,127,1,28,-34,109,69,-19,0,10,-23,44,18, 
  /* [39][0][][] */ -39,65,-5,-127,-13,16,-43,42,54,-81,-21,-26,5,81,42,33, 
  /* [40][0][][] */ 7,-19,14,-103,-1,-27,-12,-49,-127,0,-15,-20,6,-111,88,-79, 
  /* [41][0][][] */ -13,-19,-47,-19,3,-24,22,-13,-24,17,-41,-15,-127,8,28,28, 
  /* [42][0][][] */ 127,87,-22,-11,-68,-43,-21,-44,7,19,78,-56,-64,50,89,-104, 
  /* [43][0][][] */ -2,127,-68,9,74,-9,112,-25,49,92,-58,-3,18,-123,-91,-54, 
  /* [44][0][][] */ -24,-9,6,-42,55,-1,-86,-127,-19,-4,14,5,1,-33,71,-61, 
  /* [45][0][][] */ -2,50,-127,-30,14,-74,33,-66,-1,36,-4,-74,27,-32,48,-19, 
  /* [46][0][][] */ 11,1,-15,-83,-9,14,15,-28,-118,-19,6,17,-10,-127,62,-30, 
  /* [47][0][][] */ 17,46,21,-17,127,-10,-23,14,-49,39,3,16,1,1,112,-31, 
  /* [48][0][][] */ -127,-74,-27,29,62,10,8,-25,-6,-16,-113,49,69,9,87,48, 
  /* [49][0][][] */ 11,7,96,87,123,6,58,35,-124,-54,-36,-87,8,127,20,-59, 
  /* [50][0][][] */ 30,-22,-85,-9,14,-127,-34,-8,-17,-22,-5,-31,36,-12,-6,11, 
  /* [51][0][][] */ 10,41,46,11,31,-2,-7,15,-127,59,5,-114,14,-117,-28,86, 
  /* [52][0][][] */ 11,62,-4,58,50,-9,25,26,62,94,-38,-45,47,127,66,19, 
  /* [53][0][][] */ -13,-55,-25,-23,-89,-7,-82,-1,57,15,22,-69,24,-127,127,12, 
  /* [54][0][][] */ 53,-16,-44,13,127,86,-117,-39,-83,-9,-37,-83,-1,-49,-16,-37, 
  /* [55][0][][] */ 47,-12,4,1,34,-56,-74,-127,-36,-86,-67,11,-7,-16,28,4, 
  /* [56][0][][] */ -21,13,23,-25,-5,-26,-96,68,-7,127,0,-18,26,7,-2,5, 
  /* [57][0][][] */ 2,20,-42,-17,-51,-44,127,94,-30,24,-15,-2,22,29,117,-5, 
  /* [58][0][][] */ 39,19,-127,21,70,96,-15,53,-99,-30,2,9,-30,15,10,-23, 
  /* [59][0][][] */ -100,65,101,16,-78,-68,127,116,19,10,32,-14,20,8,75,-3, 
  /* [60][0][][] */ 5,-7,-56,-5,21,-127,-22,-7,-7,-14,0,-33,31,-20,3,2, 
  /* [61][0][][] */ 18,-12,19,127,70,19,36,8,-103,3,15,44,-10,18,41,-60, 
  /* [62][0][][] */ -53,127,25,-49,-23,-5,-71,59,-16,-67,-80,-60,-12,-89,-58,-36, 
  /* [63][0][][] */ -44,22,-25,127,-77,16,-67,-28,-56,-30,-21,-39,19,70,37,39, 
  /* [64][0][][] */ 13,5,3,48,10,5,-22,56,22,5,-21,-38,-7,-127,46,-6, 
  /* [65][0][][] */ -20,-48,12,-124,51,-31,61,-37,-5,53,9,-127,-21,1,10,-54, 
  /* [66][0][][] */ 52,-13,72,-40,-3,-12,-20,107,-9,-72,32,52,19,127,31,92, 
  /* [67][0][][] */ 3,58,-13,-127,-9,4,-64,41,85,-106,-33,-5,25,88,72,41, 
  /* [68][0][][] */ -34,39,127,12,10,7,1,-3,-53,-11,-24,-35,22,-30,94,-34, 
  /* [69][0][][] */ 127,82,-10,4,-81,-26,-30,-33,6,10,86,-58,-71,61,60,-94, 
  /* [70][0][][] */ 32,4,-50,-5,-25,32,58,127,-26,85,-28,0,5,65,-27,21, 
  /* [71][0][][] */ 13,4,-8,6,4,-87,-2,17,-42,19,-86,10,-127,-3,43,47, 
  /* [72][0][][] */ 12,18,-127,10,10,9,31,85,-39,-18,8,-8,27,9,-1,-1, 
  /* [73][0][][] */ -53,20,38,1,45,-32,-74,-127,24,-72,42,-23,9,-49,43,-20, 
  /* [74][0][][] */ 8,44,46,127,22,6,-67,89,-67,0,-39,24,5,-95,38,-80, 
  /* [75][0][][] */ -19,26,-61,6,11,-5,25,-25,127,27,-6,-17,15,121,-35,-7, 
  /* [76][0][][] */ 4,-11,-7,22,3,-18,-10,60,11,-29,-25,-127,1,-11,7,12, 
  /* [77][0][][] */ -22,25,-22,127,-55,35,91,110,23,41,1,26,-27,-16,-8,-17, 
  /* [78][0][][] */ -9,-2,21,-127,47,-17,-27,47,41,-51,22,-58,15,126,23,36, 
  /* [79][0][][] */ -24,-83,-77,-62,-76,0,25,-75,127,8,32,47,11,42,42,-55, 
  /* [80][0][][] */ -58,-11,125,-75,26,-20,27,-79,-45,35,-26,-127,11,117,73,-40, 
  /* [81][0][][] */ -48,42,-127,23,67,-118,-14,49,-2,-40,65,-6,29,0,12,-8, 
  /* [82][0][][] */ 116,-23,-16,5,1,-127,-27,11,-13,-13,-92,10,120,-4,6,35, 
  /* [83][0][][] */ -35,79,-110,-77,-42,-11,47,-116,64,49,-47,-127,7,54,47,107, 
  /* [84][0][][] */ -37,26,59,-41,-2,-33,59,-127,-37,47,-6,-55,37,46,68,-6, 
  /* [85][0][][] */ -89,125,23,-127,-78,-29,-22,-7,-52,-6,-64,17,6,-11,-91,-31, 
  /* [86][0][][] */ -15,0,-28,6,-25,-22,127,29,8,-29,7,1,-1,34,76,-16, 
  /* [87][0][][] */ -20,-37,5,-116,11,-37,57,-12,-9,18,-13,-127,-17,1,10,-37, 
  /* [88][0][][] */ 114,-21,62,-18,24,-127,-22,49,-51,24,-115,-35,41,54,85,20, 
  /* [89][0][][] */ 27,-19,-41,-57,19,-18,-28,-10,-51,-1,31,-63,127,-2,36,-46, 
  /* [90][0][][] */ -7,-55,34,-58,64,6,-60,85,68,-89,-30,-34,-19,116,17,-127, 
  /* [91][0][][] */ -38,-3,-17,-35,22,-10,-32,-89,5,55,-13,-127,-35,-14,-1,11, 
  /* [92][0][][] */ -24,16,40,18,0,-127,16,2,2,-24,1,-14,1,-26,17,8, 
  /* [93][0][][] */ 42,-26,127,-28,-70,58,45,-17,-31,36,-73,-19,-22,0,50,12, 
  /* [94][0][][] */ 30,4,-11,-18,28,-4,-17,-1,-34,-19,11,-53,127,-16,27,-31, 
  /* [95][0][][] */ 127,91,-1,37,-88,-16,-65,-8,-30,-15,81,-38,-38,25,71,-70, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00076472334330901504, 0.0013556235935539007, 0.00081207155017182231, 0.00078919745283201337, 0.00094659777823835611, 0.0010488120606169105, 0.00042768046841956675, 0.00075774849392473698, 0.0005521720158867538, 0.00086921523325145245, 0.00056427909294143319, 0.00074117729673162103, 0.00077109871199354529, 0.0034707882441580296, 0.00044399910257197917, 0.00037051294930279255, 0.00035246918560005724, 0.00062669574981555343, 0.0011875343043357134, 0.00068777916021645069, 0.00032545375870540738, 0.00019167785649187863, 0.00035438852501101792, 0.00023914448684081435, 0.00035262785968370736, 0.0015183829236775637, 0.0016963182715699077, 0.00090365140931680799, 0.00054023071425035596, 0.00090273801470175385, 0.00055261165834963322, 0.00071722111897543073, 0.00057259458117187023, 0.0006592312129214406, 0.00097238988382741809, 0.00070338696241378784, 0.00049577502068132162, 0.00064874684903770685, 0.00083096337039023638, 0.00083379744319245219, 0.00048034955398179591, 0.0015440278220921755, 0.00098087615333497524, 0.00039777683559805155, 0.0011527156457304955, 0.00060755078447982669, 0.00083196110790595412, 0.00073478382546454668, 0.00078636407852172852, 0.00055415689712390304, 0.00074317376129329205, 0.00042271654820069671, 0.0013935243478044868, 0.0006245462573133409, 0.00068029033718630672, 0.00081746355863288045, 0.0016050728736445308, 0.00058561773039400578, 0.00089900597231462598, 0.00035133093479089439, 0.0023882098030298948, 0.0012934056576341391, 0.00064448040211573243, 0.0010916058672592044, 0.0012888263445347548, 0.00074886670336127281, 0.00017690111417323351, 0.0004658566031139344, 0.0013126436388120055, 0.0012068101204931736, 0.0006634565070271492, 0.00071631901664659381, 0.0016344456234946847, 0.00089040433522313833, 0.00090207497123628855, 0.00061386742163449526, 0.00062223814893513918, 0.000251686607953161, 0.00026227004127576947, 0.00053021835628896952, 0.00044484567479230464, 0.00052142812637612224, 0.00040126335807144642, 0.00058671028818935156, 0.0004702716541942209, 0.00086323468713089824, 0.0011419522343203425, 0.00060810218565165997, 0.00026149922632612288, 0.0016206824220716953, 0.00060802255757153034, 0.0006361143896356225, 0.00082487589679658413, 0.0013959265779703856, 0.0010255674133077264, 0.00061981217004358768, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -9705, 13361, -17576, -397, -8514, 11900, 27138, -51915, -1330, 19754, 23408, 17656, -6008, 9148, -9850, 9095, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00073301949305459857, 0.0004235992964822799, 0.00019588683790061623, 0.00025778863346204162, 0.00037794065428897738, 0.00037616273039020598, 0.00037154494202695787, 0.00030756703927181661, 0.00028440251480787992, 0.00024048384511843324, 0.00066651537781581283, 0.00053623149869963527, 0.00043079769238829613, 0.00021103936887811869, 0.00053936796030029655, 0.00047385838115587831, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -20,-16,0,-27,19,-6,-42,1,14,6,-14,7,-11,-7,-28,7,-5,5,0,-1,7,-29,5,2,7,8,8,127,34,-32,37,-7,-3,9,10,-1,-10,15,-33,-2,-13,3,2,37,10,19,11,4,26,-1,-10,11,18,-21,-10,77,6,5,-25,-35,-3,27,1,-22,-34,-67,-15,32,7,11,21,-12,-5,-28,-3,-20,-26,13,-1,4,-12,-23,28,21,2,-9,-7,-87,6,-11,3,-1,42,-26,-36,-13, 
  /* [1][0][][] */ 28,-72,-78,-51,127,-10,67,41,-23,-79,-58,-8,-2,-8,-62,41,-65,10,50,45,12,30,-12,-57,12,-14,-6,-61,36,-13,-61,40,-22,35,10,8,5,-4,8,25,-33,32,-36,-13,-31,94,14,9,31,-76,6,-31,-15,34,49,16,-48,-25,-31,-31,29,-11,3,-34,-73,93,-19,-16,-6,-19,-13,22,52,-94,-26,7,28,-51,40,1,1,-20,32,5,-49,28,-12,32,36,-31,-7,11,20,18,26,92, 
  /* [2][0][][] */ -4,60,-85,-7,85,74,21,71,8,-111,-6,-17,-8,-3,33,17,10,-24,-45,57,28,5,67,23,61,21,-1,-35,43,-13,53,-66,28,34,-25,33,-127,-88,37,25,11,-54,26,-23,16,-35,11,79,-36,28,-29,-15,95,-1,-7,52,25,17,27,1,18,26,38,-32,29,-4,-21,-7,-49,2,-14,-44,-49,-81,12,58,66,50,19,1,36,-40,7,-16,-30,32,9,45,-27,30,8,-29,2,-33,-60,4, 
  /* [3][0][][] */ 67,20,101,-9,43,-36,13,-16,-11,-71,23,-43,0,27,45,95,27,-5,24,2,127,-4,31,23,60,-14,-19,17,33,38,0,79,-103,19,25,-7,-20,-29,-9,36,-74,-29,69,11,19,41,-47,-81,-68,-25,-52,35,6,-119,-6,23,-119,80,53,37,6,95,-17,-55,35,71,0,-55,28,-24,-5,-69,49,-39,52,-24,5,3,47,47,-30,-74,16,-14,-29,12,18,40,24,8,25,32,40,99,50,-29, 
  /* [4][0][][] */ 21,-12,27,-5,127,35,-1,-14,-36,-50,-30,-26,-53,26,-10,52,19,-80,-31,73,-24,9,22,-20,5,-11,18,-32,12,-7,58,-29,89,17,-15,18,41,12,12,13,-27,-14,-23,-19,2,-42,-18,11,41,14,-25,13,3,-37,12,-23,20,-16,-26,21,4,58,62,23,46,38,-17,1,-41,-5,40,63,20,-66,-43,-30,29,26,70,-32,-6,-29,8,-10,-59,15,36,53,-44,29,-2,-35,9,17,21,-24, 
  /* [5][0][][] */ 3,-17,-12,21,26,-16,40,-24,-18,-45,-18,10,-9,28,-1,10,-12,-7,19,-13,27,16,-45,60,17,-8,19,-93,-1,34,14,33,-6,7,13,-67,28,18,1,12,-10,-14,29,-14,1,5,1,-15,-14,-13,4,-16,1,-27,-8,-52,-7,14,-19,11,68,13,-1,33,4,50,12,75,10,87,17,32,12,14,-9,62,-33,-15,9,11,-4,-7,6,17,-3,19,-17,127,1,30,-8,-8,0,21,-57,16, 
  /* [6][0][][] */ 22,-78,12,-37,-26,14,34,22,0,5,-22,-65,-35,-4,-34,35,19,-8,5,0,-46,28,19,2,-26,-6,-15,-16,-24,15,37,-2,54,8,60,-7,-5,-7,21,-90,-25,92,-2,-30,19,-19,-14,15,-11,32,-33,75,-25,-60,-9,-8,7,-66,-8,7,-13,63,39,-73,36,-28,9,-21,-8,8,127,5,-36,13,-29,33,-84,-9,24,0,25,43,24,-3,-30,-13,46,21,10,13,45,-38,-21,0,-37,-16, 
  /* [7][0][][] */ 7,127,44,6,109,42,40,-38,-25,-24,37,-13,-17,24,24,23,19,-38,-1,27,38,-30,34,16,-7,17,5,5,16,-18,11,16,43,-7,-47,8,21,6,-5,75,-42,31,13,19,-19,-31,32,-17,-33,-23,35,5,17,-35,-37,43,40,8,-22,3,-18,-36,-2,-5,-56,75,-28,-85,-15,-30,-10,55,-20,-31,14,12,47,62,44,-9,-42,-38,-16,-9,-20,47,-6,-8,-33,29,-29,-39,-43,-20,25,2, 
  /* [8][0][][] */ -3,-1,48,18,-127,-31,56,-14,25,87,64,7,-19,20,20,15,-51,15,10,-3,-44,-7,-119,64,20,-41,66,-11,11,12,-5,59,86,-21,0,-4,-29,-21,0,42,16,-35,52,14,-42,-6,51,-5,-114,10,24,26,-66,-46,-36,48,22,-61,-89,-24,24,-31,-29,-4,3,77,-12,-53,22,-21,-45,-25,44,54,56,-11,-22,-46,-17,27,-89,12,-17,-6,25,25,70,45,28,-38,45,55,-1,-6,37,15, 
  /* [9][0][][] */ 8,-117,-14,25,96,84,-34,-25,34,-49,105,90,-29,21,96,-118,11,-38,2,7,-63,-41,28,-15,-15,11,3,37,-17,11,8,-11,24,24,-109,39,-1,8,-15,68,41,-84,-10,64,0,-12,-86,-36,38,33,-12,-99,70,25,-9,-55,-8,88,-9,-9,20,-67,-28,127,-88,-21,-4,-17,5,23,-73,-81,40,-5,-6,24,67,-76,17,12,3,-23,13,30,5,-56,14,5,7,-40,-66,45,-59,-6,-5,-53, 
  /* [10][0][][] */ -50,-19,-35,-41,-23,-7,68,-20,32,21,27,38,24,-8,-9,-4,-7,26,-27,-21,-3,28,17,16,-8,-14,7,-127,29,-39,50,-30,0,20,-1,-11,-7,28,5,-1,7,-35,27,-44,11,0,34,17,-3,34,-31,-13,-38,-26,-8,-59,21,11,-7,-40,28,16,-3,10,-32,89,-11,-26,14,-26,4,-17,-30,-7,20,57,-11,38,-20,18,-21,2,9,25,10,-21,-5,118,1,2,10,14,17,-36,39,-31, 
  /* [11][0][][] */ -80,21,5,-2,12,-62,-20,-4,-43,-11,3,12,30,21,-21,-13,53,-2,-66,-59,25,0,-12,3,77,11,56,-5,-21,24,-36,16,-6,18,-13,-15,-10,-1,21,5,-14,-6,5,0,75,10,76,19,42,46,-1,28,9,-59,18,-7,-72,-13,-36,-49,-11,-19,0,18,-7,-22,27,-2,25,7,-13,26,-27,8,25,-1,-15,82,-127,72,-33,-10,-69,-66,124,22,33,-14,9,42,-28,-58,-19,40,-22,1, 
  /* [12][0][][] */ -4,-13,-29,4,58,17,-9,-10,-11,13,26,-12,0,-10,25,-11,-34,-12,14,-20,-11,-12,-38,40,-15,39,-19,93,-12,29,-31,5,-13,28,9,21,-14,-18,15,2,-2,-19,2,-2,-8,1,15,18,0,-3,0,-38,-11,6,-9,-15,-14,-16,17,14,-13,-26,-3,40,37,-77,8,46,-23,-127,-13,49,1,5,9,73,7,-16,-8,5,1,20,-34,1,15,-6,-6,-40,-7,9,4,3,-32,35,-8,19, 
  /* [13][0][][] */ -79,75,-10,-10,-57,8,-21,10,-53,-18,37,29,101,6,-32,4,-6,37,-43,0,22,-22,69,-64,59,37,-11,-11,6,-38,-42,-111,-110,-38,-3,1,-7,37,39,-24,-43,98,-11,13,42,2,-4,0,61,-22,33,86,64,-66,85,-14,-17,51,37,12,11,39,-20,29,-3,-18,0,3,11,32,33,-127,19,-21,-80,20,58,53,-42,-56,81,-28,-7,-22,31,-49,102,-3,-30,-1,-17,17,32,-48,-25,6, 
  /* [14][0][][] */ -25,23,-17,-58,36,2,-12,26,-90,8,27,10,-19,-60,-78,-19,-76,-8,65,16,34,-5,24,-101,-41,23,-54,-24,11,-22,-10,-36,-62,-34,16,12,-19,4,0,-3,4,87,-69,-16,-54,17,14,2,127,-31,32,-6,26,50,-97,19,-19,25,-103,16,10,26,43,27,-1,34,-8,2,-47,27,57,31,40,-10,-24,29,58,-64,-21,-93,17,-31,8,44,25,-67,-34,9,-40,20,37,44,16,29,20,-16, 
  /* [15][0][][] */ -44,-78,-12,-32,6,9,-4,-65,-26,22,-10,-26,38,-13,46,-16,-93,0,-15,12,-19,1,-71,-47,-6,-3,-5,23,-23,-12,63,-91,-9,31,27,13,-5,27,-93,7,29,-74,2,33,-28,-43,59,38,53,19,-15,-127,-5,47,-1,39,38,-12,-20,45,10,7,43,-3,8,-11,-3,-5,-26,29,15,36,-45,9,-1,-29,-37,-10,4,7,-9,45,-5,70,-13,-51,-30,-30,-42,65,27,82,-44,2,-3,-10, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.031153328716754913, 0.018002970144152641, 0.0083251902833580971, 0.010956017300486565, 0.016062477603554726, 0.015986915677785873, 0.015790659934282303, 0.013071599416434765, 0.012087106704711914, 0.010220563039183617, 0.028326902538537979, 0.022789837792515755, 0.018308902159333229, 0.0089691728353500366, 0.022923137992620468, 0.020138980820775032, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 16963, 58951, -1227, -282, 13899, -4281, 23, 714, 5189, 16622, -3373, -764, 264, 4319, 4715, -8804, -3954, -403, -829, 15475, -11465, 11608, -3214, 8601, 38804, 343, -6166, 17192, 14927, -19833, 1613, 21583, 24185, -10042, 2496, 868, -3, -1744, 3902, -6461, -5841, -612, -7744, 735, 29835, -1595, 13536, -1434, -13714, 1761, 80, -437, -2241, 17720, -3313, 13182, 17777, 65, 32826, 323, -9562, -1139, 1097, -546, -2379, 14772, -1777, -3701, -3716, 2977, -353, -4738, 1216, 126, -1845, -8456, 53, -1841, 49279, -8469, -5790, -12087, -548, -42, 66410, -13108, -9663, -27002, -7765, 9850, -2326, 35703, 270, -1743, -3405, 874, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013828132068738341, 9.6484574896749109e-05, 0.00011741700291167945, 0.00026206125039607286, 0.00024985842173919082, 0.00019859256281051785, 5.6457793107256293e-05, 8.6189036665018648e-05, 0.00025606033159419894, 0.0001454088487662375, 0.00030922461883164942, 0.00011728151002898812, 0.0002974093658849597, 0.00021385897707659751, 0.00046898814616724849, 0.00017109446343965828, 0.00020482200488913804, 0.00018272911256644875, 0.00019180201343260705, 7.1346366894431412e-05, 6.0965914599364623e-05, 4.9354170187143609e-05, 0.00014398913481272757, 8.57869817991741e-05, 0.0001080470101442188, 0.00013955286704003811, 0.00016311790386680514, 0.00018462062871549278, 8.3395680121611804e-05, 0.00046897260472178459, 0.00040169281419366598, 0.00024521793238818645, 0.0001203816500492394, 0.00016343401512131095, 0.00026650200015865266, 0.00051645166240632534, 0.00042182230390608311, 0.00015216119936667383, 0.00023943846463225782, 0.00012607751705218107, 0.00022117668413557112, 0.00027443681028671563, 0.00034938246244564652, 6.9326408265624195e-05, 0.00037613313179463148, 0.00010569940786808729, 0.00012632526340894401, 0.00032146531157195568, 0.00079345220001414418, 0.00014561381249222904, 0.00043272206676192582, 0.00018413261568639427, 0.00022120098583400249, 0.00015666369290556759, 0.00025304837618023157, 0.00012964931374881417, 0.00015469158824998885, 0.00054207060020416975, 4.9645772378426045e-05, 0.00015466795593965799, 0.00027269541169516742, 0.00032336552976630628, 0.00010881693742703646, 0.00015683050150983036, 0.00012520198652055115, 0.00012021262955386192, 0.0002497366804163903, 0.00057935982476919889, 0.00019054007134400308, 0.00013572102761827409, 0.00019641662947833538, 9.9552438769023865e-05, 0.0002737741160672158, 0.00013671620399691164, 0.0004039968189317733, 0.00021854419901501387, 0.0001458772603655234, 8.6608524725306779e-05, 5.2107719966443256e-05, 0.00014066173753235489, 0.0002242284535896033, 0.00024079240392893553, 0.00016116212646011263, 0.00027837380184791982, 5.3571027819998562e-05, 0.00011809828720288351, 6.9597241235896945e-05, 0.00053323357133194804, 0.00023754233552608639, 0.00013487297110259533, 0.00033487268956378102, 2.749398845480755e-05, 0.00016544621030334383, 0.00011210335651412606, 0.00028827984351664782, 0.00024781405227258801, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -45,-72,-11,127,22,72,75,-58,-14,-18,-14,-4,-29,1,37,1,-9,-44,27,21,19,-127,127,5,-83,7,50,-28,-126,-127,39,25,12,27,59,-18,-30,-11,29,-7,-13,28,-106,68,25,-67,38,46,-18,51,-24,19,3,-6,15,47,-91,-50,-58,-18,-11,1,11,38,68,-25,75,13,-8,17,20,127,23,23,26,0,-10,17,127,-7,-15,16,-27,20,127,20,-77,-17,0,-31,-15,-37,1,-26,-16,25, 127,-127,76,105,-43,127,41,-118,70,5,-16,127,127,-97,-12,15,11,127,127,-113,127,-76,80,68,-127,-116,-66,-34,-54,47,-60,-20,-89,52,-127,-82,-42,-15,-52,62,0,127,127,78,-51,-112,-112,-50,-15,-127,43,84,67,-31,44,82,-47,42,-77,-112,-43,-40,-61,67,72,-61,26,29,-81,33,-17,92,117,127,13,20,2,58,-33,51,64,127,127,-23,-10,73,-113,127,-121,-101,5,-127,-89,-127,-38,104, -73,-13,31,-83,15,-25,63,-8,81,-34,-26,18,-18,-3,-8,-13,-9,-17,7,-4,-22,-103,29,-2,-121,96,8,-54,119,50,-15,10,1,14,13,-28,-8,34,19,13,25,12,-118,62,18,-17,37,14,-14,10,-16,5,-10,1,-4,20,-66,7,-31,52,2,41,33,-1,-7,-38,-32,23,10,3,-3,37,9,-27,-5,5,-12,-6,-85,2,-22,-23,-18,2,-111,9,-33,-23,-50,24,-25,-32,28,-27,-14,1, 
  /* [0][1][][] */ -63,-74,74,-36,-48,94,18,127,-52,-21,0,-119,27,-114,78,30,-3,-60,-17,89,52,-69,47,49,-94,-13,127,-22,-23,64,123,-103,-127,92,-86,-55,-36,32,-29,96,-48,-25,-4,44,-47,127,-23,65,16,94,20,-2,14,-54,27,31,127,121,-72,-86,127,-32,-35,127,72,-38,-15,-1,127,40,127,96,-41,103,-5,12,15,14,-30,10,-43,124,-79,110,2,33,-56,30,79,-127,-32,-6,127,-69,-23,0, 67,126,58,-115,127,83,92,37,-127,127,127,-38,-64,-127,-127,127,127,-62,-124,-51,101,94,-123,127,-108,-91,-43,127,-127,110,-127,-127,-88,127,106,127,127,-127,-105,127,-65,-96,110,-127,-127,-35,-127,-127,127,-112,86,42,127,127,127,-127,99,-127,-127,127,20,-78,-127,-99,-127,127,-127,127,-126,-127,-106,-82,-127,-79,127,127,-127,127,-78,127,127,30,-42,-127,60,127,94,46,127,12,127,0,-67,35,127,-127, -53,-13,-49,37,-56,-99,34,-28,19,-33,-28,92,2,94,14,9,-5,63,-7,127,1,-84,-41,6,-72,103,-71,-20,-68,-16,16,-62,-70,38,4,-17,-29,46,-67,42,127,-4,-40,27,-40,-58,16,45,9,116,-10,6,-37,-72,4,20,95,2,0,21,-34,127,92,-51,-42,12,37,-11,-78,122,-18,-85,-1,-55,-16,-20,27,15,76,-36,-70,-41,57,14,-49,-17,73,22,16,62,-44,20,-44,96,-26,-5, 
  /* [0][2][][] */ -66,1,-3,-20,13,-46,64,24,54,-29,-35,-3,19,19,-26,0,-8,64,7,1,-54,-79,2,-9,-27,-54,35,-68,90,39,25,26,16,-8,-11,-46,-6,35,-3,0,-15,-6,-66,103,4,32,11,36,-15,-30,11,-20,22,-1,9,16,-69,23,-15,13,14,1,-21,-5,0,-47,-45,16,-33,13,26,28,13,-21,27,4,17,4,-77,-12,-9,-7,18,15,-127,7,12,-43,-59,-51,-27,-46,9,56,-18,-9, 121,34,-127,-35,-72,-26,37,29,-65,-29,-19,-107,-76,113,-13,36,2,-49,-9,-125,91,-50,-40,1,-109,127,-50,21,-35,-21,-8,-4,-63,15,26,6,-23,-28,127,54,12,-14,69,-35,-38,77,-68,-44,-33,-5,-127,-127,-51,-25,1,40,-65,-7,11,38,-8,-18,9,-46,-53,33,64,-21,115,108,-23,-71,12,-58,3,3,100,4,50,22,12,-95,-49,3,3,8,127,40,-61,39,-19,-108,40,78,-9,25, -53,12,-17,27,16,-69,-127,1,-12,-8,-15,4,16,-24,19,-3,-9,-16,5,17,-49,-68,13,0,17,-95,20,3,-48,-39,-7,17,41,-20,-7,-24,-35,3,42,-40,23,-2,-49,-34,3,65,22,15,-9,-4,11,-9,17,6,-4,-4,-60,-12,2,-38,-12,10,85,-11,35,-2,-2,28,1,4,-3,19,-17,16,0,15,36,1,74,-11,3,-8,-8,-17,74,0,43,-39,59,39,-17,-51,-8,1,-14,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0058769560419023037, 0.0041005942039191723, 0.0049902223981916904, 0.011137602850794792, 0.010618982836604118, 0.0084401834756135941, 0.0023994562216103077, 0.0036630339454859495, 0.010882563889026642, 0.006179876159876585, 0.013142046518623829, 0.0049844640307128429, 0.012639897875487804, 0.0090890061110258102, 0.019931996241211891, 0.0072715142741799355, 0.0087049352005124092, 0.0077659869566559792, 0.0081515852361917496, 0.0030322205275297165, 0.0025910513941198587, 0.0020975521765649319, 0.0061195380985736847, 0.0036459467373788357, 0.0045919977128505707, 0.0059309964999556541, 0.006932510994374752, 0.007846376858651638, 0.0035443163942545652, 0.019931335002183914, 0.017071943730115891, 0.010421762242913246, 0.0051162200979888439, 0.0069459453225135803, 0.011326335370540619, 0.021949196234345436, 0.017927447333931923, 0.0064668511040508747, 0.010176134295761585, 0.0053582941181957722, 0.0094000091776251793, 0.01166356448084116, 0.014848753809928894, 0.0029463721439242363, 0.015985658392310143, 0.0044922246597707272, 0.0053688236512243748, 0.013662275858223438, 0.033721718937158585, 0.0061885868199169636, 0.018390687182545662, 0.0078256363049149513, 0.0094010420143604279, 0.0066582066938281059, 0.010754555463790894, 0.0055100955069065094, 0.0065743923187255859, 0.023037999868392944, 0.00210994528606534, 0.0065733878873288631, 0.011589555069804192, 0.013743034563958645, 0.0046247197315096855, 0.0066652963869273663, 0.0053210845217108727, 0.0051090368069708347, 0.010613808408379555, 0.02462279237806797, 0.008097953163087368, 0.0057681435719132423, 0.0083477068692445755, 0.0042309784330427647, 0.011635399423539639, 0.0058104386553168297, 0.017169864848256111, 0.0092881284654140472, 0.0061997831799089909, 0.0036808622535318136, 0.0022145779803395271, 0.0059781237505376339, 0.0095297088846564293, 0.010233676992356777, 0.0068493904545903206, 0.011830886825919151, 0.0022767686750739813, 0.0050191772170364857, 0.0029578828252851963, 0.02266242727637291, 0.010095548816025257, 0.0057321013882756233, 0.014232088811695576, 0.0011684944620355964, 0.0070314640179276466, 0.0047643925063312054, 0.012251893058419228, 0.010532096959650517, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2117, 7671, 17783, 26376, 15990, -3502, -2023, 5404, 36868, -3865, 14489, 5148, 10383, 14283, 31801, 1928, 2971, 8971, 15604, 8338, -290, 474, 11822, -982, 3784, 78, 17173, 7919, 6261, 38608, 53778, 23930, 7754, -931, 13093, 2930, 1723, 3394, 25967, -803, 15169, 11370, 40880, -4367, 32116, 10984, 7298, 19532, 75771, 14162, -548, 11151, -3426, -251, -2995, 7872, -888, 17483, 6692, 7957, 4865, 20288, 7625, 6845, 14412, 10568, 5791, -8395, 6931, -4035, 6701, 10685, 21201, 6613, -4021, -5765, 6903, 344, 2934, -1437, 19162, 14299, 5231, 16131, 2865, 387, 11819, 71548, 10657, 13813, 6378, -263, 8574, 12116, 4559, 13053, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00018472848751116544, 0.00019145637634210289, 0.00010542922973399982, 8.7523476395290345e-05, 0.00018698375788517296, 0.0002876400831155479, 0.00040092726703733206, 0.00029959517996758223, 6.382627907441929e-05, 0.00035887249396182597, 0.00018367097072768956, 0.00017002056119963527, 0.00012080919259460643, 0.00016142366803251207, 7.4583935202099383e-05, 0.00029030957375653088, 0.00015281105879694223, 0.00013668464089278132, 0.00014165671018417925, 0.00014017293869983405, 0.00027807281003333628, 0.00045468134339898825, 0.00016930878337007016, 0.00064416992245242, 0.00068995391484349966, 0.00019778948626480997, 0.00013031666458118707, 0.00017905815911944956, 0.00026257996796630323, 9.0849913249257952e-05, 5.2979652537032962e-05, 0.00010305719479219988, 0.00021356814249884337, 0.00025910805561579764, 0.00015202254871837795, 0.00019700809207279235, 0.00029262871248647571, 0.00043109065154567361, 0.00010534292232478037, 0.00068114890018478036, 0.00012356282968539745, 0.00013715279055759311, 6.5645777794998139e-05, 0.00024223375658039004, 0.00010068607662105933, 0.00013916086754761636, 0.00023876508930698037, 0.000137347262352705, 5.4613839893136173e-05, 0.00014931478654034436, 0.00019394984701648355, 0.00015440315473824739, 0.00030921207508072257, 0.00024202447093557566, 0.00034418192808516324, 0.00013864536595065147, 0.00013992869935464114, 0.00010637171362759545, 0.00030240952037274837, 0.00018465406901668757, 0.00032676316914148629, 6.8350411311257631e-05, 0.00019392132526263595, 0.00014194630784913898, 0.00017243011097889394, 0.00018184480722993612, 0.00022425909992307425, 0.00015685035032220185, 0.00024251977447420359, 0.00017562630819156766, 0.00016600036178715527, 0.00014878249203320593, 9.7874319180846214e-05, 0.00015465178876183927, 0.00038533739279955626, 0.00023441908706445247, 0.00023851386504247785, 0.00029566264129243791, 0.0002557705738581717, 0.00028191800811327994, 0.00010691708303056657, 0.00011503703717608005, 0.00016649297322146595, 0.00011999234993709251, 0.00039924142765812576, 0.00021112503600306809, 0.00019886248628608882, 5.3757263231091201e-05, 0.00013176188804209232, 0.00016383828187827021, 0.00020035573106724769, 0.00033158488804474473, 0.00017184103489853442, 0.00013200528337620199, 0.00024780567036941648, 0.00013211183249950409, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ 10,63,-28,81,25,26,16,-11,24,38,-61,98,11,-127,41,-118, 
  /* [1][0][][] */ 16,48,-16,-17,21,-22,127,-110,-1,82,-17,-24,0,-52,30,7, 
  /* [2][0][][] */ -127,33,-26,-35,10,-18,65,101,-23,50,126,-9,-61,30,43,-42, 
  /* [3][0][][] */ -53,58,55,57,-46,51,57,127,13,71,-106,11,31,-64,-89,-44, 
  /* [4][0][][] */ 8,4,36,70,-18,70,-1,52,9,-11,1,4,31,0,-127,-17, 
  /* [5][0][][] */ -2,-25,54,-25,6,-19,0,26,-76,103,-36,-127,-15,19,-50,-31, 
  /* [6][0][][] */ 14,-2,29,-9,35,62,-71,-75,-14,3,43,-5,127,-30,-12,-32, 
  /* [7][0][][] */ 26,13,127,-19,-20,-39,11,-4,-71,31,-76,-50,1,-13,39,-16, 
  /* [8][0][][] */ 8,18,70,65,-67,106,36,40,48,3,-1,-110,-36,-5,-127,-96, 
  /* [9][0][][] */ 28,-115,57,58,3,-27,12,34,127,-6,85,4,-43,11,-110,-26, 
  /* [10][0][][] */ -48,-99,-4,-28,-100,16,-5,57,92,127,55,-15,-32,60,89,-4, 
  /* [11][0][][] */ 46,-24,16,-94,23,-28,-115,-127,-65,42,-17,-34,38,-30,33,-64, 
  /* [12][0][][] */ -11,6,12,-41,-29,-49,-78,-8,-44,-62,-20,20,30,127,79,46, 
  /* [13][0][][] */ -41,-94,-83,22,-20,-74,3,-26,54,25,-3,-18,8,20,127,34, 
  /* [14][0][][] */ 11,-52,66,44,24,47,3,127,19,53,5,-42,4,39,-82,114, 
  /* [15][0][][] */ 20,-38,-2,61,13,-3,108,2,6,-127,16,-39,5,-26,-2,-38, 
  /* [16][0][][] */ 39,-94,-58,26,14,-2,50,-87,127,81,107,12,20,110,82,126, 
  /* [17][0][][] */ -73,-60,56,125,119,40,19,-5,107,-53,-9,-42,29,73,-127,22, 
  /* [18][0][][] */ -7,11,7,17,-107,-12,-13,48,-81,-29,-32,-37,14,-127,72,-3, 
  /* [19][0][][] */ 45,-56,61,-86,87,35,-97,106,90,-71,91,62,-3,80,56,127, 
  /* [20][0][][] */ 38,-23,61,-68,-11,10,-30,45,-10,-46,97,-16,17,17,-38,127, 
  /* [21][0][][] */ -53,-11,6,-27,22,13,-83,-53,-25,58,-6,8,-127,-11,24,-17, 
  /* [22][0][][] */ 31,-29,31,-32,16,-73,2,-11,-127,20,-17,-38,-13,-9,78,-17, 
  /* [23][0][][] */ 12,6,16,-10,0,8,-11,6,-9,-4,47,-11,127,-7,5,-33, 
  /* [24][0][][] */ -12,11,8,-52,-18,-5,44,2,-50,-1,-15,-127,-6,-88,30,1, 
  /* [25][0][][] */ -96,4,-48,-5,55,-31,-70,-127,-19,45,-35,-56,-69,-75,32,-46, 
  /* [26][0][][] */ 26,4,47,-111,114,-24,8,0,127,-39,55,-36,-13,107,0,81, 
  /* [27][0][][] */ 103,-29,24,-32,-37,-62,-7,-17,-23,14,-127,18,13,-9,-1,46, 
  /* [28][0][][] */ -127,-20,-119,-75,69,-1,66,-67,-13,35,-77,6,34,-4,-58,48, 
  /* [29][0][][] */ -65,-34,-4,127,-2,29,13,-39,-9,-2,-72,48,21,-64,25,-40, 
  /* [30][0][][] */ 51,-19,127,-30,63,58,-21,86,-38,-73,71,-40,-4,37,-66,80, 
  /* [31][0][][] */ 9,-93,-3,-54,-3,-61,13,-48,-11,49,112,22,-23,91,73,127, 
  /* [32][0][][] */ -17,66,-36,33,-127,19,-66,-36,-49,-29,4,48,13,54,37,62, 
  /* [33][0][][] */ 16,-31,19,127,7,-4,24,-42,-101,56,71,-14,14,0,16,117, 
  /* [34][0][][] */ 39,8,21,-7,84,-33,-127,-13,-40,95,-32,7,-32,8,-3,10, 
  /* [35][0][][] */ 74,21,-7,5,21,-127,-17,-9,-16,6,-80,-11,67,30,-13,15, 
  /* [36][0][][] */ 28,3,-127,11,50,8,-37,24,-37,-22,-5,-8,4,14,-23,10, 
  /* [37][0][][] */ -2,6,127,-13,-62,26,24,-58,-14,27,-51,26,28,-4,20,4, 
  /* [38][0][][] */ -127,44,-7,37,23,88,6,-34,16,-20,124,-38,-40,15,-21,-31, 
  /* [39][0][][] */ -12,-4,21,31,36,-16,-127,35,10,23,-6,-30,3,-16,5,-7, 
  /* [40][0][][] */ 7,78,-16,127,11,48,55,31,-67,-44,-35,68,27,34,-74,-29, 
  /* [41][0][][] */ 18,17,-43,-21,-57,-14,127,98,-63,80,-42,6,15,80,32,-9, 
  /* [42][0][][] */ 34,-49,-41,-24,16,50,-47,92,83,-113,127,63,-16,24,-44,40, 
  /* [43][0][][] */ -87,-4,27,-42,24,25,-71,-74,-24,40,3,-14,-127,-7,39,-2, 
  /* [44][0][][] */ 17,4,-17,-9,-4,-23,-2,-51,127,0,18,39,21,70,4,45, 
  /* [45][0][][] */ -69,-81,10,-95,30,-5,-12,53,18,-68,-23,-25,29,99,-35,127, 
  /* [46][0][][] */ -37,21,-29,87,-75,-29,3,-80,-127,39,-50,-13,3,31,5,-44, 
  /* [47][0][][] */ -36,-22,-110,127,-4,54,5,-29,13,58,65,52,-23,-22,30,-28, 
  /* [48][0][][] */ -10,6,22,-127,16,-38,-9,-2,-45,20,23,-10,-16,64,107,50, 
  /* [49][0][][] */ -10,8,45,127,-3,27,-65,-23,28,-57,-96,-43,-18,-60,-91,-116, 
  /* [50][0][][] */ -9,54,18,-113,50,13,-14,56,127,-20,-23,1,4,-26,21,-17, 
  /* [51][0][][] */ 13,-30,21,-7,50,-14,-52,-127,12,-77,-6,3,-13,-9,-18,-15, 
  /* [52][0][][] */ 22,14,-4,33,44,-18,-65,110,-78,127,-43,-38,80,107,1,-37, 
  /* [53][0][][] */ -1,108,12,-90,-31,-9,24,-21,-67,-54,-49,54,10,-127,-97,-8, 
  /* [54][0][][] */ 0,8,19,36,50,-27,4,-41,-4,36,-15,-20,-4,127,-48,-14, 
  /* [55][0][][] */ -127,123,82,-26,40,5,-10,-9,-55,22,107,-21,-11,-31,119,-15, 
  /* [56][0][][] */ 66,3,29,-108,88,0,-19,41,51,-50,39,127,-30,21,82,61, 
  /* [57][0][][] */ -17,2,22,74,-22,11,36,127,-5,-1,0,-20,4,58,3,24, 
  /* [58][0][][] */ 19,126,5,-127,6,32,-10,20,111,-12,-2,74,-2,-81,36,67, 
  /* [59][0][][] */ 22,39,35,-114,-40,-6,29,-17,1,20,20,-68,-6,-127,-61,15, 
  /* [60][0][][] */ 43,-12,105,-50,-45,127,34,-40,-14,44,-48,-5,28,2,41,-12, 
  /* [61][0][][] */ -40,43,-47,-61,-55,22,111,127,-27,71,3,22,8,96,31,-42, 
  /* [62][0][][] */ -16,8,3,-13,-86,22,-60,12,-29,-18,7,-46,18,-127,95,7, 
  /* [63][0][][] */ 14,-22,6,-88,46,2,-113,-127,-59,107,-8,2,50,-2,19,-48, 
  /* [64][0][][] */ -23,0,41,50,77,-4,-41,-127,34,-111,7,-36,-9,-20,-4,8, 
  /* [65][0][][] */ -127,12,31,-57,24,90,52,-55,-77,43,47,-20,0,9,-19,-41, 
  /* [66][0][][] */ 73,-3,100,13,-62,7,-40,45,-41,0,62,-86,-9,47,-127,-10, 
  /* [67][0][][] */ 24,-19,-58,68,59,-61,-78,-103,36,-127,-77,-31,-101,18,-96,27, 
  /* [68][0][][] */ 13,-24,-71,48,-50,-84,5,-51,-24,-14,43,-57,-31,54,127,-5, 
  /* [69][0][][] */ -39,31,-72,48,-22,-126,33,92,36,-4,65,-12,127,43,-8,18, 
  /* [70][0][][] */ 21,9,-39,-47,-43,-1,127,97,-32,47,-31,20,24,53,26,6, 
  /* [71][0][][] */ 9,-3,-21,-42,29,9,17,54,-23,-32,-2,-8,4,-127,61,3, 
  /* [72][0][][] */ 27,32,-13,36,30,-32,-52,-127,18,64,-39,23,41,52,48,49, 
  /* [73][0][][] */ -51,-127,-22,-77,-82,-25,39,-30,-16,12,-29,-30,27,-42,72,-1, 
  /* [74][0][][] */ -21,31,63,100,2,3,-127,88,16,-36,-43,-32,5,-14,-10,-7, 
  /* [75][0][][] */ -45,37,-39,8,-26,81,92,127,-10,64,-5,-26,-101,66,20,12, 
  /* [76][0][][] */ 13,-15,-47,-14,40,-64,-127,-116,-27,-17,3,-12,34,-14,62,-38, 
  /* [77][0][][] */ -37,4,-39,-29,-49,-11,-12,-46,127,13,-64,18,-1,41,32,-83, 
  /* [78][0][][] */ -112,-127,-3,82,76,71,-19,46,-1,-71,-96,93,41,-20,112,63, 
  /* [79][0][][] */ 39,-18,34,-59,127,1,49,25,89,29,6,48,0,-27,17,-26, 
  /* [80][0][][] */ -5,-29,63,-93,-17,-38,-4,2,-76,-46,-19,-60,-9,127,-47,8, 
  /* [81][0][][] */ 14,-12,39,37,4,49,-18,-16,3,-9,5,-38,-10,27,-127,14, 
  /* [82][0][][] */ -80,-25,26,-120,-3,-46,-3,-45,-43,-40,-57,-125,-23,-127,-100,21, 
  /* [83][0][][] */ -4,6,-32,-77,-53,13,-6,48,-83,-11,-1,-76,33,-127,14,63, 
  /* [84][0][][] */ 127,35,25,39,-54,0,-59,24,-12,-20,101,16,-64,17,82,-65, 
  /* [85][0][][] */ -3,-27,19,-30,47,-7,-40,127,-101,-115,-74,-32,-12,72,94,-127, 
  /* [86][0][][] */ 15,-3,1,5,-54,60,-40,36,-96,-50,21,-26,-10,-127,-19,19, 
  /* [87][0][][] */ 127,-48,22,-11,-32,-29,-4,-12,8,13,-104,16,45,-14,7,35, 
  /* [88][0][][] */ 51,95,-16,3,-8,-22,-19,-6,108,19,46,49,-15,-25,127,-107, 
  /* [89][0][][] */ 42,63,-88,-19,-34,-32,30,-63,43,43,17,-39,-43,-1,-21,-127, 
  /* [90][0][][] */ -5,-42,13,-69,-72,27,127,-65,108,-93,7,-103,31,-18,-55,-20, 
  /* [91][0][][] */ 15,8,-16,-110,-35,-7,35,-46,-58,35,62,63,24,-21,32,127, 
  /* [92][0][][] */ 10,1,8,5,60,-7,-65,-127,39,-60,0,-18,-29,-12,3,-15, 
  /* [93][0][][] */ 74,-7,33,-127,-47,-12,-26,59,40,-85,75,-14,-29,127,-24,33, 
  /* [94][0][][] */ -112,39,-103,9,70,-127,-13,-3,1,-45,97,-31,4,-7,-11,-12, 
  /* [95][0][][] */ -33,51,12,-127,-10,3,-25,-6,15,-33,-57,-80,-8,21,-58,-15, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00063741899793967605, 0.00066063407575711608, 0.00036379118682816625, 0.00030200608307495713, 0.00064520101295784116, 0.00099252292420715094, 0.0013834285782650113, 0.0010337748099118471, 0.00022023719793651253, 0.0012383154826238751, 0.00063376995967701077, 0.00058666826225817204, 0.00041686085751280189, 0.00055700406664982438, 0.00025735725648701191, 0.0010017341701313853, 0.00052728562150150537, 0.00047164023271761835, 0.00048879673704504967, 0.00048367687850259244, 0.00095951039111241698, 0.0015689108986407518, 0.00058421219000592828, 0.002222754992544651, 0.0023807359393686056, 0.00068248691968619823, 0.00044966710265725851, 0.00061785313300788403, 0.00090605119476094842, 0.00031348419724963605, 0.00018281012307852507, 0.00035560631658881903, 0.00073693232843652368, 0.0008940710686147213, 0.00052456482080742717, 0.00067979068262502551, 0.0010097365593537688, 0.0014875094639137387, 0.00036349336733110249, 0.0023503536358475685, 0.00042636247235350311, 0.00047325564082711935, 0.00022651550534646958, 0.00083584513049572706, 0.00034742458956316113, 0.0004801846225745976, 0.00082387623842805624, 0.0004739266587421298, 0.00018844900478143245, 0.00051522150170058012, 0.00066923798294737935, 0.00053277926053851843, 0.0010669586481526494, 0.00083512294804677367, 0.0011876246426254511, 0.00047840585466474295, 0.00048283408978022635, 0.00036704330705106258, 0.0010434859432280064, 0.00063716224394738674, 0.0011275199940428138, 0.00023584804148413241, 0.00066913955379277468, 0.00048979598795995116, 0.00059498258633539081, 0.00062746868934482336, 0.00077382224844768643, 0.00054122350411489606, 0.0008368320413865149, 0.0006060113082639873, 0.0005727962707169354, 0.00051338475896045566, 0.00033772242022678256, 0.00053363718325272202, 0.0013296345714479685, 0.00080888002412393689, 0.00082300935173407197, 0.0010202053235843778, 0.00088255485752597451, 0.0009727784781716764, 0.00036892513162456453, 0.00039694362203590572, 0.00057449605083093047, 0.00041404229705221951, 0.0013776114210486412, 0.00072850222932174802, 0.00068618939258158207, 0.00018549332162365317, 0.000454653927590698, 0.00056533585302531719, 0.0006913419347256422, 0.001144157606177032, 0.00059294991660863161, 0.00045549377682618797, 0.000855071353726089, 0.00045586144551634789, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -3604, -4032, -9250, 32713, 27698, 6077, -7329, -4213, 23599, 2294, 27763, 23427, -9790, 11845, 33595, -27761, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00044298791908659041, 0.00026348541723564267, 0.00024739580112509429, 0.00022712397912982851, 0.00032108000596053898, 0.00032572579220868647, 0.00030756098567508161, 0.00036944207386113703, 0.00020205047621857375, 0.00026269810041412711, 0.00037637873901985586, 0.00063374475575983524, 0.00045731966383755207, 0.0004721889563370496, 0.00039779956568963826, 0.00029794842703267932, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 2,21,-5,21,48,62,-28,-32,46,-1,13,6,-14,12,18,67,4,-5,-12,-11,92,-55,2,-9,-18,-36,-42,-86,-3,-6,47,50,111,-9,6,1,16,-24,-15,16,-30,16,27,-25,0,-27,-18,21,-10,19,0,-12,-38,-17,5,0,39,19,-19,-18,-60,30,-4,-14,9,6,56,5,13,2,4,-21,-67,0,-2,1,-3,-81,3,-22,38,-21,-50,-40,31,-7,7,28,-4,2,17,-34,20,15,-10,127, 
  /* [1][0][][] */ 82,-89,52,75,-4,-73,-7,-47,-18,-96,-1,21,3,-61,-42,-48,-75,-2,15,16,-27,-100,-46,31,127,-61,-74,26,-21,89,-10,57,18,8,-37,18,-11,-18,51,-20,-4,-69,79,-27,-52,9,49,-9,41,24,1,-63,58,-83,31,-22,21,20,-9,-97,35,-60,29,-53,0,-81,29,52,48,44,-32,3,-104,41,-20,58,39,100,12,-20,47,6,-71,35,-75,71,4,68,-42,19,16,8,7,-49,36,4, 
  /* [2][0][][] */ 24,21,12,-24,12,4,-2,39,60,-13,10,72,2,12,49,6,-5,-19,18,-7,-21,-63,3,-61,-3,-11,-25,23,-8,21,127,-65,13,-69,-26,64,24,122,-45,-23,3,-23,-3,30,-40,-53,-64,22,22,36,-29,-40,23,-2,3,-28,-29,3,-1,29,9,-4,87,92,6,-76,15,-73,-15,-13,-10,11,-27,9,-26,19,17,60,7,17,15,92,36,-19,-13,11,14,4,25,8,2,-58,-43,2,-12,62, 
  /* [3][0][][] */ -17,-18,-34,35,26,-16,2,-18,-19,18,-5,5,11,-17,45,-10,40,-41,18,14,-12,-8,-8,-1,-19,13,6,-5,15,-45,51,-18,16,-9,-12,41,-8,-4,-15,7,6,-68,19,-32,-1,0,4,8,-127,48,-10,20,-109,-51,-24,-32,25,12,-10,55,-5,15,14,13,-14,-84,-39,24,51,19,0,24,-46,7,-9,-42,-42,-54,29,-39,13,-21,23,60,35,48,32,5,31,-5,-7,4,-27,0,-19,-29, 
  /* [4][0][][] */ -7,-24,20,-67,5,-10,-47,11,-19,-47,-35,-8,7,76,5,10,54,-9,1,0,-11,28,47,2,0,-1,19,6,-2,-4,-9,-7,-40,8,-2,21,34,-25,8,-5,11,3,-107,-24,28,-2,-14,-9,-1,86,-14,-23,-25,-15,9,-3,3,-35,27,28,14,1,10,-8,36,-111,26,-25,-46,12,-19,1,-17,13,-24,26,-18,69,58,8,14,2,127,-44,42,-24,-13,-9,61,13,2,13,-32,19,-1,-49, 
  /* [5][0][][] */ -12,8,5,-1,0,-6,5,107,51,-16,-21,-31,-14,27,29,24,-15,-16,-4,-35,-49,-9,-9,-48,16,10,17,70,62,11,59,52,-51,16,-3,-4,-46,-56,-23,-8,-38,-20,-8,1,62,14,2,16,6,15,-18,2,-32,-17,3,2,-17,-19,-3,37,-43,16,-10,-45,7,14,-26,3,2,18,4,2,21,7,1,-8,1,29,12,116,-1,-42,28,27,7,-3,20,-36,-6,-18,20,-127,-28,-25,-7,-108, 
  /* [6][0][][] */ -20,-2,-5,-57,-4,-24,-9,10,1,15,-10,-7,30,-59,1,-10,-2,-61,24,6,9,7,-24,25,76,-6,-5,5,25,-8,15,-7,-17,-3,-17,0,23,-1,23,38,-8,-22,-44,-15,-3,-25,21,-127,27,29,20,14,12,-1,-12,-42,37,-10,-1,12,18,23,4,8,32,60,23,-15,-17,-15,12,-24,15,11,45,-12,-28,29,1,4,-21,-5,48,-28,2,47,21,-14,19,8,-41,-4,-17,8,-9,19, 
  /* [7][0][][] */ 12,12,32,-23,-13,6,-5,-26,-9,-9,-18,-12,-6,-98,30,3,-6,-38,-12,-5,15,-20,-33,-5,-22,-11,-1,-12,8,7,8,4,-10,6,-7,-19,5,-9,-34,25,8,-14,-20,26,-7,10,-13,77,-3,27,-13,-28,-23,8,-3,-48,38,2,1,5,-9,9,-12,-8,-22,39,10,-29,-14,-4,9,42,-12,-14,-10,11,53,3,-2,-25,6,-38,37,-4,-38,127,-4,-1,-31,-22,-2,24,-26,1,-9,7, 
  /* [8][0][][] */ -68,40,-56,-4,37,-1,-19,31,12,75,-43,7,16,37,74,-14,-7,36,-73,16,18,27,-26,-10,-47,-23,26,7,54,-88,1,-10,30,5,9,-5,-24,32,-40,40,9,15,-3,-127,-34,-5,51,-27,-49,19,2,71,-102,75,24,-8,6,-21,-27,-27,6,-33,-1,26,-29,37,30,-26,-16,-3,31,74,-16,30,42,34,-4,-95,-1,-37,-16,-10,13,8,-60,3,11,-46,3,33,-24,6,28,-10,-17,-16, 
  /* [9][0][][] */ 22,-60,-42,-30,23,29,-26,26,31,-13,-8,14,-41,-18,12,24,-8,8,37,-15,-30,7,-25,-40,40,9,27,-18,-40,-32,-25,3,-13,16,19,40,11,47,-32,24,14,7,-15,-88,3,-6,23,-127,-40,6,-2,23,-21,8,-9,4,-43,29,-7,16,6,9,14,26,25,117,40,39,9,-5,11,-17,-17,-3,-38,15,67,0,16,16,-6,7,19,-43,3,18,-5,-6,-52,35,-33,-5,9,3,11,-17, 
  /* [10][0][][] */ 28,53,-24,34,65,-110,-8,-23,9,53,34,-3,-9,28,17,-72,12,41,-28,33,-81,-14,-7,-36,-68,-28,-53,53,19,14,4,31,-5,-15,26,-11,71,-24,-9,-12,-18,66,41,-16,-55,-9,-35,11,-22,-17,-38,1,-12,-8,2,-14,12,29,-26,-15,4,11,-15,22,11,48,58,26,20,3,28,46,-52,-23,-56,-17,-2,23,-17,14,33,-1,-63,-26,64,-54,90,-12,-23,18,22,-14,76,42,-11,-127, 
  /* [11][0][][] */ 38,38,-34,20,-6,18,48,6,-6,-13,-28,-9,3,-2,38,0,-3,-10,-94,-2,0,12,7,-10,-43,-21,-8,-3,-1,17,1,-9,-5,9,6,19,5,17,-10,17,5,27,55,-97,29,-39,4,-1,-127,12,10,-52,25,20,-7,16,-16,-9,9,0,13,-19,-10,9,-48,49,-19,11,13,2,21,8,-48,-29,13,32,1,-38,-47,4,8,-3,84,43,6,-12,-13,-10,6,20,-15,0,-3,10,-23,15, 
  /* [12][0][][] */ -38,-6,11,3,-22,39,10,-1,127,4,-19,2,1,5,-40,-50,25,24,11,83,54,31,-13,-19,6,7,13,-34,-118,6,29,-37,0,-9,-6,-17,20,4,45,1,-44,-23,-1,12,0,34,3,0,16,11,-46,7,5,-5,18,4,83,-23,10,15,13,-19,14,-13,-9,25,-41,-5,1,6,-21,-31,15,10,-70,10,34,-7,12,-69,-16,4,46,37,-18,-22,-30,-34,10,14,1,48,-13,-27,13,18, 
  /* [13][0][][] */ 29,-10,-26,25,26,0,10,-1,-8,4,10,-1,12,-12,13,-14,16,-71,-32,9,-6,-20,11,3,7,8,-2,-1,-7,-33,-3,13,3,7,9,39,13,-1,4,13,1,12,23,35,18,14,-8,-127,21,-6,5,7,-12,-1,15,7,-14,18,20,14,6,17,-3,4,-9,-19,-20,-50,8,14,-9,-35,-13,36,-5,19,-23,-1,16,-4,26,-11,-16,16,12,26,8,21,-2,-1,20,-3,2,16,-13,-5, 
  /* [14][0][][] */ -118,-57,21,52,30,-23,-38,16,-20,11,-7,15,69,9,-123,-3,74,-19,-11,27,-10,-12,46,15,-113,5,37,-19,-33,-76,-26,-8,2,3,22,-67,23,41,-4,20,21,39,1,-40,17,127,79,53,-109,55,14,36,-47,1,40,-3,8,16,62,52,33,54,1,53,-1,-19,-38,45,1,83,-60,-94,-74,3,3,49,-11,37,90,-4,57,15,37,34,42,5,48,40,32,42,69,2,-5,34,23,-26, 
  /* [15][0][][] */ 93,-21,40,0,-6,70,42,-18,-10,48,14,4,-94,-8,-17,37,20,44,46,-17,12,20,-93,75,28,13,56,-1,32,38,-59,-79,11,-55,44,0,42,-42,-51,-100,-4,38,8,42,-3,51,-30,-44,103,-49,-47,23,41,-127,64,-105,-3,-68,23,23,-118,4,31,20,74,-21,-59,51,-24,75,-32,17,38,31,13,5,28,-49,63,-17,-14,-4,36,79,-21,2,5,-45,4,5,71,-1,-59,59,21,-10, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.018826985731720924, 0.011198130436241627, 0.010514321736991405, 0.0096527691930532455, 0.0136458994820714, 0.013843345455825329, 0.013071341440081596, 0.015701288357377052, 0.0085871452465653419, 0.011164668947458267, 0.015996096655726433, 0.026934152469038963, 0.019436085596680641, 0.020068030804395676, 0.016906481236219406, 0.012662807479500771, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 10807, -9037, 3394, 47503, -2279, -5107, -10499, 2608, -2388, 784, 2751, -1768, 1752, -4838, 6699, -4300, -930, 17509, 24929, 2728, 954, -2815, 577, 115, 16202, -752, -413, -3783, -5893, -7462, 6854, -8869, -447, -1433, -354, 15738, 1202, -4337, 20787, 301, -905, 1545, -9680, -7905, -7295, 69387, -130, 14234, 29559, -12409, -296, 8623, 7100, -298, -5681, 2128, -10268, 1741, 2430, -7040, -1673, -824, -13811, -923, 1611, 16297, 29141, 22330, -11801, 67, -9695, -1233, 56496, 10798, -152, 708, 18293, 33958, -420, -7532, -1633, -4005, 782, -3260, 609, -538, 1632, -389, 1918, -3233, 112, -513, -633, -369, 354, 49333, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00018675134924706072, 0.00011756951425923035, 0.00027839455287903547, 4.3755502701969817e-05, 0.00014506367733702064, 0.0001642464631004259, 0.00032256887061521411, 7.4037649028468877e-05, 0.00011943391291424632, 0.00036913665826432407, 0.00013690046034753323, 0.00032077744253911078, 0.00011551351053640246, 0.00042497951653786004, 0.00015589616668876261, 0.00018683525559026748, 8.5368628788273782e-05, 0.00030270955176092684, 6.2428378441836685e-05, 0.00021342096442822367, 5.7396875490667298e-05, 0.00018279005598742515, 0.00016446193330921233, 0.00033184757921844721, 0.00022384973999578506, 0.00023887734278105199, 0.00014032417675480247, 0.00016234915528912097, 0.00011026198626495898, 0.00012314339983277023, 0.00012066183990100399, 0.00017635151743888855, 0.00012533905101008713, 0.00012666221300605685, 0.00018646035459823906, 0.00015041060396470129, 0.0003598881303332746, 0.00014101668784860522, 5.5431610235245898e-05, 0.00016401828906964511, 0.0001791779650375247, 0.000277741375612095, 0.00034240755485370755, 0.00017340201884508133, 0.0001817408628994599, 6.6898457589559257e-05, 0.00024903405574150383, 0.00024885530001483858, 8.9074143033940345e-05, 0.00017152095097117126, 0.00017566241149324924, 0.00014269594976212829, 0.0002234089479316026, 0.0002832846948876977, 0.0002362477098358795, 0.00038155255606397986, 0.0003815916134044528, 0.00022505929518956691, 0.0001053214946296066, 7.8756267612334341e-05, 0.00034156013862229884, 0.00014609437494073063, 0.00025817210553213954, 0.00011532358621479943, 0.00020707774092443287, 0.00017593370284885168, 9.2893838882446289e-05, 8.0287463788408786e-05, 0.00035480281803756952, 0.00025149210705421865, 0.000191631363122724, 0.00012518065341282636, 0.0001019704359350726, 0.00014571601059287786, 0.00015211511345114559, 0.0002703749923966825, 0.00049962912453338504, 5.6060805945890024e-05, 0.0002540821151342243, 0.0002548743796069175, 0.00015443777374457568, 0.00051032286137342453, 0.00012931991659570485, 0.00014418279170058668, 0.00014237154391594231, 9.8437601991463453e-05, 0.00013114076864439994, 0.0001768014335539192, 0.00020961128757335246, 0.00011840334627777338, 0.00021233737061265856, 0.00011175726831424981, 0.00015056174015626311, 0.00043886847561225295, 0.0035231930669397116, 7.7957927715033293e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,6,-20,104,-16,23,-62,-53,16,-6,100,-9,4,-7,-4,53,4,16,-32,3,74,3,31,-33,2,17,43,48,21,12,23,48,-6,28,10,-15,4,49,-57,-26,20,9,27,18,-85,-56,25,-5,-11,-20,-8,-7,49,6,-9,1,-2,-36,27,-30,26,-2,127,27,-13,-11,11,-54,65,36,2,-7,79,-32,69,4,17,-127,29,63,1,15,127,-13,38,29,-29,-20,35,-7,-14,82,0,19,-2,13, -49,13,-8,10,52,-7,-10,-127,38,13,-127,-4,-17,-11,5,92,19,-30,-13,-15,78,-96,127,27,-62,-31,-105,-15,28,35,-48,18,118,12,-15,-1,-24,127,-61,-127,9,-19,-30,14,46,-127,127,-44,-77,50,49,7,38,-63,31,56,37,42,-103,83,127,34,4,-20,43,-38,-96,-1,37,-30,-18,45,-49,-48,104,-4,-30,-60,-33,63,-66,62,-16,9,-11,48,54,-40,-28,54,-13,72,-127,-31,24,-127, 0,-4,-23,-73,8,18,38,22,-4,-1,4,62,1,-12,-11,6,-13,17,-15,17,6,25,23,-31,1,-30,10,12,-8,5,46,-79,45,17,8,-23,11,4,-30,-20,8,3,-15,8,23,-31,21,1,6,-8,6,-5,5,6,-6,8,-7,45,6,-2,10,-18,3,-17,-26,-18,30,-51,-105,-7,41,-18,-127,-23,-13,16,11,-11,5,12,-14,23,-36,-3,-40,21,26,35,-24,-17,24,-11,20,7,-2,-44, 
  /* [0][1][][] */ -41,57,-18,37,-84,-16,-11,-44,25,95,-44,-22,-30,-25,-7,62,127,-24,-90,-14,59,-127,-29,16,-36,-47,-127,-6,37,35,-50,28,-127,-75,-58,3,64,-3,-51,46,-19,86,0,-2,35,-52,-12,-32,127,43,-3,20,45,9,-36,-18,31,9,-126,127,-36,-89,21,127,-59,-35,-83,126,-37,127,-18,53,-36,-55,36,7,-35,-70,127,47,127,35,6,-1,127,29,-96,47,-38,-35,-102,40,97,102,29,-57, 127,127,127,127,-45,-127,127,23,127,-127,17,-127,-108,127,127,127,-15,-127,-62,-127,127,22,-67,127,127,127,-56,-127,127,127,-127,127,-10,-127,-126,127,-127,-45,93,110,-127,-127,127,127,127,-118,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-104,-28,-69,-67,127,127,-72,127,127,-107,-127,127,-42,127,-127,-127,-127,123,-74,127,-44,127,78,127,-38,-127,-26,-106,-127,-126,-22,-127,-22,-127,-127,115, -24,65,-38,3,127,71,-21,49,5,24,-12,-5,-26,-31,-13,-7,-105,-22,-127,39,31,77,-12,-116,-34,-40,123,71,9,35,73,8,126,-48,127,-4,54,4,-93,14,36,23,-23,1,-23,-53,-12,-42,81,14,-11,39,-5,-4,-75,-14,24,20,127,-88,2,127,1,-36,-111,-28,-74,100,14,-16,112,24,-17,-57,10,46,-28,-8,-44,-3,-47,7,45,24,-90,36,127,-46,32,-22,127,-10,-112,34,34,20, 
  /* [0][2][][] */ -5,-39,-21,-61,-4,14,40,31,-1,10,-20,51,24,-34,-7,7,41,2,14,21,-9,31,-17,-25,1,-24,8,3,-9,-7,49,-74,-39,66,-29,-25,31,-35,-63,16,9,10,-34,20,12,-79,-12,-1,-9,6,17,-8,7,0,-22,6,-2,43,-50,34,-6,-13,5,17,-6,-9,22,-54,-57,11,-21,-12,-120,-32,0,17,15,-11,56,16,22,22,-39,15,11,25,-21,10,5,25,22,-6,20,39,-7,-29, -28,-9,-27,24,-44,74,-24,65,6,-5,55,-12,127,-7,-18,-17,-2,-40,-57,24,-23,79,-45,-111,-47,-47,100,69,14,44,55,-2,-122,62,-16,-23,-29,-27,-127,-4,45,-14,-15,36,-27,-45,-18,-48,-60,27,69,24,-11,-80,30,52,17,26,75,-55,20,-57,-9,0,19,-26,-127,-57,-11,-27,-62,24,37,-47,-30,-7,-44,23,-57,0,49,36,19,11,5,63,-94,127,16,127,-31,-18,114,-22,47,83, -9,-34,-26,29,13,65,-43,13,4,-6,1,13,12,-51,-9,-13,-45,-6,19,20,-23,6,-21,4,-4,19,-3,51,-3,-6,35,28,18,41,19,-23,-6,-27,-31,8,11,-11,22,9,-74,-33,-13,4,-2,-15,-1,-4,-8,8,-17,-5,-2,-51,13,-28,-20,49,9,-29,-10,-2,36,-55,45,6,52,-21,30,-56,-19,21,11,10,-6,21,-31,31,88,-14,-18,55,37,-8,109,12,2,-19,9,-23,-6,-49, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0079369321465492249, 0.0049967044033110142, 0.011831768788397312, 0.0018596088048070669, 0.006165205966681242, 0.0069804745726287365, 0.013709177263081074, 0.0031465999782085419, 0.0050759413279592991, 0.015688307583332062, 0.0058182692155241966, 0.013633041642606258, 0.0049093239940702915, 0.018061628565192223, 0.0066255871206521988, 0.0079404981806874275, 0.0036281666252762079, 0.012865155935287476, 0.0026532060001045465, 0.0090703908354043961, 0.0024393671192228794, 0.0077685769647359848, 0.0069896318018436432, 0.014103521592915058, 0.0095136137679219246, 0.010152286849915981, 0.0059637776575982571, 0.0068998392671346664, 0.0046861344017088413, 0.0052335946820676327, 0.0051281279884278774, 0.0074949394911527634, 0.0053269094787538052, 0.0053831436671316624, 0.0079245651140809059, 0.006392450537532568, 0.015295244753360748, 0.0059932093136012554, 0.0023558433167636395, 0.0069707771763205528, 0.007615063339471817, 0.011804007925093174, 0.014552321285009384, 0.0073695858009159565, 0.0077239866368472576, 0.0028431843966245651, 0.010583947412669659, 0.01057635061442852, 0.0037856509443372488, 0.0072896401397883892, 0.0074656521901488304, 0.0060645779594779015, 0.0094948802143335342, 0.012039599008858204, 0.010040527209639549, 0.016215983778238297, 0.016217643395066261, 0.0095650199800729752, 0.0044761635363101959, 0.0033471412025392056, 0.014516305178403854, 0.006209010723978281, 0.010972314514219761, 0.0049012522213160992, 0.0088008036836981773, 0.00747718196362257, 0.0039479881525039673, 0.0034122171346098185, 0.015079119242727757, 0.010688414797186852, 0.0081443330273032188, 0.0053201774135231972, 0.0043337433598935604, 0.0061929305084049702, 0.0064648920670151711, 0.011490936391055584, 0.021234238520264626, 0.00238258414901793, 0.010798489674925804, 0.010832160711288452, 0.0065636052750051022, 0.02168872207403183, 0.0054960963316261768, 0.006127768661826849, 0.0060507901944220066, 0.0041835978627204895, 0.0055734827183187008, 0.0075140609405934811, 0.0089084794744849205, 0.0050321421585977077, 0.0090243378654122353, 0.0047496836632490158, 0.0063988738693296909, 0.018651910126209259, 0.1497357040643692, 0.0033132117241621017, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 19573, 1273, 8111, -727, 5846, 6701, 17785, 6164, -1492, 21769, 6674, 1947, 8696, 55779, -442, -2723, 14073, 15165, 2390, -206, -657, 14443, 5621, 2548, 11547, 5790, 5109, 4726, 29, -1, 5204, 12133, 18994, 2360, 6903, -681, 28675, 8749, 956, 6258, 749, 11214, 14595, 6238, 4847, 11461, 18954, 6238, 6340, 3074, 285, -721, 23068, 6906, 10528, 17108, -391, 10270, 4164, 4789, 18900, 7937, 3675, 7593, 7755, 4571, 7013, -837, 26650, 9983, 14019, -1566, -1731, 3168, 1554, 5132, 28244, 18311, 17496, -2133, 8605, -7616, -1967, 723, 8034, 7341, 9217, 5235, 12932, 6021, 9028, 4329, 15732, 22318, -9563, 14731, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00013295871031004936, 0.00026982856797985733, 0.00016661775589454919, 0.00076354981865733862, 0.00027236211462877691, 0.00013606918219011277, 0.00017624582687858492, 0.00056807562941685319, 0.00029630461358465254, 8.2846949226222932e-05, 0.00021360231039579958, 0.00042240356560796499, 0.00031873624539002776, 8.683885243954137e-05, 0.00024539988953620195, 0.00025075968005694449, 0.00015929841902107, 0.0001546056882943958, 0.00018301626550965011, 0.00057954713702201843, 0.00042713186121545732, 0.00017042508989106864, 0.00026689580408856273, 0.00030957895796746016, 0.00015287246787920594, 0.00035796820884570479, 0.00028254999779164791, 0.00019108498236164451, 0.00065510440617799759, 0.00032588274916633964, 0.0002753004664555192, 0.00015613355208188295, 0.00010381329775555059, 0.00046544129145331681, 0.00024470381322316825, 0.00042552163358777761, 7.9421130067203194e-05, 0.00029933371115475893, 0.00049149070400744677, 0.00015245449321810156, 0.00063691620016470551, 0.00016785213665571064, 0.00014505608123727143, 0.00011898543743882328, 0.00023472998873330653, 0.00028422387549653649, 0.00014985923189669847, 0.00023281633912120014, 0.0002481424598954618, 0.00028324354207143188, 0.00044148371671326458, 0.00089006067719310522, 0.00011628145875874907, 0.00022895146685186774, 0.00022203131811693311, 0.00010875159205170348, 0.00033158474252559245, 0.00016947825497481972, 0.00018996626022271812, 0.00033751412411220372, 9.0358946181368083e-05, 0.00017601884610485286, 0.00028158727218396962, 0.0003636433684732765, 0.00013764754112344235, 0.00024164996284525841, 0.00027811157633550465, 0.00040385563625022769, 0.00010070236749015749, 0.00011675037239911035, 0.00014182893210090697, 0.00030883803265169263, 0.00022114308376330882, 0.00041479256469756365, 0.00028112318250350654, 0.00025137004558928311, 8.3432634710334241e-05, 0.00024540812592022121, 9.6225659945048392e-05, 0.0005784478853456676, 0.0001269111962756142, 0.00027310251607559621, 0.00019710719061549753, 0.00037207710556685925, 0.00020011010929010808, 0.00021425596787594259, 0.00017625660984776914, 0.0002621158491820097, 0.00013169259182177484, 0.00026407110271975398, 0.00015515658014919609, 0.00038884591776877642, 0.00013468750694300979, 0.00012268606224097311, 0.000305716268485412, 0.00022064648510422558, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 43,-25,127,98,76,-32,15,-38,111,-9,-64,-61,37,75,-30,-79, 
  /* [1][0][][] */ 22,63,1,-13,82,-13,2,33,56,63,-21,127,8,-17,97,-76, 
  /* [2][0][][] */ 31,-57,6,7,-49,27,-53,73,-72,-85,2,79,-13,-127,73,-90, 
  /* [3][0][][] */ 117,120,-7,37,-127,-6,-59,-22,9,-1,116,-76,-63,93,-42,-41, 
  /* [4][0][][] */ 4,-7,22,5,-25,30,-13,52,-67,-37,2,3,-11,-127,34,-3, 
  /* [5][0][][] */ 127,-41,-20,-2,-14,-115,-19,21,-10,20,-111,-3,31,-16,3,36, 
  /* [6][0][][] */ -127,-75,-18,92,-51,7,-36,26,-106,-66,-62,-38,29,47,4,92, 
  /* [7][0][][] */ -15,18,-74,51,45,-127,-29,38,6,-33,11,-6,-5,18,-45,11, 
  /* [8][0][][] */ 30,-50,-13,-7,7,30,-60,-56,-5,6,-64,5,-127,7,-4,27, 
  /* [9][0][][] */ 33,-52,70,127,-5,15,-13,-74,123,-89,-3,-13,-8,46,-76,20, 
  /* [10][0][][] */ -122,-67,-17,-56,95,33,49,65,101,-61,-98,18,111,-118,-127,97, 
  /* [11][0][][] */ 37,-11,-127,16,48,26,-18,40,-16,-29,-11,-7,2,17,-41,4, 
  /* [12][0][][] */ 89,-47,4,13,-5,-49,-63,-33,38,2,-127,-22,-53,-20,-6,47, 
  /* [13][0][][] */ 27,-73,45,-92,127,30,-94,-121,72,-76,39,26,-4,2,21,-12, 
  /* [14][0][][] */ -53,27,-90,-52,86,-127,59,-66,52,54,-9,-90,31,107,-17,35, 
  /* [15][0][][] */ 25,-5,59,43,54,-50,-38,-11,20,-57,-63,-2,-127,-49,-14,52, 
  /* [16][0][][] */ -121,73,16,7,3,92,52,77,-32,29,127,14,-4,13,7,-48, 
  /* [17][0][][] */ -6,-12,-45,-32,-40,7,38,81,-22,127,-25,13,-4,81,65,3, 
  /* [18][0][][] */ -1,127,-56,-6,9,-2,50,-80,33,124,-49,113,14,-46,40,-95, 
  /* [19][0][][] */ 5,-21,32,19,6,47,-10,13,15,3,-41,-9,-127,1,-9,24, 
  /* [20][0][][] */ 92,-62,-5,-80,-34,14,28,-74,-52,23,-127,-33,29,6,51,11, 
  /* [21][0][][] */ 61,-18,127,60,-25,62,18,-8,-8,22,-29,-15,-20,78,-5,-13, 
  /* [22][0][][] */ 24,10,20,3,-22,-1,20,127,10,2,18,38,10,43,32,27, 
  /* [23][0][][] */ -17,18,-86,17,25,-127,9,35,0,-26,-18,-3,-61,7,-6,38, 
  /* [24][0][][] */ 47,-68,8,-51,58,-6,-34,-18,38,26,51,98,-49,83,127,37, 
  /* [25][0][][] */ -127,-87,-49,-4,9,-2,14,-30,-61,-1,-74,13,27,34,35,54, 
  /* [26][0][][] */ 16,-8,39,4,-1,11,-43,54,-76,-66,-12,13,1,-127,40,-22, 
  /* [27][0][][] */ -94,45,-43,30,39,-36,-3,36,35,-36,127,36,-26,12,-19,-25, 
  /* [28][0][][] */ -22,-12,18,31,-5,7,8,84,32,11,-20,-9,-127,-8,-9,36, 
  /* [29][0][][] */ -8,59,41,-33,36,-20,19,-22,-127,31,-31,8,-1,29,-84,9, 
  /* [30][0][][] */ -9,-4,-127,-33,27,-59,3,18,-13,-9,-6,-16,-38,-23,13,12, 
  /* [31][0][][] */ 116,-23,-127,-1,29,-3,-37,56,-26,-1,-65,-54,19,-21,-72,37, 
  /* [32][0][][] */ -127,54,29,53,11,98,23,27,26,-1,117,-2,-34,13,-23,-33, 
  /* [33][0][][] */ 9,-22,127,-18,-69,23,1,-42,1,9,-9,22,-8,23,38,14, 
  /* [34][0][][] */ -8,-34,-42,-108,29,3,-5,-38,-20,-68,-46,-127,-14,1,45,13, 
  /* [35][0][][] */ -1,-42,42,40,55,-29,12,-24,-120,34,-7,29,-17,127,-39,-41, 
  /* [36][0][][] */ -107,43,-30,-1,-18,50,44,97,3,27,127,-4,1,20,23,-20, 
  /* [37][0][][] */ -33,9,127,-36,-67,-66,22,-29,21,18,0,12,5,-55,67,18, 
  /* [38][0][][] */ 10,-18,-12,31,38,-55,-67,15,-9,-19,74,-5,127,34,-15,7, 
  /* [39][0][][] */ -26,-25,0,-35,-53,-71,61,127,-26,-18,8,-48,-10,56,54,48, 
  /* [40][0][][] */ 72,-10,-14,-9,-5,85,-22,10,19,-10,12,4,127,15,-25,-22, 
  /* [41][0][][] */ 0,-14,-37,-127,27,-12,-30,-70,-11,-49,4,-32,-1,-17,-21,39, 
  /* [42][0][][] */ 40,47,-1,111,-126,1,-107,4,-73,-68,89,-94,-49,127,-34,18, 
  /* [43][0][][] */ 20,108,-27,127,22,19,40,-74,-37,82,-10,22,6,-44,50,33, 
  /* [44][0][][] */ -11,-21,-127,18,47,67,-38,52,-21,-18,33,-16,15,-34,-56,7, 
  /* [45][0][][] */ 4,15,-14,-127,-17,3,46,-14,-11,24,-35,23,2,-102,33,-37, 
  /* [46][0][][] */ 7,30,59,-24,12,9,-48,56,13,-44,-24,19,20,127,52,-10, 
  /* [47][0][][] */ 13,-17,22,-45,-39,19,-64,59,-14,-31,23,34,8,-127,39,14, 
  /* [48][0][][] */ 2,-8,9,-127,-10,-12,-3,10,10,-26,17,-14,9,47,-3,52, 
  /* [49][0][][] */ 24,-36,-2,100,80,14,15,53,-57,15,47,33,-10,42,127,-8, 
  /* [50][0][][] */ -30,-13,78,-29,1,126,-31,-64,36,-26,127,40,107,-2,-5,-62, 
  /* [51][0][][] */ 29,39,17,9,19,-1,-48,17,41,1,-1,127,14,26,33,-47, 
  /* [52][0][][] */ -35,69,126,-2,16,-35,20,-52,-41,10,17,36,3,100,-127,-16, 
  /* [53][0][][] */ -4,-20,-45,-127,-40,4,22,-28,-13,36,16,-3,20,-20,41,10, 
  /* [54][0][][] */ 4,16,-25,-50,21,13,-14,11,59,-23,6,-27,-15,127,15,31, 
  /* [55][0][][] */ -13,-32,-29,-5,11,-43,-20,-127,9,-88,-13,-1,-27,-68,-35,-17, 
  /* [56][0][][] */ 33,44,24,56,-1,-16,18,127,24,-24,7,-39,75,-11,-45,36, 
  /* [57][0][][] */ 83,-23,127,-28,-65,-65,7,-25,15,11,-102,36,54,-42,52,22, 
  /* [58][0][][] */ 99,91,2,121,-127,-8,-16,38,-12,10,84,-33,-82,-56,-19,-93, 
  /* [59][0][][] */ 127,-32,0,7,-18,-6,0,19,-32,27,-119,-9,7,-10,-4,19, 
  /* [60][0][][] */ -127,29,2,-11,16,5,10,40,14,11,103,8,-29,8,27,-8, 
  /* [61][0][][] */ -127,83,26,24,28,8,-69,-56,119,-88,97,-4,54,-36,-116,-65, 
  /* [62][0][][] */ -31,-44,-127,64,52,103,10,117,39,-49,56,-32,-80,-9,-94,-18, 
  /* [63][0][][] */ -35,6,127,-31,-55,-61,26,-33,5,14,-5,15,-11,-55,64,14, 
  /* [64][0][][] */ 34,52,-6,34,63,-14,77,-127,-9,101,-3,-13,-22,-105,-3,52, 
  /* [65][0][][] */ 3,30,6,-29,73,11,3,-127,-27,-60,-23,-46,-11,-32,39,17, 
  /* [66][0][][] */ -127,5,-20,4,-41,21,15,-36,-72,-34,-74,44,59,28,48,79, 
  /* [67][0][][] */ -1,-37,-2,127,7,-7,-17,31,53,34,0,-10,-5,-37,-84,-11, 
  /* [68][0][][] */ 4,5,-15,127,-61,-10,6,-25,-47,32,23,-31,-21,-73,-26,-44, 
  /* [69][0][][] */ 83,87,14,100,39,-23,60,-127,12,106,16,49,15,-44,35,-5, 
  /* [70][0][][] */ 9,-48,-6,-98,127,-33,56,31,90,-34,80,-67,1,109,95,112, 
  /* [71][0][][] */ 20,40,10,85,46,-127,-41,84,37,-81,8,22,19,-61,-55,38, 
  /* [72][0][][] */ -127,-75,-13,46,14,33,-25,26,-47,-26,-87,44,54,16,7,98, 
  /* [73][0][][] */ -18,-15,-9,62,20,-18,-5,-21,74,10,-4,5,20,127,-62,-43, 
  /* [74][0][][] */ 63,-54,11,-36,-50,-24,29,-18,-42,-20,-127,22,-120,-1,33,57, 
  /* [75][0][][] */ -9,-24,-28,127,-35,4,-8,-23,-66,22,-15,-27,3,-56,-14,-32, 
  /* [76][0][][] */ -2,-13,-8,51,41,20,-13,-127,17,-118,7,19,-26,-27,36,-47, 
  /* [77][0][][] */ 127,-30,38,48,-37,-4,-41,-2,47,-7,-40,45,42,17,-53,36, 
  /* [78][0][][] */ -17,0,48,-8,12,-13,-60,26,41,-30,-38,-36,23,127,35,-29, 
  /* [79][0][][] */ -5,20,45,19,44,59,-50,-58,13,-43,74,-18,127,-30,-28,-44, 
  /* [80][0][][] */ -122,-104,-86,127,3,33,31,-13,-77,37,-113,8,70,-100,0,63, 
  /* [81][0][][] */ 55,8,-73,29,127,97,-37,-38,-7,-115,-15,-87,-27,-5,-96,31, 
  /* [82][0][][] */ 115,112,-8,32,-127,-18,-77,-14,-70,-11,114,-58,-48,103,-4,-31, 
  /* [83][0][][] */ 127,46,11,-28,7,-10,-6,33,41,21,90,-32,-50,-27,-25,-78, 
  /* [84][0][][] */ 7,-57,-49,-22,47,26,-10,-127,-18,-58,25,10,-29,-7,-3,-18, 
  /* [85][0][][] */ -38,-10,-53,-58,-13,-9,72,93,-7,127,2,-51,32,70,72,-20, 
  /* [86][0][][] */ 102,-21,1,-7,4,-28,-11,-27,-2,-5,-127,8,11,22,-9,26, 
  /* [87][0][][] */ -24,28,17,-34,-17,64,-31,57,-5,-24,25,10,16,-127,15,11, 
  /* [88][0][][] */ 10,-28,-87,-41,66,-18,-40,-127,4,-27,-14,-20,-29,-8,28,-16, 
  /* [89][0][][] */ 21,-19,25,-127,29,2,-55,101,80,-81,28,10,3,36,36,47, 
  /* [90][0][][] */ -13,23,-44,46,78,-11,111,-93,60,127,-33,50,28,3,-9,-12, 
  /* [91][0][][] */ 45,-14,-36,-13,1,-127,-13,2,-6,0,-47,1,27,-12,12,26, 
  /* [92][0][][] */ 21,-6,127,65,38,10,-7,35,-28,21,-71,20,32,85,-4,-7, 
  /* [93][0][][] */ 127,-32,-34,-16,-31,-53,9,33,-26,37,-121,-1,-3,11,-1,53, 
  /* [94][0][][] */ 16,-17,46,75,110,-32,-7,55,11,-13,-3,51,-5,127,-22,-76, 
  /* [95][0][][] */ -107,35,44,32,22,35,11,9,16,3,127,2,-22,37,-16,-26, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00050368864322081208, 0.0010221939301118255, 0.00063119945116341114, 0.0028925624210387468, 0.0010317917913198471, 0.00051547202747315168, 0.000667673593852669, 0.0021520457230508327, 0.0011224932968616486, 0.00031384979956783354, 0.00080919149331748486, 0.0016001950716599822, 0.0012074712431058288, 0.00032897238270379603, 0.00092965055955573916, 0.00094995507970452309, 0.00060347159160301089, 0.00058569404063746333, 0.00069332210114225745, 0.0021955033298581839, 0.0016181073151528835, 0.00064562284387648106, 0.0010110837174579501, 0.0011727806413546205, 0.00057912810007110238, 0.0013560940278694034, 0.0010703866137191653, 0.00072388886474072933, 0.0024817376397550106, 0.0012345444411039352, 0.0010429230751469731, 0.0005914820940233767, 0.00039327680133283138, 0.0017632351955398917, 0.00092701351968571544, 0.001612007268704474, 0.00030087176128290594, 0.0011339684715494514, 0.0018619183683767915, 0.00057754467707127333, 0.0024128351360559464, 0.00063587568001821637, 0.00054951722268015146, 0.00045075354864820838, 0.00088922964641824365, 0.0010767277562990785, 0.00056771299568936229, 0.00088198011508211493, 0.00094004016136750579, 0.0010730139911174774, 0.0016724765300750732, 0.0033718245103955269, 0.00044051004806533456, 0.000867338792886585, 0.00084112316835671663, 0.00041198459803126752, 0.001256145304068923, 0.00064203591318801045, 0.00071965082315728068, 0.0012786076404154301, 0.00034230758319608867, 0.00066681369207799435, 0.0010667394381016493, 0.0013775932602584362, 0.00052145135123282671, 0.00091544463066384196, 0.0010535725159570575, 0.0015299298102036119, 0.00038149164174683392, 0.00044228642946109176, 0.00053729175124317408, 0.0011699737515300512, 0.00083775824168697, 0.0015713622560724616, 0.0010649813339114189, 0.00095226732082664967, 0.00031606855918653309, 0.00092968175886198878, 0.00036453249049372971, 0.0021913391537964344, 0.00048077877727337182, 0.0010345965856686234, 0.00074670289177447557, 0.0014095428632572293, 0.0007580788224004209, 0.00081166770542040467, 0.00066771445563063025, 0.00099297577980905771, 0.00049889215733855963, 0.0010003828210756183, 0.00058778101811185479, 0.0014730683760717511, 0.00051023781998082995, 0.00046477268915623426, 0.0011581475846469402, 0.00083587697008624673, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -40450, 1159, 1527, -7840, 314, -8761, -13458, -39633, 4162, 23665, 32276, -5718, -3706, -21757, 38421, -46282, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00067224580561742187, 0.00073677580803632736, 0.0011341393692418933, 0.0011437574867159128, 0.00070491642691195011, 0.00094702228670939803, 0.00096577854128554463, 0.00061001814901828766, 0.00066325964871793985, 0.00075340562034398317, 0.00071302463766187429, 0.00067294272594153881, 0.00088695209706202149, 0.0013331719674170017, 0.00052039301954209805, 0.00060330063570290804, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -18,0,-20,9,22,0,1,106,-51,19,44,-8,14,-18,-9,12,14,-15,-11,-6,61,-8,18,125,-18,90,-4,-13,26,-13,28,-21,-16,53,23,-47,19,50,20,-16,-109,-24,22,43,36,24,-127,-47, 
  /* [1][0][][] */ -38,-10,21,13,-34,13,2,57,-53,-36,8,-41,-24,-14,3,-4,-26,114,-12,16,5,10,-30,-18,27,-39,20,24,-22,-81,-35,23,-19,-3,34,-3,-3,-37,3,14,-21,-29,127,10,9,-3,20,-11, 
  /* [2][0][][] */ -19,-8,-12,-35,-1,-65,7,-21,1,15,14,26,16,16,-11,8,-3,-19,-25,-11,-5,1,-3,-127,-15,75,-16,5,1,-19,1,-5,-6,55,9,2,23,11,25,-1,-39,4,-20,-7,-3,-12,14,8, 
  /* [3][0][][] */ -5,32,2,-29,0,-2,3,-5,-18,-4,-2,38,-127,5,-5,-1,1,3,-16,-1,-28,9,6,18,-5,-12,2,21,-9,19,5,15,3,2,19,21,-9,25,39,6,12,5,25,-29,8,-5,4,17, 
  /* [4][0][][] */ 40,-30,12,14,20,25,22,-25,-32,1,-16,-21,-2,14,4,18,20,-11,-80,6,-5,13,13,77,4,-24,8,46,8,-79,22,7,11,-32,36,-127,15,33,-3,17,-16,17,12,-25,-9,-23,6,8, 
  /* [5][0][][] */ 32,3,-17,62,-1,-7,6,25,1,-3,37,8,1,52,5,1,-26,19,28,4,9,6,1,-22,1,-49,3,-23,-6,-10,4,5,64,-127,5,34,-11,-14,16,2,-88,58,23,-5,-4,-4,-102,-6, 
  /* [6][0][][] */ 23,-2,7,7,-14,-3,2,-11,-1,6,1,8,-19,8,4,5,-1,-13,127,8,4,11,16,-34,6,4,26,-13,-11,-1,-3,10,1,-9,31,-35,0,-42,73,11,1,-5,-6,5,-10,2,6,-13, 
  /* [7][0][][] */ -40,-16,-10,35,-6,78,-4,41,3,28,-4,127,78,-1,-9,-5,-4,-20,-5,-16,-26,-7,-18,63,0,-39,-53,-31,-8,-12,-14,-11,5,-1,-25,6,5,-56,91,0,20,26,-61,-58,16,-9,7,0, 
  /* [8][0][][] */ -49,-49,-5,4,-5,4,1,29,-1,-70,6,42,52,4,12,7,-15,62,-30,7,-50,25,-6,-15,0,-2,5,44,-5,115,-13,21,-2,0,-19,-127,-114,68,31,26,16,-2,109,-22,8,29,22,32, 
  /* [9][0][][] */ -21,6,-1,31,18,-35,-7,-1,54,-40,5,53,-54,6,13,0,-6,18,-36,-23,48,9,-9,-13,3,12,47,-25,12,7,11,-6,-7,22,74,-99,-6,-127,-92,8,-25,21,56,9,6,6,-18,-39, 
  /* [10][0][][] */ -24,-5,-38,-127,42,92,9,-12,-1,33,27,12,47,-48,-30,23,34,-45,53,-31,34,-22,36,48,-46,-111,9,-33,51,33,43,-46,-27,-85,27,-6,17,-45,7,-36,-38,-62,-11,12,12,12,19,-35, 
  /* [11][0][][] */ 0,48,-3,67,42,-66,-83,-24,5,72,-18,5,-4,53,-6,-81,24,50,10,-6,-52,-109,18,-2,12,-45,16,-17,60,-43,26,-93,44,-20,-44,-96,92,18,3,-127,-7,64,96,-77,-12,-56,36,30, 
  /* [12][0][][] */ 124,-1,-11,17,3,18,2,101,19,-9,-60,-24,-1,15,-12,-4,-9,6,-4,-3,4,3,4,22,2,17,-1,6,-5,11,-6,-1,0,-62,-8,10,-15,-19,-28,0,-13,-79,5,-127,-55,-13,78,-4, 
  /* [13][0][][] */ 9,1,-2,6,8,-9,2,-1,1,6,6,23,-4,2,6,1,7,2,11,4,13,-11,8,-5,2,0,16,127,12,-3,7,-2,6,-1,-39,22,8,-5,5,-15,-14,-2,2,6,-2,-2,-7,-14, 
  /* [14][0][][] */ 55,-25,43,-70,50,34,37,-93,-54,-50,2,121,-65,-7,57,10,54,29,-50,65,24,10,74,-22,18,53,-34,-107,29,-35,59,43,-2,64,-127,-53,-44,41,89,10,-40,12,48,-1,-3,5,18,-32, 
  /* [15][0][][] */ -7,-49,-73,-35,58,31,79,-56,-4,21,-14,-32,81,21,-96,60,63,53,78,-80,-105,-24,54,-20,-98,45,31,57,56,57,47,-41,27,58,99,127,-19,-103,-10,-39,90,64,120,-51,-2,-34,-13,69, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028570447117090225, 0.0313129723072052, 0.048200923949480057, 0.048609692603349686, 0.029958946630358696, 0.04024844616651535, 0.041045587509870529, 0.025925770401954651, 0.028188534080982208, 0.032019738107919693, 0.030303545296192169, 0.028600065037608147, 0.037695463746786118, 0.05665980651974678, 0.022116703912615776, 0.025640277191996574, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -975, 31467, -799, 43567, 4208, 121207, -2633, 47191, 6527, 31245, 30892, 3416, -738, 33347, -2065, -2173, -306, 1247, 4041, -2046, 1697, -3537, -362, -22546, -4816, 42520, 133872, 101541, 2885, 749, -3197, 959, 25848, -1380, 41800, -6057, 47681, -1181, 49403, 3105, -2643, 54083, -1684, 2162, 44106, -224, 6185, 45833, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00010093710443470627, 3.9745875255903229e-05, 0.0001751956733642146, 5.1474606152623892e-05, 0.00013082250370644033, 8.0598802014719695e-05, 0.00014467602886725217, 0.0001268138294108212, 6.1356535297818482e-05, 4.5883291022619233e-05, 7.0195193984545767e-05, 9.0068337158299983e-05, 4.5536580728366971e-05, 3.9547616324853152e-05, 0.00017370536806993186, 0.00017486391880083829, 0.00017935034702531993, 6.2278471887111664e-05, 9.416101238457486e-05, 0.00015747551515232772, 6.9179237470962107e-05, 0.00020348478574305773, 9.1353867901489139e-05, 0.00015358907694462687, 0.00010314936662325636, 0.00010648412717273459, 3.1972707802196965e-05, 7.0675989263691008e-05, 0.00010897508764173836, 0.00015473514213226736, 0.00011650883971014991, 0.00018036550318356603, 5.5312750191660598e-05, 0.00017474008200224489, 2.7008116376237012e-05, 6.4048552303574979e-05, 0.00012327791773714125, 0.00011779491615016013, 0.00011620923760347068, 0.00012960967433173209, 0.00016613605839665979, 0.00011027710570488125, 0.00011028994777007028, 9.1316222096793354e-05, 3.1241335818776861e-05, 0.00014776457101106644, 7.8588207543361932e-05, 2.8966571335331537e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,96,70,54,-34,106,-63,59,-88,-81,48,51,-42,-71,-89,101,78,49,78,66,-73,-83,50,-32,-39,-64,-64,-67,61,-63,-114,-12,41,69,64,-65,53,-50,-23,49,-73,58,62,-93,10,75,-34, 81,-97,127,86,-77,-68,-56,-84,96,-101,-63,74,79,-109,-94,92,-39,95,83,127,84,-114,52,71,-52,-77,-68,-80,56,78,-30,-127,-85,79,82,83,-81,82,-82,-17,75,-95,83,89,-74,-127,93,-103, 35,-45,71,38,18,-41,-47,-39,42,-31,4,34,28,-78,-54,-1,-55,36,35,70,34,-54,31,26,-27,-45,-44,-23,31,30,88,-89,-84,43,35,34,-29,39,-37,-11,41,-39,35,42,-7,-9,36,-74, 
  /* [0][1][][] */ 92,-111,-42,93,56,-82,127,-89,87,-113,-72,82,83,-111,-13,-127,127,107,74,-38,84,108,-127,72,74,-75,-93,-99,-127,86,-70,-9,-88,70,106,96,-85,79,-80,89,84,-100,88,91,-89,106,93,-92, 127,-127,-65,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-23,96,-67,127,127,-51,127,127,68,127,127,-127,-127,-127,54,127,-28,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-77,-33,65,37,-62,-48,-62,55,-42,-61,57,48,-53,-17,10,-63,50,58,-29,58,64,50,64,65,-64,-61,-45,36,54,127,14,-61,68,48,49,-49,60,-59,56,60,-58,54,62,-62,-67,58,-57, 
  /* [0][2][][] */ 45,-50,-47,49,27,-53,63,-42,41,-73,-4,39,56,-72,83,-79,73,51,34,-31,26,-11,-77,29,-24,-44,-49,-49,-75,31,-41,88,-73,37,48,43,-26,37,-42,-88,47,-49,40,44,-23,15,40,-75, 73,-75,-48,80,-56,-64,-71,-67,51,-77,-67,61,74,-48,127,32,-48,60,62,-44,55,-18,41,66,-49,-66,-78,-61,32,61,-24,116,-55,64,57,58,-49,61,-66,-107,69,-68,59,62,-86,50,62,-53, 42,-40,-27,45,29,-20,-17,-34,14,-26,-53,27,31,5,68,23,-36,22,29,-32,28,-1,39,41,-25,-29,-49,-24,33,33,62,66,1,33,15,22,-22,29,-29,-56,28,-32,25,28,-62,9,30,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0042898268438875675, 0.0016891995910555124, 0.0074458159506320953, 0.002187670674175024, 0.0055599561892449856, 0.0034254489000886679, 0.0061487308703362942, 0.0053895879536867142, 0.002607652684673667, 0.0019500397611409426, 0.0029832958243787289, 0.0038279043510556221, 0.0019353046081960201, 0.0016807736828923225, 0.0073824780993163586, 0.0074317166581749916, 0.0076223895885050297, 0.0026468350552022457, 0.0040018428117036819, 0.0066927094012498856, 0.0029401176143437624, 0.0086481031030416489, 0.0038825392257422209, 0.006527535617351532, 0.0043838480487465858, 0.0045255753211677074, 0.0013588400324806571, 0.0030037295073270798, 0.0046314410865306854, 0.0065762433223426342, 0.0049516255967319012, 0.0076655340380966663, 0.0023507918231189251, 0.0074264532886445522, 0.0011478449450805783, 0.0027220635674893856, 0.0052393116056919098, 0.005006283987313509, 0.0049388925544917583, 0.0055084112100303173, 0.0070607820525765419, 0.004686777014285326, 0.0046873227693140507, 0.0038809392135590315, 0.0013277566758915782, 0.0062799942679703236, 0.0033399988897144794, 0.0012310792226344347, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 746, 978, 2432, 426, 8555, 19407, 2511, 34, -790, -634, 1387, 954, 3764, 1344, 22573, 3186, 2403, -1235, -303, 3818, -1872, 12167, 11342, 11461, 4942, 299, 4004, 4437, 9255, -571, 8555, 6430, 696, -214, 5542, 3300, -2019, 329, -615, 5802, 1178, -697, -1107, 85, 1121, 3235, 918, 1022, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00032553891651332378, 0.00071715237572789192, 0.00023195320682134479, 0.00032793244463391602, 0.00025599467335268855, 0.00020762813801411539, 0.0004370145034044981, 0.00025811613886617124, 0.00037995018647052348, 0.00066444423282518983, 0.00073870562482625246, 0.00029540376272052526, 0.00033713909215293825, 0.00056542374659329653, 0.00016011972911655903, 0.00039598080911673605, 0.00021556708088610321, 0.00033267764956690371, 0.00023076310753822327, 0.00024095768458209932, 0.0003263351391069591, 0.00021064000611659139, 0.00032413357985205948, 0.00013629427121486515, 0.00032136170193552971, 0.00026144349249079823, 0.0017408751882612705, 0.00042408352601341903, 0.00018814812938217074, 0.00040878090658225119, 0.00030464373412542045, 0.00018887287296820432, 0.00055322010302916169, 0.00021888894843868911, 0.00067138037411496043, 0.00055080931633710861, 0.00069098052335903049, 0.00032825811649672687, 0.00024487849441356957, 0.00032298293081112206, 0.00014189978537615389, 0.00018860188720282167, 0.00026059313677251339, 0.00028104020748287439, 0.0017414503963664174, 0.00043083098717033863, 0.00024188047973439097, 0.0011422919342294335, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,2,-3,75,-39,44,24,-32, 
  /* [1][0][][] */ 26,65,41,17,19,-38,100,127, 
  /* [2][0][][] */ -39,3,5,2,-127,-19,17,5, 
  /* [3][0][][] */ 93,-7,-16,-119,-127,19,33,-17, 
  /* [4][0][][] */ -127,42,-12,-11,63,-10,38,18, 
  /* [5][0][][] */ -101,-23,19,-8,-127,5,12,86, 
  /* [6][0][][] */ -19,-127,25,-13,12,5,-3,34, 
  /* [7][0][][] */ -63,-2,4,101,127,-30,-32,7, 
  /* [8][0][][] */ 77,1,-1,-127,-3,-26,-39,-29, 
  /* [9][0][][] */ -7,-127,1,-8,2,95,-60,81, 
  /* [10][0][][] */ -88,-3,-3,24,-127,70,64,-13, 
  /* [11][0][][] */ 119,15,44,13,-55,-48,-31,-127, 
  /* [12][0][][] */ 1,18,46,-12,15,-82,127,62, 
  /* [13][0][][] */ 63,-32,-9,-17,122,127,115,-37, 
  /* [14][0][][] */ 127,45,-22,25,-105,-11,-28,-11, 
  /* [15][0][][] */ -19,-127,14,-16,1,2,9,39, 
  /* [16][0][][] */ -57,-13,6,-9,-127,-4,10,7, 
  /* [17][0][][] */ -27,99,-115,0,13,-127,103,-82, 
  /* [18][0][][] */ 127,-30,-47,12,-63,27,8,100, 
  /* [19][0][][] */ 127,-42,-14,-4,37,-3,33,1, 
  /* [20][0][][] */ 127,21,-20,125,-8,38,-3,-64, 
  /* [21][0][][] */ 12,34,-61,7,-27,92,-127,-92, 
  /* [22][0][][] */ -127,19,26,-4,-28,7,-50,-24, 
  /* [23][0][][] */ -41,-60,2,20,-127,64,73,-17, 
  /* [24][0][][] */ 127,-4,-3,-1,-84,-11,7,9, 
  /* [25][0][][] */ 26,-17,-1,-22,127,51,54,-31, 
  /* [26][0][][] */ 3,-93,5,-35,8,-127,83,-50, 
  /* [27][0][][] */ -18,-127,27,-12,-4,-53,31,-9, 
  /* [28][0][][] */ -101,28,-34,15,-5,-18,127,103, 
  /* [29][0][][] */ -14,45,19,6,3,40,-99,-127, 
  /* [30][0][][] */ 127,-29,1,10,-76,5,-41,-25, 
  /* [31][0][][] */ -10,-35,58,-16,12,-109,127,74, 
  /* [32][0][][] */ -73,31,9,0,-127,-104,-105,49, 
  /* [33][0][][] */ -31,17,0,25,-127,-61,-45,24, 
  /* [34][0][][] */ 6,-127,46,-8,-12,89,-75,60, 
  /* [35][0][][] */ -21,-47,-127,-10,-1,-66,44,-53, 
  /* [36][0][][] */ 3,127,59,8,-11,14,-22,-40, 
  /* [37][0][][] */ -127,34,36,-15,59,-32,-8,-107, 
  /* [38][0][][] */ -127,-9,-43,-15,44,23,31,106, 
  /* [39][0][][] */ 1,-33,73,-5,11,-89,127,91, 
  /* [40][0][][] */ -31,-18,-12,-34,-127,115,126,-28, 
  /* [41][0][][] */ -127,51,7,-74,-100,-97,-101,49, 
  /* [42][0][][] */ -39,-127,-99,-5,-13,64,-127,-91, 
  /* [43][0][][] */ -68,11,-11,-127,102,64,60,-3, 
  /* [44][0][][] */ 127,-6,13,-86,26,-30,-13,38, 
  /* [45][0][][] */ -17,-127,-7,-15,-12,-74,73,4, 
  /* [46][0][][] */ 115,-3,-4,-21,127,-39,-28,7, 
  /* [47][0][][] */ 127,-3,-2,103,-4,25,15,-45, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00066740199690684676, 0.0014702664921060205, 0.00047553773038089275, 0.0006723090773448348, 0.00052482623141258955, 0.00042566782212816179, 0.00089594314340502024, 0.00052917556604370475, 0.00077895302092656493, 0.0013622071128338575, 0.0015144537901505828, 0.0006056205602362752, 0.00069118407554924488, 0.0011592007940635085, 0.00032826868118718266, 0.00081181811401620507, 0.00044194379006512463, 0.00068203744012862444, 0.0004730978689622134, 0.00049399823183193803, 0.00066903437254950404, 0.00043184257810935378, 0.00066452089231461287, 0.00027942302403971553, 0.00065883813658729196, 0.00053599709644913673, 0.0035690467339009047, 0.00086943275528028607, 0.00038573096389882267, 0.00083806016482412815, 0.00062456389423459768, 0.00038721680175513029, 0.0011341815115883946, 0.00044875411549583077, 0.0013764272443950176, 0.0011292389826849103, 0.0014166103210300207, 0.00067297677742317319, 0.00050203647697344422, 0.00066216185223311186, 0.0002909151662606746, 0.0003866612387355417, 0.00053425371879711747, 0.00057617318816483021, 0.0035702260211110115, 0.00088326603872701526, 0.00049589009722694755, 0.0023418641649186611, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -43663, 27278, -11397, -12581, 18969, -6767, 33771, 44133, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00044893307494930923, 0.00066384492674842477, 0.001484396168962121, 0.0016921055503189564, 0.00086874031694605947, 0.00058051408268511295, 0.00070328265428543091, 0.00099962763488292694, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -58,-10,-37,21,11,-22,3,5,-121,127,-37,114,124,11,78,-15,-2,-31,8,6,-4,-2,-19,-36,28,-99,13,70,-9,9,23,-37,-8,-78,112,19,-1,-7,-2,-15,120,-8,49,-21,-30,28,-11,-17, 
  /* [1][0][][] */ 1,33,127,8,-3,-26,1,-81,31,-4,23,2,-20,10,-4,-122,11,-57,12,6,-24,29,25,-37,-16,-10,15,2,13,-7,13,1,-6,13,13,10,-10,-34,65,-59,11,39,-10,25,-15,10,25,-1, 
  /* [2][0][][] */ 3,-50,15,-43,34,29,-7,-31,6,-3,-1,13,-11,60,5,0,-41,127,-26,-33,-13,25,-39,-8,124,2,-2,-8,-28,-8,2,-42,-8,-13,1,10,-12,-4,-13,8,15,-20,-21,1,3,27,-24,-41, 
  /* [3][0][][] */ 0,-88,-5,6,3,-4,-9,-2,-7,-10,17,21,11,-8,47,2,-7,-22,5,21,-8,20,-22,2,5,54,0,6,-7,4,127,2,12,8,-2,-2,-22,-14,-5,12,-9,6,-11,27,-7,-1,0,33, 
  /* [4][0][][] */ -96,8,4,1,-1,-38,2,10,43,-41,22,-19,-32,0,-9,-10,3,9,-1,25,8,-31,16,1,-7,43,3,109,1,3,-8,-28,0,-127,-32,14,6,-3,4,2,-52,-6,-9,18,-58,5,4,8, 
  /* [5][0][][] */ -22,23,19,5,-47,14,-6,48,20,6,17,6,0,-42,5,37,-4,-78,19,7,42,-36,4,41,10,8,-73,-44,-37,-29,17,1,-1,-62,3,-65,66,14,-39,17,25,-47,0,4,127,-10,-41,2, 
  /* [6][0][][] */ -26,-24,-16,-10,34,-31,-3,-28,-8,-9,31,-21,-10,37,2,-59,-3,-3,-1,-24,-32,43,-6,-78,-1,-12,-51,-63,25,45,-17,3,5,-60,-18,67,-67,-50,12,-53,-13,10,21,38,127,-32,40,13, 
  /* [7][0][][] */ 12,31,-75,23,-25,15,6,53,-10,-3,60,-33,7,-29,-10,-5,-19,-127,39,-41,58,40,15,-53,17,-18,23,2,-19,32,-16,5,1,36,-6,-25,-8,-54,-39,-62,-16,-26,37,57,-28,-22,-2,-2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019079655408859253, 0.028213407844305038, 0.063086837530136108, 0.071914486587047577, 0.036921463906764984, 0.024671848863363266, 0.029889512807130814, 0.042484171688556671, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52835, -205, 7779, -184, 5593, -4716, 1311, 30752, 959, 26165, -2537, 15023, -6034, -954, 24191, 10545, 463, 18018, 30136, 11745, -40, -319, 439, 9021, -8131, 23886, 45862, 33774, 3173, 117, -1093, 1525, 683, 17187, -6971, 14721, -10389, 17722, -22302, 120259, 21021, 22333, 10251, -1626, 16179, 2953, 1145, 35, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035884178942069411, 0.00036133479443378747, 0.00019501616770867258, 0.00040155890746973455, 0.00016016220615711063, 0.00010407948866486549, 0.00086261081742122769, 0.00011250268289586529, 0.00015813580830581486, 0.00018119455489795655, 9.4438408268615603e-05, 0.00028219551313668489, 0.00030100008007138968, 0.0001862961653387174, 0.0001023190634441562, 0.00015181796334218234, 0.00020825861429329962, 0.00021977926371619105, 7.7640026574954391e-05, 0.00017724398639984429, 0.00023997468815650791, 0.00017880037194117904, 0.00020786693494301289, 0.00023400444479193538, 0.00016504917584825307, 0.00015341032121796161, 0.00067368766758590937, 0.00010109326831297949, 0.00018668848497327417, 0.0066448249854147434, 9.680115181254223e-05, 0.00017972590285353363, 0.0012124194763600826, 0.00016725703608244658, 0.00020871487504336983, 0.00016815897834021598, 0.00043255521450191736, 0.00014025579730514437, 0.00028819049475714564, 2.0839121134486049e-05, 0.00015383305435534567, 5.489862451213412e-05, 0.0001590598258189857, 0.0001995956408791244, 0.00014946986630093306, 0.00013907127140555531, 0.00023452907043974847, 0.00014749816909898072, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,109,4,80,0,28,16,8,9,8,-9,-9,-45,8,-2,8,-24,-113,-6,-22,127,-10,-2,7,-5,8,-5,4,15,99,20,28,38,-27,2,35,-2,1,17,-68,-9,-9,17,3,-7,-10, 127,10,15,-127,28,85,11,11,125,127,7,44,-51,-24,5,8,127,-56,-60,-56,-101,25,-109,14,17,71,-31,-83,24,21,10,-124,5,-61,127,10,-40,-46,-6,115,-79,-99,-30,2,-35,-8,-127,23, -31,-3,8,14,0,64,4,17,28,9,-14,32,-15,-3,16,4,-103,29,-4,77,-31,-12,-18,-6,-4,-59,-3,29,-16,5,4,-22,8,-23,16,-19,-1,48,41,-13,50,37,-16,11,-44,3,-1,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-27,35,-16,9,9,-13,54,-7,-1,18,-33,0,-50,-60,-86,10,-73,-124,-18,5,99,-15,-127,-8,33,12,-109,17,-53,-2,127,-3,59,-42,41,-63,-127,39,-88,-45,-13,-12,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,94,127,-127,127,-29,-41,127,-127,127,127,127,-81,127,127,127,-120,102,107, 54,6,49,-13,6,-61,44,18,-23,15,-105,-8,0,-40,127,4,63,-66,-71,84,13,-45,11,-33,1,6,-38,68,21,39,1,3,33,-44,9,67,-6,65,68,-10,-82,8,-84,-31,26,-16,-10,6, 
  /* [0][2][][] */ -53,-7,25,-16,7,34,-37,22,8,-23,12,33,7,-6,-38,18,5,22,-14,104,6,-32,-16,-12,-3,22,0,50,-10,3,47,-33,-18,-44,-31,-40,-1,31,8,-22,9,-4,42,-37,-36,18,-11,17, 68,126,75,21,16,-21,124,35,18,-3,43,27,-5,-1,-90,25,-58,-56,-37,121,-37,49,12,19,32,-63,-40,29,77,1,127,21,85,-26,8,-36,-25,-17,-13,118,-28,-12,-40,45,20,-31,8,-127, -42,-4,7,-3,5,-6,-61,8,-18,-10,-40,-40,20,-9,-9,11,33,24,-9,-127,23,-10,5,-9,-6,11,-10,-54,-14,8,6,8,-20,87,-36,-22,-5,37,25,-61,4,8,-38,6,-43,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015250775963068008, 0.015356727875769138, 0.0082881869748234749, 0.01706625334918499, 0.006806893739849329, 0.0044233780354261398, 0.036660958081483841, 0.0047813639976084232, 0.0067207715474069118, 0.0077007682994008064, 0.0040136324241757393, 0.011993309482932091, 0.012792503461241722, 0.0079175867140293121, 0.0043485602363944054, 0.0064522633329033852, 0.0088509907945990562, 0.0093406187370419502, 0.003299701027572155, 0.0075328689999878407, 0.010198923759162426, 0.0075990157201886177, 0.0088343443349003792, 0.0099451886489987373, 0.0070145898498594761, 0.0065199388191103935, 0.028631726279854774, 0.0042964639142155647, 0.007934260182082653, 0.28240504860877991, 0.0041140490211546421, 0.0076383505947887897, 0.051527827978134155, 0.0071084238588809967, 0.0088703818619251251, 0.0071467566303908825, 0.01838359609246254, 0.0059608714655041695, 0.01224809605628252, 0.00088566262274980545, 0.0065379044972360134, 0.0023331914562731981, 0.0067600421607494354, 0.0084828147664666176, 0.0063524693250656128, 0.0059105288237333298, 0.0099674854427576065, 0.0062686721794307232, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 66872, 8301, 7624, 9440, 1861, 12159, -2081, -283, 858, 2309, 3653, 371, 1783, -930, 843, -2267, 5262, 11881, -300, 32749, 3810, 3410, 7368, -665, 4126, 5789, 29306, 12811, -109, -3015, 156, 2752, -2671, 11317, 3142, 8021, 8467, 5536, 27389, 2379, -908, 2905, 1234, 4169, 4980, 2323, -1618, 3001, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 6.475085683632642e-05, 0.00027228111866861582, 0.00020350607519503683, 0.00034329819027334452, 0.0012118513695895672, 0.00041475283796899021, 0.00092925876379013062, 0.00099205784499645233, 0.00064597144955769181, 0.00058708852156996727, 0.00061149615794420242, 0.00040532767889089882, 0.00055297109065577388, 0.00049596477765589952, 0.00051160395378246903, 0.0016021198825910687, 0.00031037212465889752, 0.00035607814788818359, 0.0016968928975984454, 8.233943663071841e-05, 0.00031883199699223042, 0.00029076804639771581, 0.00054086791351437569, 0.00078462832607328892, 0.00029409723356366158, 0.00020107507589273155, 0.00013787699572276324, 0.0002852921315934509, 0.0007338239811360836, 0.00086684746202081442, 0.00046885953634046018, 0.00030342649552039802, 0.00074613612378016114, 0.0001948332937899977, 0.00033425318542867899, 0.000230670120799914, 0.00043401532457210124, 0.00024553359253332019, 8.6327381723094732e-05, 0.0019040129845961928, 0.00064724404364824295, 0.00095317739760503173, 0.00038445016252808273, 0.00036180767347104847, 0.00024041369033511728, 0.00047545190318487585, 0.00070703437086194754, 0.00088393478654325008, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 72,25,-2,-11,127,28,-50,-25, 
  /* [1][0][][] */ -8,-5,1,127,9,-4,9,18, 
  /* [2][0][][] */ 27,-127,-18,42,-4,-71,81,17, 
  /* [3][0][][] */ 127,-26,-11,13,-7,-33,25,5, 
  /* [4][0][][] */ 12,-45,127,-17,-15,-47,10,-98, 
  /* [5][0][][] */ 64,8,6,-2,127,17,-11,-4, 
  /* [6][0][][] */ -15,86,-12,127,24,53,-69,-59, 
  /* [7][0][][] */ -3,127,-4,3,3,-12,14,-4, 
  /* [8][0][][] */ 127,52,1,7,-43,-23,3,-33, 
  /* [9][0][][] */ -127,8,0,15,46,11,-11,5, 
  /* [10][0][][] */ -68,-6,16,127,41,25,-16,-2, 
  /* [11][0][][] */ -127,5,16,-66,34,5,-26,-50, 
  /* [12][0][][] */ 127,22,-1,16,-45,-14,1,-43, 
  /* [13][0][][] */ -15,79,-127,-12,2,97,-69,78, 
  /* [14][0][][] */ -54,-33,-13,127,19,14,-11,-25, 
  /* [15][0][][] */ -3,127,2,-3,3,-14,9,-52, 
  /* [16][0][][] */ -14,-127,-19,7,-12,-106,117,-27, 
  /* [17][0][][] */ 23,127,0,-11,6,79,-86,-21, 
  /* [18][0][][] */ -12,45,-127,-3,9,55,-37,68, 
  /* [19][0][][] */ -82,13,2,2,-127,8,19,24, 
  /* [20][0][][] */ -127,-17,1,3,76,-32,44,-2, 
  /* [21][0][][] */ -61,1,-4,-4,-127,-7,22,7, 
  /* [22][0][][] */ -127,-27,-4,-7,77,-13,38,49, 
  /* [23][0][][] */ -19,-23,-5,-11,-4,83,-127,-92, 
  /* [24][0][][] */ -10,38,-127,3,8,46,-19,77, 
  /* [25][0][][] */ 113,-44,-5,127,-79,-21,17,-43, 
  /* [26][0][][] */ 5,-24,-3,3,-7,127,127,-31, 
  /* [27][0][][] */ 65,-14,0,16,127,31,33,-16, 
  /* [28][0][][] */ -3,127,-70,6,3,82,-34,121, 
  /* [29][0][][] */ -7,10,-5,-8,-1,84,-127,-82, 
  /* [30][0][][] */ 3,-4,0,-127,-8,1,-5,-16, 
  /* [31][0][][] */ -66,7,3,4,-127,14,15,-5, 
  /* [32][0][][] */ -15,39,6,-127,-10,30,-96,-111, 
  /* [33][0][][] */ -60,-4,0,0,-127,40,45,1, 
  /* [34][0][][] */ -127,65,4,21,34,-22,6,8, 
  /* [35][0][][] */ -26,127,-5,-9,-4,-96,74,-26, 
  /* [36][0][][] */ 0,43,6,-26,-5,106,-127,-28, 
  /* [37][0][][] */ 29,-65,-8,27,24,-127,122,-11, 
  /* [38][0][][] */ 12,-127,12,1,18,69,-55,73, 
  /* [39][0][][] */ 4,-127,-15,-7,-4,-12,-47,-92, 
  /* [40][0][][] */ 115,55,6,-11,-51,87,-127,-100, 
  /* [41][0][][] */ 6,-123,19,3,-6,86,-59,127, 
  /* [42][0][][] */ 47,-1,-9,-127,-52,1,-6,-39, 
  /* [43][0][][] */ -96,-28,16,-127,61,16,-20,-12, 
  /* [44][0][][] */ -5,-24,-2,19,-31,95,127,-16, 
  /* [45][0][][] */ -127,-30,5,8,23,10,31,-25, 
  /* [46][0][][] */ 17,83,127,-3,-5,15,12,22, 
  /* [47][0][][] */ 0,3,4,127,7,3,2,-2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017900812963489443, 0.00075273960828781128, 0.00056260632118210196, 0.00094907107995823026, 0.0033502453006803989, 0.0011466123396530747, 0.0025689988397061825, 0.0027426111046224833, 0.0017858318751677871, 0.0016230460023507476, 0.0016905225347727537, 0.0011205557966604829, 0.0015287259593605995, 0.0013711282517760992, 0.0014143637381494045, 0.0044291689991950989, 0.00085804477566853166, 0.00098440214060246944, 0.0046911751851439476, 0.00022763294691685587, 0.00088143267203122377, 0.00080384797183796763, 0.0014952659839764237, 0.0021691580768674612, 0.00081305170897394419, 0.00055588566465303302, 0.00038117027725093067, 0.00078870938159525394, 0.0020287060178816319, 0.0023964585270732641, 0.001296193921007216, 0.0008388431160710752, 0.0020627437625080347, 0.00053862982895225286, 0.00092406559269875288, 0.00063770316774025559, 0.0011998647823929787, 0.00067879428388550878, 0.00023865789989940822, 0.0052637727931141853, 0.0017893500626087189, 0.0026351234409958124, 0.0010628384770825505, 0.0010002418421208858, 0.00066463992698118091, 0.0013144189724698663, 0.0019546444527804852, 0.0024436975363641977, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4003, -25296, 24219, 23348, 2881, 1277, 38103, 8189, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013219206593930721, 0.00077602209057658911, 0.0015414452645927668, 0.0012490599183365703, 0.00097899057436734438, 0.0011460728710517287, 0.00082056043902412057, 0.00081841816427186131, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,-3,11,-92,10,28,7,6,5,4,2,-7,99,0,1,6,0,-7,-4,1,81,-3,-2,5,31,35,11,13,6,6,3,-127,10,5,1,2,-29,3,-17,36,9,-27,-8,4,1,-4,6,3, 
  /* [1][0][][] */ -35,-9,-1,-6,43,28,-29,76,22,7,-33,-23,13,0,18,36,0,43,17,-48,2,20,127,19,-28,0,53,6,23,-1,19,-10,13,-8,-10,-19,6,-55,10,5,-7,-10,-82,-8,-34,8,-48,-100, 
  /* [2][0][][] */ -58,15,-4,10,43,-10,29,26,-9,56,10,-6,2,0,5,53,0,11,-127,21,-1,12,8,-13,-29,2,38,2,9,31,22,3,8,-7,-12,-14,13,5,2,-1,36,-4,-32,1,22,-56,22,12, 
  /* [3][0][][] */ 0,2,-1,7,-3,28,2,-5,65,18,-4,-4,28,0,-30,-6,0,0,-7,2,-2,0,4,-20,-11,-8,-11,-3,-6,-2,1,-7,-50,45,-53,-1,8,1,1,-127,2,5,2,-53,-1,-4,0,8, 
  /* [4][0][][] */ 2,-3,82,33,1,-21,1,-4,3,-3,-3,-6,-78,0,-10,3,0,8,4,2,65,3,0,-5,-16,32,-6,46,-6,0,1,98,2,4,-3,-3,16,-13,-10,-19,-3,-127,5,3,1,-2,2,1, 
  /* [5][0][][] */ -7,45,3,-9,3,47,26,10,-19,29,8,53,25,0,-127,-2,0,12,-38,22,-9,9,-15,41,-19,-2,25,-5,-14,25,23,-18,50,30,-39,-3,4,19,-48,14,26,-12,-10,29,21,59,23,25, 
  /* [6][0][][] */ -23,-53,4,6,40,-45,-20,9,27,-25,-13,87,-5,0,-127,39,0,-8,49,-19,-3,3,24,-35,32,1,-4,-9,45,-14,-12,-3,92,-31,26,0,-2,-10,-70,-24,-13,-17,-2,-27,-19,-84,-19,-25, 
  /* [7][0][][] */ -110,-21,-14,10,127,21,65,27,12,7,27,-34,-28,0,87,104,0,11,3,59,-14,-2,-27,44,19,4,47,3,48,62,56,-6,-11,-15,-20,-22,7,23,25,33,72,5,-27,-11,58,3,63,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.056181624531745911, 0.032980937510728836, 0.065511420369148254, 0.053085047751665115, 0.041607096791267395, 0.048708096146583557, 0.03487381711602211, 0.034782771021127701, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 71910, 58820, 62609, 43197, 19, 13922, 2472, 27030, 29188, 22308, 29211, -755, -46688, -127, 44841, 679, -204, 43471, 3393, 1995, -15678, 13686, 49776, 33593, -24582, 36446, 46311, 24702, -2698, 15585, -7053, -50438, 11945, 118307, 29560, 1667, 58066, -441, 150207, -22956, 14423, -27158, 1663, 101586, -1428, 78420, 1214, -22494, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.366302790818736e-05, 6.6467066062614322e-05, 0.00014692480908706784, 0.00010875897714868188, 0.00015087329666130245, 0.00018215332238469273, 0.00017251317331101745, 6.7235916503705084e-05, 8.0051780969370157e-05, 3.5007422411581501e-05, 7.3859373515006155e-05, 2.8662245313171297e-05, 0.00017498283705208451, 0.005541567225009203, 5.7036842918023467e-05, 0.00022359247668646276, 0.0027484172023832798, 1.8483215171727352e-05, 7.9717327025718987e-05, 0.00017547250899951905, 0.00011018961959052831, 0.000135800801217556, 0.00011857159552164376, 3.9214446587720886e-05, 0.00010064530215458944, 7.7112199505791068e-05, 2.9800485208397731e-05, 4.1612580389482901e-05, 0.00026610764325596392, 4.6795830712653697e-05, 5.0781931349774823e-05, 0.00019281147979199886, 0.00020640481670852751, 8.2398937593097799e-06, 8.4011393482796848e-05, 0.00020483329717535526, 1.5965755665092729e-05, 0.00044653209624812007, 3.1125662644626573e-05, 8.2242077041883022e-05, 5.7433087931713089e-05, 0.00018182022904511541, 0.00011166074546054006, 9.296471944253426e-06, 0.00019047946261707693, 7.5117714004591107e-05, 0.0002177233254769817, 0.00011100784467998892, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-6,-16,7,-39,-79,-67,-28,-50,8,66,34,-71,115,-43,-113,-84,36,-6,-2,-70,-111,-79,-36,-125,-63,-20,70,16,96,26,-127,-89,-8,54,19,48,-127,78,-76,-14,105,-108,-3,-35,-87,107, 76,12,-28,-29,58,-127,-127,-81,61,-77,-115,109,37,-82,0,62,-52,-113,59,7,10,-112,-127,-70,-5,-127,-120,-41,-55,21,-57,54,28,-127,64,83,13,73,-92,127,-127,6,124,-127,1,-23,-127,94, -32,43,6,-5,-64,-109,-58,-17,87,-8,-127,38,8,-71,-101,-11,-127,-24,27,11,-15,-75,-36,-24,-11,-30,-58,-13,-10,18,-24,9,106,-86,70,31,14,36,-5,16,-79,4,6,-79,-17,5,-56,15, 
  /* [0][1][][] */ -86,-127,-44,-43,-10,55,99,-105,-26,-108,-20,113,90,-64,28,-97,-121,-95,89,-76,41,-88,-103,-127,42,-119,-78,-37,127,-60,127,84,-43,-84,-15,83,-35,-77,-108,90,42,59,105,-109,-91,-117,82,119, 127,-82,-127,-127,127,41,94,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-99,-127,-127,-120,-127,-71,127,28,-111,127,127,-68,-127,-97,90,61,127,127,-117,-113,-127,125,127, -53,31,-62,-84,-119,-23,31,-37,127,-20,-76,35,56,-70,-25,-44,-37,-29,54,-71,57,-80,-39,-23,47,-5,-46,-60,15,-89,-36,19,30,-99,117,23,-36,-62,1,-15,37,54,9,-74,-58,-37,65,36, 
  /* [0][2][][] */ -61,-106,-34,-34,0,35,-5,-34,-38,-60,-16,60,77,-127,-127,-64,-43,-18,64,74,52,-32,-13,-60,33,-55,-11,-58,76,29,77,62,107,-26,-38,-9,-95,35,-18,31,10,38,15,-56,96,-77,3,31, 87,-73,-88,-85,81,19,6,-46,48,-71,-32,55,82,-26,16,92,-24,-31,77,116,82,-52,-18,-58,94,-68,-19,-98,-50,39,-45,111,-18,-49,67,6,-127,50,-15,-1,11,32,15,-67,127,-100,-12,40, -29,29,-42,-36,-79,-19,22,-11,59,-5,-13,32,31,-43,112,-29,-93,-4,30,59,74,-27,-1,-2,44,3,-4,-63,-13,28,-20,39,-90,-43,65,3,-20,22,27,-39,7,35,-5,-15,63,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0035556787624955177, 0.0028248503804206848, 0.0062443041242659092, 0.0046222563832998276, 0.0064121149480342865, 0.0077415159903466702, 0.0073318099603056908, 0.0028575265314429998, 0.0034022005274891853, 0.0014878154033794999, 0.0031390234362334013, 0.0012181453639641404, 0.0074367704801261425, 0.23551659286022186, 0.0024240657221525908, 0.0095026800408959389, 0.1168077290058136, 0.00078553659841418266, 0.0033879864495247602, 0.0074575813487172127, 0.0046830587089061737, 0.00577153405174613, 0.0050392928533256054, 0.0016666139708831906, 0.0042774253524839878, 0.0032772684935480356, 0.0012665205867961049, 0.0017685346538200974, 0.011309574358165264, 0.0019888228271156549, 0.0021582320332527161, 0.0081944875419139862, 0.0087722046300768852, 0.00035019547794945538, 0.0035704842302948236, 0.0087054148316383362, 0.00067854457302019, 0.018977614119648933, 0.0013228405732661486, 0.0034952880814671516, 0.0024409061297774315, 0.0077273594215512276, 0.0047455816529691219, 0.00039510003989562392, 0.0080953771248459816, 0.0031925027724355459, 0.0092532411217689514, 0.0047178333625197411, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 5368, 112, 12313, 8214, 8314, 7957, 11202, -50, 37, -429, 3011, 530, 15034, -100828464, 3868, 26546, -81393968, -140, -612, 12781, 4856, -26, -42, 563, 4566, -1001, 89, 902, 5326, 2259, 3288, 16482, 5029, 398, 386, -2195, 385, 4504, -173, 15031, 2871, 15713, -302, -106, 17306, 257, 9301, 5614, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00039096749969758093, 0.00037744504516012967, 0.00025804401957429945, 0.00022892576816957444, 0.00023897644132375717, 0.00025918515166267753, 0.00033985738991759717, 0.0011780787026509643, 0.00034942236379720271, 0.00178162707015872, 0.00049511733232066035, 0.0015995973953977227, 0.00014671696408186108, 1.6085106580021602e-09, 0.00068046647356823087, 0.00012481219891924411, 1.6085106580021602e-09, 0.0053016715683043003, 0.00031665625283494592, 0.0003040254523511976, 0.00022446230286732316, 0.0036730186548084021, 0.00025547944824211299, 0.0011366070248186588, 0.00083489058306440711, 0.00054427236318588257, 0.0017824663082137704, 0.0013777499552816153, 0.00021146026847418398, 0.0013049088884145021, 0.00090066256234422326, 0.00014127729809843004, 0.00015389209147542715, 0.0081562427803874016, 0.00038207889883778989, 0.00055012980010360479, 0.004017142578959465, 0.00028320544515736401, 0.0021357105579227209, 0.00023181299911811948, 0.00099093932658433914, 0.00014160905266180634, 0.00049628241686150432, 0.0078733395785093307, 0.00029023908427916467, 0.00038746683276258409, 0.00030230425181798637, 0.0001571008178871125, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 17,-127,48,-42,30,-16,-47,24, 
  /* [1][0][][] */ 69,62,-22,-93,11,-12,-81,127, 
  /* [2][0][][] */ 33,7,-43,127,56,123,49,90, 
  /* [3][0][][] */ 80,69,-82,127,-88,-8,-8,16, 
  /* [4][0][][] */ -34,-108,77,8,7,29,-49,-127, 
  /* [5][0][][] */ 21,5,-34,39,-1,-33,37,127, 
  /* [6][0][][] */ 56,-21,-127,-76,114,10,49,-29, 
  /* [7][0][][] */ 127,16,24,-22,28,-3,87,-59, 
  /* [8][0][][] */ 18,-96,11,107,0,18,-13,-127, 
  /* [9][0][][] */ 103,-127,14,-6,-12,7,-127,83, 
  /* [10][0][][] */ -127,-32,-122,20,-12,-1,-104,51, 
  /* [11][0][][] */ -23,-44,-8,-99,-127,-36,49,-19, 
  /* [12][0][][] */ 17,9,-37,66,-69,-22,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -5,-34,-8,12,44,127,46,41, 
  /* [15][0][][] */ 46,0,15,-127,71,42,-57,79, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,23,127,22,-26,-8,29,30, 
  /* [18][0][][] */ 86,-127,25,31,-3,15,-120,3, 
  /* [19][0][][] */ -127,-10,29,71,-64,-62,-102,72, 
  /* [20][0][][] */ 30,32,-39,109,-24,-127,-8,56, 
  /* [21][0][][] */ 55,21,127,8,-15,-10,65,12, 
  /* [22][0][][] */ -76,-19,-127,5,6,14,-97,5, 
  /* [23][0][][] */ -102,127,-19,-19,8,-15,119,-79, 
  /* [24][0][][] */ 5,-56,-53,86,-7,-63,100,127, 
  /* [25][0][][] */ 12,46,36,33,127,122,-75,-53, 
  /* [26][0][][] */ -84,-30,-127,-1,7,17,-94,-1, 
  /* [27][0][][] */ 0,-26,-29,13,-47,127,71,45, 
  /* [28][0][][] */ -1,-19,-24,44,20,127,56,58, 
  /* [29][0][][] */ 90,34,127,-1,-19,-21,86,-9, 
  /* [30][0][][] */ -85,127,-28,-26,10,-9,103,-48, 
  /* [31][0][][] */ -39,-91,-17,7,28,-72,127,111, 
  /* [32][0][][] */ 4,7,-53,120,-11,97,90,127, 
  /* [33][0][][] */ 1,65,-9,-113,11,-12,-10,127, 
  /* [34][0][][] */ -27,91,-8,-107,33,-13,14,127, 
  /* [35][0][][] */ 127,10,-10,-41,19,28,95,-39, 
  /* [36][0][][] */ -127,-3,23,57,-29,8,-122,74, 
  /* [37][0][][] */ -7,-23,-12,24,31,127,48,47, 
  /* [38][0][][] */ 11,21,7,85,127,-9,-21,33, 
  /* [39][0][][] */ 7,27,36,-127,28,2,-41,120, 
  /* [40][0][][] */ 97,30,127,5,-11,-12,91,-7, 
  /* [41][0][][] */ 3,-24,-27,80,53,127,69,106, 
  /* [42][0][][] */ -81,-8,127,24,-38,16,-26,58, 
  /* [43][0][][] */ -14,-51,6,96,-16,2,13,-127, 
  /* [44][0][][] */ 32,1,-70,-127,63,-35,-3,-121, 
  /* [45][0][][] */ -91,127,1,-51,11,-1,75,-59, 
  /* [46][0][][] */ -127,-26,36,25,-28,38,-86,43, 
  /* [47][0][][] */ 107,15,125,4,28,-17,127,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00095693627372384071, 0.00092383858282119036, 0.00063159136334434152, 0.00056032120482996106, 0.00058492133393883705, 0.00063438439974561334, 0.00083183863898739219, 0.0028834783006459475, 0.00085524999303743243, 0.0043607298284769058, 0.0012118546292185783, 0.0039151920937001705, 0.00035910605220124125, 3.937008052901092e-09, 0.0016655171057209373, 0.00030549170332960784, 3.937008052901092e-09, 0.012976428493857384, 0.0007750513032078743, 0.00074413599213585258, 0.0005493963835760951, 0.008990120142698288, 0.0006253143073990941, 0.0027819718234241009, 0.0020434872712939978, 0.0013321669539436698, 0.0043627838604152203, 0.0033721956424415112, 0.00051757245091721416, 0.0031939090695232153, 0.0022044715005904436, 0.00034579183557070792, 0.00037666794378310442, 0.019963309168815613, 0.00093518046196550131, 0.0013465037336573005, 0.0098324017599225044, 0.00069317669840529561, 0.0052273883484303951, 0.0005673880223184824, 0.0024254338350147009, 0.00034660386154428124, 0.0012147062225267291, 0.019270870834589005, 0.00071039237082004547, 0.0009483680478297174, 0.00073992315446957946, 0.00038452167063951492, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -748, -43281, -7453, -12905, -33119, -2152, -25069, -26520, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0021940674632787704, 0.0023585751187056303, 0.0023719801101833582, 0.0012542810291051865, 0.0011835307814180851, 0.0021503681782633066, 0.0018243560334667563, 0.0011314069852232933, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,0,1,125,-2,0,-1,-2,-127,-94,-5,0,126,-2,0, 
  /* [1][0][][] */ 0,-30,0,86,71,15,22,8,0,-7,127,-44,0,29,-12,0, 
  /* [2][0][][] */ 0,-1,0,-12,-60,4,9,2,-1,3,-17,0,0,127,-8,0, 
  /* [3][0][][] */ 0,-10,-22,-127,82,22,74,15,-1,61,-2,41,0,-2,18,0, 
  /* [4][0][][] */ 0,47,-25,35,-53,33,127,11,-2,-59,16,-10,0,-6,16,0, 
  /* [5][0][][] */ 0,-17,-11,0,-23,-23,-11,16,0,8,-4,-43,0,-5,127,0, 
  /* [6][0][][] */ 0,15,-5,0,51,-21,-21,-6,-1,-103,114,61,0,127,60,0, 
  /* [7][0][][] */ 0,16,-17,127,6,-4,19,8,-1,66,-52,75,0,-9,49,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.093247860670089722, 0.10023944079875946, 0.10080914944410324, 0.053306940943002701, 0.050300057977437973, 0.091390646994113922, 0.077535130083560944, 0.048084795475006104, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 12631, 75340, 8312, 8044, 13764, 13660, 26318, -4320, 3397, 27473, 15203, -445, 24716, 9569, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00020604225574061275, 5.319534830050543e-05, 0.00042577381827868521, 0.00020682047761511058, 0.00024002231657505035, 0.00038510895683430135, 0.00014815053145866841, 2.9722838007728569e-05, 0.00047676445683464408, 0.0002329695998923853, 0.00083220662781968713, 0.00072724185883998871, 0.00029010820435360074, 0.00021568528609350324, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-127,39,-67,80,-76,-90,-3,-8,29,-127,4,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,77,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,15,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-15,-8,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-6,39,-40,52,-77,0,0,5,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0087567958980798721, 0.0022608023136854172, 0.018095387145876884, 0.0087898699566721916, 0.01020094845443964, 0.016367129981517792, 0.006296397652477026, 0.0012632205616682768, 0.020262489095330238, 0.009901207871735096, 0.035368781536817551, 0.030907778069376945, 0.01232959795743227, 0.0091666243970394135, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 13783, -56219, 9271, 175725, 1838, 55147, 6996, -49656, 17933, 13006, 396646, -1073741824, 18294, 17301, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00027686834800988436, 0.0003331054758746177, 6.1852420913055539e-05, 1.7019752704072744e-05, 0.00039113283855840564, 8.4747924120165408e-05, 0.00047842116327956319, 6.1755104070471134e-06, 8.2340608059894294e-05, 0.00022913339489605278, 1.4742656276212074e-05, 1.1533876076441629e-09, 0.00021142352488823235, 0.00011056744551751763, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 44,-4,28, -7,-23,14, -127,-118,-66, 
  /* [1][1][][] */ 0,-6,-3, -23,2,-6, -1,-32,4, 
  /* [1][2][][] */ -6,14,-4, -7,5,-5, 34,-21,9, 
  /* [2][0][][] */ 29,-7,-5, 76,114,3, 39,-41,9, 
  /* [2][1][][] */ 10,12,0, 73,127,-26, 21,-6,-5, 
  /* [2][2][][] */ 48,-68,21, 74,-46,-20, 32,-57,15, 
  /* [3][0][][] */ 6,31,3, 35,92,22, 3,7,-4, 
  /* [3][1][][] */ 23,37,8, 70,127,29, -11,-17,5, 
  /* [3][2][][] */ 9,7,7, 28,27,10, 0,-3,4, 
  /* [4][0][][] */ 45,74,-14, 24,87,-14, -11,12,-5, 
  /* [4][1][][] */ 54,95,51, 40,127,31, 39,58,-16, 
  /* [4][2][][] */ 62,81,34, 51,127,13, -21,24,21, 
  /* [5][0][][] */ 8,3,-119, -4,3,-103, -4,31,-26, 
  /* [5][1][][] */ 4,-43,-127, -2,-44,-113, 1,16,-22, 
  /* [5][2][][] */ -3,9,-16, 1,-1,-10, 3,16,-10, 
  /* [6][0][][] */ 23,-64,33, 47,-87,39, 10,-19,10, 
  /* [6][1][][] */ 35,-97,60, 63,-127,71, 8,-27,18, 
  /* [6][2][][] */ 18,-36,12, 13,-45,25, -11,8,0, 
  /* [7][0][][] */ -29,20,2, -108,-36,-2, -23,26,-2, 
  /* [7][1][][] */ -12,-4,-1, -127,-90,-10, -4,-3,2, 
  /* [7][2][][] */ -23,31,-11, -14,12,-2, -21,27,-5, 
  /* [8][0][][] */ 58,62,84, 56,61,83, 43,46,68, 
  /* [8][1][][] */ 60,62,83, 57,60,81, 44,45,67, 
  /* [8][2][][] */ 110,117,127, 108,116,126, 57,61,78, 
  /* [9][0][][] */ -24,-6,8, -16,-8,0, 1,3,-9, 
  /* [9][1][][] */ 89,109,-7, 72,127,18, -9,19,28, 
  /* [9][2][][] */ -24,-22,18, 5,-27,3, 10,3,-18, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -15,-27,-2, 8,-44,4, 7,-104,-55, 
  /* [11][1][][] */ -48,-44,-21, -37,-65,-39, -17,-62,-56, 
  /* [11][2][][] */ -9,-42,-80, 118,127,65, -41,12,-48, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,25, 7,15,11, 
  /* [13][2][][] */ -8,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-8,-39, 78,-29,-53, 31,-12,-22, 
  /* [14][1][][] */ 89,-19,-76, 127,-43,-91, 58,-21,-39, 
  /* [14][2][][] */ 54,-12,-48, 73,-25,-55, 24,-9,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.5060079994764237e-07, 0.074087917804718018, 0.089136555790901184, 0.016551248729228973, 0.004554359707981348, 0.10466425120830536, 0.022677917033433914, 0.1280219554901123, 0.0016525208484381437, 0.022033736109733582, 0.061314400285482407, 0.0039450256153941154, 3.086379649630544e-07, 0.056575369089841843, 0.029587028548121452, 3.3271785326860481e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,64,64,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,64,64,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.40856167674064636, } };
const TfArray<1, int> quant46_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,64,64,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,65,65,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.36172020435333252, } };
const TfArray<1, int> quant50_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.49220588803291321, } };
const TfArray<1, int> quant53_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,32,32,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.48777034878730774, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,32,32,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,33,33,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,16,16,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26397004723548889, } };
const TfArray<1, int> quant58_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.1872163712978363, } };
const TfArray<1, int> quant61_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28980699181556702, } };
const TfArray<1, int> quant62_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.21022433042526245, } };
const TfArray<1, int> quant65_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,16,16,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.39733251929283142, } };
const TfArray<1, int> quant66_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,16,16,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.037656266242265701, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,16,16,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.067347265779972076, } };
const TfArray<1, int> quant69_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,16,16,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension44, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 65536), (TfLiteIntArray*)&g0::tensor_dimension46, 32768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension47, 196608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 202800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 202800), (TfLiteIntArray*)&g0::tensor_dimension49, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 98304), (TfLiteIntArray*)&g0::tensor_dimension50, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension51, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension53, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension55, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 52272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 52272), (TfLiteIntArray*)&g0::tensor_dimension57, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64560), (TfLiteIntArray*)&g0::tensor_dimension58, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension59, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension61, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 49152), (TfLiteIntArray*)&g0::tensor_dimension62, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension63, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28672), (TfLiteIntArray*)&g0::tensor_dimension65, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension66, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 24576), (TfLiteIntArray*)&g0::tensor_dimension68, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 768), (TfLiteIntArray*)&g0::tensor_dimension69, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
